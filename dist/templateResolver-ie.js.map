{"mappings":"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","sources":["<anon>","src/js/templateResolver.js","lib/js/flattenToArray.js","src/js/templateResolver-ie.js","lib/js/polyfills/indexOfPolyfill.js","lib/js/polyfills/objectKeysPolyfill.js"],"sourcesContent":["var $parcel$global =\ntypeof globalThis !== 'undefined'\n  ? globalThis\n  : typeof self !== 'undefined'\n  ? self\n  : typeof window !== 'undefined'\n  ? window\n  : typeof global !== 'undefined'\n  ? global\n  : {};\nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequirec1f2\"];\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequirec1f2\"] = parcelRequire;\n}\nparcelRequire.register(\"8ZIyB\", function(module, exports) {\n/**\n * @file Provides a simple template resolver, that replaces variables in double curly brackets with the values of a given object.\n * @version {@link https://github.com/JohT/data-restructor-js/releases/latest latest version}\n * @author JohT\n * @version ${project.version}\n */ \"use strict\";\nvar $68c6955ebe469375$var$module = $68c6955ebe469375$var$templateResolverInternalCreateIfNotExists($68c6955ebe469375$var$module); // Fallback for vanilla js without modules\nfunction $68c6955ebe469375$var$templateResolverInternalCreateIfNotExists(objectToCheck) {\n    return objectToCheck || {};\n}\n/**\n * Provides a simple template resolver, that replaces variables in double curly brackets with the values of a given object.\n * @module template_resolver\n */ var $68c6955ebe469375$var$template_resolver = $68c6955ebe469375$var$module.exports = {}; // Export module for npm...\n$68c6955ebe469375$var$template_resolver.internalCreateIfNotExists = $68c6955ebe469375$var$templateResolverInternalCreateIfNotExists;\n\nvar $68c6955ebe469375$var$internal_object_tools = $68c6955ebe469375$var$internal_object_tools || (parcelRequire(\"7HmuL\")); // supports vanilla js & npm\n$68c6955ebe469375$var$template_resolver.Resolver = function() {\n    var removeArrayBracketsRegEx = new RegExp(\"\\\\[\\\\d+\\\\]\", \"gi\");\n    /**\n   * Resolver. Is used inside this repository. It could also be used outside.\n   * @param {*} sourceDataObject The properties of this object will be used to replace the placeholders in the template.\n   * @constructs Resolver\n   * @alias module:template_resolver.Resolver\n   */ function Resolver(sourceDataObject) {\n        /**\n     * The properties of this source data object will be used to replace the placeholders in the template.\n     */ this.sourceDataObject = sourceDataObject;\n        /**\n     * Resolves the given template.\n     *\n     * The template may contain variables in double curly brackets.\n     * Supported variables are all properties of this object, e.g. \"{{fieldName}}\", \"{{displayName}}\", \"{{value}}\".\n     * Since this object may also contains (described) groups of sub objects, they can also be used, e.g. \"{{summaries[0].value}}\"\n     * Parts of the index can be inserted by using e.g. \"{{index[1]}}\".\n     *\n     * @param {string} template\n     * @returns {string} resolved template\n     */ this.resolveTemplate = function(template) {\n            return this.replaceResolvableFields(template, addFieldsPerGroup(this.resolvableFieldsOfAll(this.sourceDataObject)));\n        };\n        /**\n     * Returns a map like object, that contains all resolvable fields and their values as properties.\n     * This function takes a variable count of input parameters,\n     * each containing an object that contains resolvable fields to extract from.\n     *\n     * The recursion depth is limited to 3, so that an object,\n     * that contains an object can contain another object (but not further).\n     *\n     * Properties beginning with an underscore in their name will be filtered out, since they are considered as internal fields.\n     *\n     * @param {...object} varArgs variable count of parameters. Each parameter contains an object that fields should be resolvable for variables.\n     * @returns {object} object with resolvable field names and their values.\n     * @public\n     */ this.resolvableFieldsOfAll = function() {\n            var map = {};\n            var ignoreInternalFields = function(propertyName) {\n                return propertyName.indexOf(\"_\") !== 0 && propertyName.indexOf(\"._\") < 0;\n            };\n            var index;\n            for(index = 0; index < arguments.length; index += 1)addToFilteredMapObject($68c6955ebe469375$var$internal_object_tools.flattenToArray(arguments[index], 3), map, ignoreInternalFields);\n            return map;\n        };\n        /**\n     * Replaces all variables in double curly brackets, e.g. {{property}},\n     * with the value of that property from the resolvableProperties.\n     *\n     * Supported property types: string, number, boolean\n     * @param {string} stringContainingVariables\n     * @param {object[]} resolvableFields (name=value)\n     */ this.replaceResolvableFields = function(stringContainingVariables, resolvableFields) {\n            var replaced = stringContainingVariables;\n            var propertyNames = Object.keys(resolvableFields);\n            var propertyIndex = 0;\n            var propertyName = \"\";\n            var propertyValue = \"\";\n            for(propertyIndex = 0; propertyIndex < propertyNames.length; propertyIndex += 1){\n                propertyName = propertyNames[propertyIndex];\n                propertyValue = resolvableFields[propertyName];\n                replaced = replaced.replace(\"{{\" + propertyName + \"}}\", propertyValue);\n            }\n            return replaced;\n        };\n    }\n    /**\n   * Adds the value of the \"fieldName\" property (including its group prefix) and its associated \"value\" property content.\n   * For example: detail[2].fieldName=\"name\", detail[2].value=\"Smith\" lead to the additional property detail.name=\"Smith\".\n   * @param {object} object with resolvable field names and their values.\n   * @returns {object} object with resolvable field names and their values.\n   * @protected\n   * @memberof module:template_resolver.Resolver\n   */ function addFieldsPerGroup(map) {\n        var propertyNames = Object.keys(map);\n        var i, fullPropertyName, propertyInfo, propertyValue;\n        for(i = 0; i < propertyNames.length; i += 1){\n            fullPropertyName = propertyNames[i];\n            propertyValue = map[fullPropertyName];\n            propertyInfo = getPropertyNameInfos(fullPropertyName);\n            // Supports fields that are defined by a property named \"fieldName\" (containing the name)\n            // and a property named \"value\" inside the same sub object (containing its value).\n            // Ignore custom fields that are named \"fieldName\"(propertyValue), since this would lead to an unpredictable behavior.\n            // TODO could make \"fieldName\" and \"value\" configurable\n            if (propertyInfo.name === \"fieldName\" && propertyValue !== \"fieldName\") map[propertyInfo.groupWithoutArrayIndices + propertyValue] = map[propertyInfo.group + \"value\"];\n        }\n        return map;\n    }\n    /**\n   * Infos about the full property name including the name of the group (followed by the separator) and the name of the property itself.\n   * @param {String} fullPropertyName\n   * @returns {Object} Contains \"group\" (empty or group name including trailing separator \".\"), \"groupWithoutArrayIndices\" and \"name\" (property name).\n   * @protected\n   * @memberof module:template_resolver.Resolver\n   */ function getPropertyNameInfos(fullPropertyName) {\n        var positionOfRightMostSeparator = fullPropertyName.lastIndexOf(\".\");\n        var propertyName = fullPropertyName;\n        if (positionOfRightMostSeparator > 0) propertyName = fullPropertyName.substr(positionOfRightMostSeparator + 1);\n        var propertyGroup = \"\";\n        if (positionOfRightMostSeparator > 0) propertyGroup = fullPropertyName.substr(0, positionOfRightMostSeparator + 1); //includes the trailing \".\".\n        var propertyGroupWithoutArrayIndices = propertyGroup.replace(removeArrayBracketsRegEx, \"\");\n        return {\n            group: propertyGroup,\n            groupWithoutArrayIndices: propertyGroupWithoutArrayIndices,\n            name: propertyName\n        };\n    }\n    /**\n   * Collects all flattened name-value-pairs into one object using the property names as keys and their values as values (map-like).\n   * Example: `{name: \"accountNumber\", value: \"12345\"}` becomes `mapObject[\"accountNumber\"]=\"12345\"`.\n   *\n   * @param {NameValuePair[]} elements flattened array of name-value-pairs\n   * @param {object} mapObject container to collect the results. Needs to be created before e.g. using `{}`.\n   * @param {function} filterMatchesFunction takes the property name as string argument and returns true (include) or false (exclude).\n   * @protected\n   * @memberof module:template_resolver.Resolver\n   */ function addToFilteredMapObject(elements, mapObject, filterMatchesFunction) {\n        var index, element;\n        for(index = 0; index < elements.length; index += 1){\n            element = elements[index];\n            if (typeof filterMatchesFunction === \"function\" && filterMatchesFunction(element.name)) mapObject[element.name] = element.value;\n        }\n        return mapObject;\n    }\n    return Resolver;\n}();\n\n});\nparcelRequire.register(\"7HmuL\", function(module, exports) {\n\"use strict\";\n/**\n * @fileOverview Modded (compatibility, recursion depth) version of: https://stackoverflow.com/questions/19098797/fastest-way-to-flatten-un-flatten-nested-json-objectss\n * @version ${project.version}\n * @see {@link https://stackoverflow.com/questions/19098797/fastest-way-to-flatten-un-flatten-nested-json-objectss|stackoverflow flatten nested json objects}\n */ var $59adffa3db62607f$var$module = $59adffa3db62607f$var$module || {}; // Fallback for vanilla js without modules\n/**\n * internal_object_tools. Not meant to be used outside this repository.\n * @default {}\n */ var $59adffa3db62607f$var$internal_object_tools = $59adffa3db62607f$var$module.exports = {}; // Export module for npm...\n/**\n * @typedef {Object} NameValuePair\n * @property {string} name - point separated names of the flattened main and sub properties, e.g. \"responses[2].hits.hits[4]._source.name\".\n * @property {string} value - value of the property\n */ /**\n * @param {object} data hierarchical object that may consist fo fields, subfields and arrays.\n * @param {number} maxRecursionDepth\n * @returns {NameValuePair[]} array of property name and value pairs\n */ $59adffa3db62607f$var$internal_object_tools.flattenToArray = function(data, maxRecursionDepth) {\n    var result = [];\n    if (typeof maxRecursionDepth !== \"number\" || maxRecursionDepth < 1) maxRecursionDepth = 20;\n    function recurse(cur, prop, depth) {\n        if (depth > maxRecursionDepth || typeof cur === \"function\") return;\n        if (Object(cur) !== cur) result.push({\n            name: prop,\n            value: cur\n        });\n        else if (Array.isArray(cur)) {\n            var i;\n            var l = cur.length;\n            for(i = 0; i < l; i += 1)recurse(cur[i], prop + \"[\" + i + \"]\", depth + 1);\n            if (l === 0) {\n                result[prop] = [];\n                result.push({\n                    name: prop,\n                    value: \"\"\n                });\n            }\n        } else {\n            var isEmpty = true;\n            var p;\n            for(p in cur){\n                isEmpty = false;\n                recurse(cur[p], prop ? prop + \".\" + p : p, depth + 1);\n            }\n            if (isEmpty && prop) result.push({\n                name: prop,\n                value: \"\"\n            });\n        }\n    }\n    recurse(data, \"\", 0);\n    return result;\n};\n\n});\n\n\n\"use strict\";\n//https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf#Polyfill\nif (!Array.prototype.indexOf) Array.prototype.indexOf = function(Object1, max, min) {\n    \"use strict\";\n    return function indexOf(member, fromIndex) {\n        if (this === null || this === undefined) throw TypeError(\"Array.prototype.indexOf called on null or undefined\");\n        var that = Object1(this), Len = that.length >>> 0, i = min(fromIndex | 0, Len);\n        if (i < 0) i = max(0, Len + i);\n        else if (i >= Len) return -1;\n        if (member === void 0) {\n            for(; i !== Len; ++i)if (that[i] === void 0 && i in that) return i; // undefined\n        } else if (member !== member) {\n            for(; i !== Len; ++i)if (that[i] !== that[i]) return i; // NaN\n        } else for(; i !== Len; ++i)if (that[i] === member) return i; // all else\n        return -1; // if the value was not found, then return -1\n    };\n}(Object, Math.max, Math.min);\n\n\n//http://tokenposts.blogspot.com/2012/04/javascript-objectkeys-browser.html\nif (!Object.keys) Object.keys = function(o) {\n    if (o !== Object(o)) throw new TypeError(\"Object.keys called on a non-object\");\n    var k = [], p;\n    for(p in o)if (Object.prototype.hasOwnProperty.call(o, p)) k.push(p);\n    return k;\n};\n\n\n\nvar $8ZIyB = parcelRequire(\"8ZIyB\");\nmodule.exports = {\n    template_resolver: $8ZIyB\n};\n\n\n//# sourceMappingURL=templateResolver-ie.js.map\n","/**\n * @file Provides a simple template resolver, that replaces variables in double curly brackets with the values of a given object.\n * @version {@link https://github.com/JohT/data-restructor-js/releases/latest latest version}\n * @author JohT\n * @version ${project.version}\n */\n\"use strict\";\nvar module = templateResolverInternalCreateIfNotExists(module); // Fallback for vanilla js without modules\n\nfunction templateResolverInternalCreateIfNotExists(objectToCheck) {\n  return objectToCheck || {};\n}\n\n/**\n * Provides a simple template resolver, that replaces variables in double curly brackets with the values of a given object.\n * @module template_resolver\n */\nvar template_resolver = (module.exports = {}); // Export module for npm...\ntemplate_resolver.internalCreateIfNotExists = templateResolverInternalCreateIfNotExists;\n\nvar internal_object_tools = internal_object_tools || require(\"../../lib/js/flattenToArray\"); // supports vanilla js & npm\n\ntemplate_resolver.Resolver = (function () {\n  var removeArrayBracketsRegEx = new RegExp(\"\\\\[\\\\d+\\\\]\", \"gi\");\n\n  /**\n   * Resolver. Is used inside this repository. It could also be used outside.\n   * @param {*} sourceDataObject The properties of this object will be used to replace the placeholders in the template.\n   * @constructs Resolver\n   * @alias module:template_resolver.Resolver\n   */\n  function Resolver(sourceDataObject) {\n    /**\n     * The properties of this source data object will be used to replace the placeholders in the template.\n     */\n    this.sourceDataObject = sourceDataObject;\n    /**\n     * Resolves the given template.\n     *\n     * The template may contain variables in double curly brackets.\n     * Supported variables are all properties of this object, e.g. \"{{fieldName}}\", \"{{displayName}}\", \"{{value}}\".\n     * Since this object may also contains (described) groups of sub objects, they can also be used, e.g. \"{{summaries[0].value}}\"\n     * Parts of the index can be inserted by using e.g. \"{{index[1]}}\".\n     *\n     * @param {string} template\n     * @returns {string} resolved template\n     */\n    this.resolveTemplate = function (template) {\n      return this.replaceResolvableFields(template, addFieldsPerGroup(this.resolvableFieldsOfAll(this.sourceDataObject)));\n    };\n    /**\n     * Returns a map like object, that contains all resolvable fields and their values as properties.\n     * This function takes a variable count of input parameters,\n     * each containing an object that contains resolvable fields to extract from.\n     *\n     * The recursion depth is limited to 3, so that an object,\n     * that contains an object can contain another object (but not further).\n     *\n     * Properties beginning with an underscore in their name will be filtered out, since they are considered as internal fields.\n     *\n     * @param {...object} varArgs variable count of parameters. Each parameter contains an object that fields should be resolvable for variables.\n     * @returns {object} object with resolvable field names and their values.\n     * @public\n     */\n    this.resolvableFieldsOfAll = function () {\n      var map = {};\n      var ignoreInternalFields = function (propertyName) {\n        return propertyName.indexOf(\"_\") !== 0 && propertyName.indexOf(\"._\") < 0;\n      };\n      var index;\n      for (index = 0; index < arguments.length; index += 1) {\n        addToFilteredMapObject(internal_object_tools.flattenToArray(arguments[index], 3), map, ignoreInternalFields);\n      }\n      return map;\n    };\n    /**\n     * Replaces all variables in double curly brackets, e.g. {{property}},\n     * with the value of that property from the resolvableProperties.\n     *\n     * Supported property types: string, number, boolean\n     * @param {string} stringContainingVariables\n     * @param {object[]} resolvableFields (name=value)\n     */\n    this.replaceResolvableFields = function (stringContainingVariables, resolvableFields) {\n      var replaced = stringContainingVariables;\n      var propertyNames = Object.keys(resolvableFields);\n      var propertyIndex = 0;\n      var propertyName = \"\";\n      var propertyValue = \"\";\n      for (propertyIndex = 0; propertyIndex < propertyNames.length; propertyIndex += 1) {\n        propertyName = propertyNames[propertyIndex];\n        propertyValue = resolvableFields[propertyName];\n        replaced = replaced.replace(\"{{\" + propertyName + \"}}\", propertyValue);\n      }\n      return replaced;\n    };\n  }\n\n  /**\n   * Adds the value of the \"fieldName\" property (including its group prefix) and its associated \"value\" property content.\n   * For example: detail[2].fieldName=\"name\", detail[2].value=\"Smith\" lead to the additional property detail.name=\"Smith\".\n   * @param {object} object with resolvable field names and their values.\n   * @returns {object} object with resolvable field names and their values.\n   * @protected\n   * @memberof module:template_resolver.Resolver\n   */\n  function addFieldsPerGroup(map) {\n    var propertyNames = Object.keys(map);\n    var i, fullPropertyName, propertyInfo, propertyValue;\n    for (i = 0; i < propertyNames.length; i += 1) {\n      fullPropertyName = propertyNames[i];\n      propertyValue = map[fullPropertyName];\n      propertyInfo = getPropertyNameInfos(fullPropertyName);\n      // Supports fields that are defined by a property named \"fieldName\" (containing the name)\n      // and a property named \"value\" inside the same sub object (containing its value).\n      // Ignore custom fields that are named \"fieldName\"(propertyValue), since this would lead to an unpredictable behavior.\n      // TODO could make \"fieldName\" and \"value\" configurable\n      if (propertyInfo.name === \"fieldName\" && propertyValue !== \"fieldName\") {\n        map[propertyInfo.groupWithoutArrayIndices + propertyValue] = map[propertyInfo.group + \"value\"];\n      }\n    }\n    return map;\n  }\n\n  /**\n   * Infos about the full property name including the name of the group (followed by the separator) and the name of the property itself.\n   * @param {String} fullPropertyName\n   * @returns {Object} Contains \"group\" (empty or group name including trailing separator \".\"), \"groupWithoutArrayIndices\" and \"name\" (property name).\n   * @protected\n   * @memberof module:template_resolver.Resolver\n   */\n  function getPropertyNameInfos(fullPropertyName) {\n    var positionOfRightMostSeparator = fullPropertyName.lastIndexOf(\".\");\n    var propertyName = fullPropertyName;\n    if (positionOfRightMostSeparator > 0) {\n      propertyName = fullPropertyName.substr(positionOfRightMostSeparator + 1);\n    }\n    var propertyGroup = \"\";\n    if (positionOfRightMostSeparator > 0) {\n      propertyGroup = fullPropertyName.substr(0, positionOfRightMostSeparator + 1); //includes the trailing \".\".\n    }\n    var propertyGroupWithoutArrayIndices = propertyGroup.replace(removeArrayBracketsRegEx, \"\");\n    return { group: propertyGroup, groupWithoutArrayIndices: propertyGroupWithoutArrayIndices, name: propertyName };\n  }\n\n  /**\n   * Collects all flattened name-value-pairs into one object using the property names as keys and their values as values (map-like).\n   * Example: `{name: \"accountNumber\", value: \"12345\"}` becomes `mapObject[\"accountNumber\"]=\"12345\"`.\n   *\n   * @param {NameValuePair[]} elements flattened array of name-value-pairs\n   * @param {object} mapObject container to collect the results. Needs to be created before e.g. using `{}`.\n   * @param {function} filterMatchesFunction takes the property name as string argument and returns true (include) or false (exclude).\n   * @protected\n   * @memberof module:template_resolver.Resolver\n   */\n  function addToFilteredMapObject(elements, mapObject, filterMatchesFunction) {\n    var index, element;\n    for (index = 0; index < elements.length; index += 1) {\n      element = elements[index];\n      if (typeof filterMatchesFunction === \"function\" && filterMatchesFunction(element.name)) {\n        mapObject[element.name] = element.value;\n      }\n    }\n    return mapObject;\n  }\n\n  return Resolver;\n}());\n","\"use strict\";\n/**\n * @fileOverview Modded (compatibility, recursion depth) version of: https://stackoverflow.com/questions/19098797/fastest-way-to-flatten-un-flatten-nested-json-objectss\n * @version ${project.version}\n * @see {@link https://stackoverflow.com/questions/19098797/fastest-way-to-flatten-un-flatten-nested-json-objectss|stackoverflow flatten nested json objects}\n */\nvar module = module || {}; // Fallback for vanilla js without modules\n\n/**\n * internal_object_tools. Not meant to be used outside this repository.\n * @default {}\n */\nvar internal_object_tools = module.exports={}; // Export module for npm...\n\n/**\n * @typedef {Object} NameValuePair\n * @property {string} name - point separated names of the flattened main and sub properties, e.g. \"responses[2].hits.hits[4]._source.name\".\n * @property {string} value - value of the property\n */\n\n/**\n * @param {object} data hierarchical object that may consist fo fields, subfields and arrays.\n * @param {number} maxRecursionDepth\n * @returns {NameValuePair[]} array of property name and value pairs\n */\ninternal_object_tools.flattenToArray = function (data, maxRecursionDepth) {\n  var result = [];\n  if (typeof maxRecursionDepth !== \"number\" || maxRecursionDepth < 1) {\n    maxRecursionDepth = 20;\n  }\n  function recurse(cur, prop, depth) {\n    if (depth > maxRecursionDepth || typeof cur === \"function\") {\n      return;\n    }\n    if (Object(cur) !== cur) {\n      result.push({ name: prop, value: cur });\n    } else if (Array.isArray(cur)) {\n      var i;\n      var l = cur.length;\n      for (i = 0; i < l; i += 1) {\n        recurse(cur[i], prop + \"[\" + i + \"]\", depth + 1);\n      }\n      if (l === 0) {\n        result[prop] = [];\n        result.push({ name: prop, value: \"\" });\n      }\n    } else {\n      var isEmpty = true;\n      var p;\n      for (p in cur) {\n        isEmpty = false;\n        recurse(cur[p], prop ? prop + \".\" + p : p, depth + 1);\n      }\n      if (isEmpty && prop) {\n        result.push({ name: prop, value: \"\" });\n      }\n    }\n  }\n  recurse(data, \"\", 0);\n  return result;\n};\n","\"use strict\";\nrequire(\"../../lib/js/polyfills/indexOfPolyfill.js\");\nrequire(\"../../lib/js/polyfills/objectKeysPolyfill.js\");\nvar template_resolver = require(\"../../src/js/templateResolver.js\");\nmodule.exports = {template_resolver : template_resolver};\n","//https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf#Polyfill\nif (!Array.prototype.indexOf)  Array.prototype.indexOf = (function(Object, max, min){\n    \"use strict\";\n    return function indexOf(member, fromIndex) {\n      if(this===null||this===undefined)throw TypeError(\"Array.prototype.indexOf called on null or undefined\");\n      \n      var that = Object(this), Len = that.length >>> 0, i = min(fromIndex | 0, Len);\n      if (i < 0) i = max(0, Len+i); else if (i >= Len) return -1;\n      \n      if(member===void 0){ for(; i !== Len; ++i) if(that[i]===void 0 && i in that) return i; // undefined\n      }else if(member !== member){   for(; i !== Len; ++i) if(that[i] !== that[i]) return i; // NaN\n      }else                           for(; i !== Len; ++i) if(that[i] === member) return i; // all else\n  \n      return -1; // if the value was not found, then return -1\n    };\n  })(Object, Math.max, Math.min);","//http://tokenposts.blogspot.com/2012/04/javascript-objectkeys-browser.html\nif (!Object.keys) Object.keys = function(o) {\n    if (o !== Object(o))\n      throw new TypeError('Object.keys called on a non-object');\n    var k=[],p;\n    for (p in o) if (Object.prototype.hasOwnProperty.call(o,p)) k.push(p);\n    return k;\n  }"],"names":["Object1","max","min","$parcel$global","globalThis","self","window","global","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","removeArrayBracketsRegEx","$68c6955ebe469375$var$module","$68c6955ebe469375$var$templateResolverInternalCreateIfNotExists","objectToCheck","$68c6955ebe469375$var$template_resolver","internalCreateIfNotExists","$68c6955ebe469375$var$internal_object_tools","Resolver","RegExp","sourceDataObject","resolveTemplate","template","replaceResolvableFields","addFieldsPerGroup","map","i","fullPropertyName","propertyInfo","propertyValue","propertyNames","Object","keys","length","getPropertyNameInfos","positionOfRightMostSeparator","lastIndexOf","propertyName","substr","propertyGroup","propertyGroupWithoutArrayIndices","replace","group","groupWithoutArrayIndices","name","resolvableFieldsOfAll","index","ignoreInternalFields","indexOf","arguments","addToFilteredMapObject","elements","mapObject","filterMatchesFunction","element","value","flattenToArray","stringContainingVariables","resolvableFields","replaced","propertyIndex","$59adffa3db62607f$var$module","$59adffa3db62607f$var$internal_object_tools","data","maxRecursionDepth","result","recurse","cur","prop","depth","push","Array","isArray","l","p","isEmpty","prototype","Math","member","fromIndex","undefined","TypeError","that","Len","o","k","hasOwnProperty","$8ZIyB","template_resolver"],"version":3,"file":"templateResolver-ie.js.map","sourceRoot":"../"}