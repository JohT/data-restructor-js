{"version":3,"sources":["describedfield.js","describedfield-ie.js"],"names":["module","describedFieldInternalCreateIfNotExists","objectToCheck","described_field","exports","internalCreateIfNotExists","DescribedDataFieldBuilder","withDefaultString","value","defaultValue","isSpecifiedString","withDefaultArray","describedField","category","type","abbreviation","image","index","groupNames","displayName","fieldName","fromDescribedDataField","template","build","copyWithoutGroups","describedDataField","DescribedDataFieldGroup","dataField","addGroupEntry","groupName","addGroupEntries","describedFields","length","undefined","push","require"],"mappings":";AAMA,aACA,IAAIA,EAASC,EAAwCD,GAErD,SAASC,EAAwCC,GACxCA,OAAAA,GAAiB,GAO1B,IAAIC,EAAmBH,EAAOI,QAAU,GACxCD,EAAgBE,0BAA4BJ,EAmB5CE,EAAgBG,0BAA6B,WAmLlCC,SAAAA,EAAkBC,EAAOC,GACzBC,OALAA,SAAkBF,GAClB,MAAiB,iBAAVA,GAAgC,OAAVA,GAA4B,KAAVA,EAI/CE,CAAkBF,GAASA,EAAQC,EAGnCE,SAAAA,EAAiBH,EAAOC,GACxBD,OAAAA,MAAAA,EAAwCC,EAAeD,EAGzDF,OApLEA,WAIFM,KAAAA,eAAiB,CACpBC,SAAU,GACVC,KAAM,GACNC,aAAc,GACdC,MAAO,GACPC,MAAO,GACPC,WAAY,GACZC,YAAa,GACbC,UAAW,GACXZ,MAAO,IASJa,KAAAA,uBAAyB,SAAUC,GAU/B,OATFT,KAAAA,SAASS,EAAST,UAClBC,KAAAA,KAAKQ,EAASR,MACdC,KAAAA,aAAaO,EAASP,cACtBC,KAAAA,MAAMM,EAASN,OACfC,KAAAA,MAAMK,EAASL,OACfC,KAAAA,WAAWI,EAASJ,YACpBC,KAAAA,YAAYG,EAASH,aACrBC,KAAAA,UAAUE,EAASF,WACnBZ,KAAAA,MAAMc,EAASd,OACb,MAcJK,KAAAA,SAAW,SAAUL,GAEjB,OADFI,KAAAA,eAAeC,SAAWN,EAAkBC,EAAO,IACjD,MAeJM,KAAAA,KAAO,SAAUN,GAEb,OADFI,KAAAA,eAAeE,KAAOP,EAAkBC,EAAO,IAC7C,MAcJO,KAAAA,aAAe,SAAUP,GAErB,OADFI,KAAAA,eAAeG,aAAeR,EAAkBC,EAAO,IACrD,MAUJQ,KAAAA,MAAQ,SAAUR,GAEd,OADFI,KAAAA,eAAeI,MAAQT,EAAkBC,EAAO,IAC9C,MAWJS,KAAAA,MAAQ,SAAUT,GAEd,OADFI,KAAAA,eAAeK,MAAQN,EAAiBH,EAAO,IAC7C,MAWJU,KAAAA,WAAa,SAAUV,GAEnB,OADFI,KAAAA,eAAeM,WAAaP,EAAiBH,EAAO,IAClD,MAUJW,KAAAA,YAAc,SAAUX,GAEpB,OADFI,KAAAA,eAAeO,YAAcZ,EAAkBC,EAAO,IACpD,MAUJY,KAAAA,UAAY,SAAUZ,GAElB,OADFI,KAAAA,eAAeQ,UAAYb,EAAkBC,EAAO,IAClD,MAUJA,KAAAA,MAAQ,SAAUA,GAEd,OADFI,KAAAA,eAAeJ,MAAQA,EACrB,MAQJe,KAAAA,MAAQ,WACJ,OAAA,KAAKX,iBA3K2B,GAoM7CT,EAAgBqB,kBAAoB,SAAUC,GACrC,OAAA,IAAItB,EAAgBG,2BAA4Be,uBAAuBI,GAAoBP,WAAW,IAAIK,SAGnHpB,EAAgBuB,wBAA2B,WAqDlCA,OA3CEA,SAAwBC,GAC1BA,KAAAA,UAAYA,EASZC,KAAAA,cAAgB,SAAUC,EAAWjB,GAEjC,OADFkB,KAAAA,gBAAgBD,EAAW,CAACjB,IAC1B,MAUJkB,KAAAA,gBAAkB,SAAUD,EAAWE,GACtC,IAACF,GAAkC,IAArBA,EAAUG,OACnB,OAAA,KAEL,IAACD,GAA8C,IAA3BA,EAAgBC,OAC/B,OAAA,KAMLf,IAAAA,EACAL,EACCK,SAN6BgB,IAA9B,KAAKN,UAAUE,KACZF,KAAAA,UAAUT,WAAWgB,KAAKL,GAC1BF,KAAAA,UAAUE,GAAa,IAIzBZ,EAAQ,EAAGA,EAAQc,EAAgBC,OAAQf,GAAS,EACvDL,EAAiBmB,EAAgBd,GAC5BU,KAAAA,UAAUE,GAAWK,KAAKtB,GAE1B,OAAA,OAjD8B;;AC7O3C,aACA,IAAIT,EAAkBgC,QAAQ,kCAC9BnC,OAAOI,QAAS,CAACD,gBAAAA","file":"describedfield-ie.js","sourceRoot":"../src/js","sourcesContent":["/**\n * @file Describes a data field of the restructured data.\n * @version {@link https://github.com/JohT/data-restructor-js/releases/latest latest version}\n * @author JohT\n * @version ${project.version}\n */\n\"use strict\";\nvar module = describedFieldInternalCreateIfNotExists(module); // Fallback for vanilla js without modules\n\nfunction describedFieldInternalCreateIfNotExists(objectToCheck) {\n  return objectToCheck || {};\n}\n\n/**\n * Describes a data field of the restructured data.\n * @module described_field\n */\nvar described_field = (module.exports = {}); // Export module for npm...\ndescribed_field.internalCreateIfNotExists = describedFieldInternalCreateIfNotExists;\n\n/**\n * Describes a field of the restructured data.\n * Dynamically added properties represent custom named groups containing DescribedDataField-Arrays.\n *\n * @typedef {Object} module:described_field.DescribedDataField\n * @property {string} [category=\"\"] - name of the category. Could contain a short domain name like \"product\" or \"vendor\".\n * @property {string} [type=\"\"] - type of the data element. Examples: \"summary\" for e.g. a list overview. \"detail\" e.g. when a summary is selected. \"filter\" e.g. for field/value pair results that can be selected as data filters.\n * @property {string} [abbreviation=\"\"] - one optional character, a symbol character or a short abbreviation of the category\n * @property {string} [image=\"\"] - one optional path to an image resource\n * @property {string} index - array of numbers containing the splitted index. Example: \"responses[2].hits.hits[4]._source.name\" will have an index of [2,4]\n * @property {string[]} groupNames - array of names of all dynamically added properties representing groups\n * @property {string} displayName - display name of the field\n * @property {string} fieldName - field name\n * @property {{*}} value - content of the field\n * @property {module:described_field.DescribedDataField[]} [couldBeAnyCustomGroupName] any number of groups attached to the field each containing multiple fields\n */\n\ndescribed_field.DescribedDataFieldBuilder = (function () {\n  /**\n   * Builds a {@link module:described_field.DescribedDataField}.\n   * DescribedDataField is the main element of the restructured data and therefore considered \"public\".\n   * @constructs DescribedDataFieldBuilder\n   * @alias module:described_field.DescribedDataFieldBuilder\n   */\n  function DescribedDataFieldBuilder() {\n    /**\n     * @type {module:described_field.DescribedDataField}\n     */\n    this.describedField = {\n      category: \"\",\n      type: \"\",\n      abbreviation: \"\",\n      image: \"\",\n      index: [],\n      groupNames: [],\n      displayName: \"\",\n      fieldName: \"\",\n      value: \"\"\n    };\n    /**\n     * Takes over all values of the template {@link module:described_field.DescribedDataField}.\n     * @function\n     * @param {module:described_field.DescribedDataField} template\n     * @returns {DescribedDataFieldBuilder}\n     * @example fromDescribedDataField(sourceField)\n     */\n    this.fromDescribedDataField = function (template) {\n      this.category(template.category);\n      this.type(template.type);\n      this.abbreviation(template.abbreviation);\n      this.image(template.image);\n      this.index(template.index);\n      this.groupNames(template.groupNames);\n      this.displayName(template.displayName);\n      this.fieldName(template.fieldName);\n      this.value(template.value);\n      return this;\n    };\n    /**\n     * Sets the category.\n     *\n     * Contains a short domain nam, for example:\n     * - \"product\" for products\n     * - \"vendor\" for vendors\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example category(\"Product\")\n     */\n    this.category = function (value) {\n      this.describedField.category = withDefaultString(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the type.\n     *\n     * Contains the type of the entry, for example:\n     * - \"summary\" for e.g. a list overview.\n     * - \"detail\" e.g. when a summary is selected.\n     * - \"filter\" e.g. for field/value pair results that can be selected as search parameters.\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example type(\"summary\")\n     */\n    this.type = function (value) {\n      this.describedField.type = withDefaultString(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the optional abbreviation.\n     *\n     * Contains a symbol character or a very short abbreviation of the category.\n     * - \"P\" for products\n     * - \"V\" for vendors\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example abbreviation(\"P\")\n     */\n    this.abbreviation = function (value) {\n      this.describedField.abbreviation = withDefaultString(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the optional path to an image resource.\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example image(\"img/product.png\")\n     */\n    this.image = function (value) {\n      this.describedField.image = withDefaultString(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the index as an array of numbers containing the splitted array indexes of the source field.\n     * Example: \"responses[2].hits.hits[4]._source.name\" will have an index of [2,4].\n     *\n     * @function\n     * @param {number[]} [value=[]]\n     * @returns {DescribedDataFieldBuilder}\n     * @example index([2,4])\n     */\n    this.index = function (value) {\n      this.describedField.index = withDefaultArray(value, []);\n      return this;\n    };\n    /**\n     * Sets the group names as an array of strings containing the names of the dynamically added properties,\n     * that contain an array of {@link module:described_field.DescribedDataField}-Objects.\n     *\n     * @function\n     * @param {string[]} [value=[]]\n     * @returns {DescribedDataFieldBuilder}\n     * @example groupNames([\"summaries\",\"details\",\"options\"])\n     */\n    this.groupNames = function (value) {\n      this.describedField.groupNames = withDefaultArray(value, []);\n      return this;\n    };\n    /**\n     * Sets the display name.\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example displayName(\"Color\")\n     */\n    this.displayName = function (value) {\n      this.describedField.displayName = withDefaultString(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the (technical) field name.\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example fieldName(\"color\")\n     */\n    this.fieldName = function (value) {\n      this.describedField.fieldName = withDefaultString(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the value/content of the field.\n     *\n     * @function\n     * @param {*} value\n     * @returns {DescribedDataFieldBuilder}\n     * @example value(\"darkblue\")\n     */\n    this.value = function (value) {\n      this.describedField.value = value;\n      return this;\n    };\n\n    /**\n     * Finalizes the settings and builds the {@link module:described_field.DescribedDataField}.\n     * @function\n     * @returns {module:described_field.DescribedDataField}\n     */\n    this.build = function () {\n      return this.describedField;\n    };\n  }\n\n  function isSpecifiedString(value) {\n    return typeof value === \"string\" && value !== null && value !== \"\";\n  }\n\n  function withDefaultString(value, defaultValue) {\n    return isSpecifiedString(value) ? value : defaultValue;\n  }\n\n  function withDefaultArray(value, defaultValue) {\n    return value === undefined || value === null ? defaultValue : value;\n  }\n\n  return DescribedDataFieldBuilder;\n}());\n\n/**\n * Creates a new described data field with all properties of the original one except for dynamically added groups.\n * @param {module:described_field.DescribedDataField} describedDataField\n * @returns {module:described_field.DescribedDataField}\n * @memberof module:described_field\n */\ndescribed_field.copyWithoutGroups = function (describedDataField) {\n  return new described_field.DescribedDataFieldBuilder().fromDescribedDataField(describedDataField).groupNames([]).build();\n};\n\ndescribed_field.DescribedDataFieldGroup = (function () {\n  /**\n   * Adds groups to {@link module:described_field.DescribedDataField}s. These groups are dynamically added properties\n   * that contain an array of sub fields of the same type {@link module:described_field.DescribedDataField}s.\n   *\n   * @param {module:described_field.DescribedDataField} dataField\n   * @constructs DescribedDataFieldGroup\n   * @alias module:described_field.DescribedDataFieldGroup\n   * @example new described_field.DescribedDataFieldGroup(field).addGroupEntry(\"details\", detailField);\n   */\n  function DescribedDataFieldGroup(dataField) {\n    this.dataField = dataField;\n\n    /**\n     * Adds an entry to the given group. If the group does not exist, it will be created.\n     * @function\n     * @param {String} groupName name of the group to which the entry will be added\n     * @param {module:described_field.DescribedDataField} describedField sub field that is added to the group\n     * @returns {DescribedDataFieldGroup}\n     */\n    this.addGroupEntry = function (groupName, describedField) {\n      this.addGroupEntries(groupName, [describedField]);\n      return this;\n    };\n\n    /**\n     * Adds entries to the given group. If the group does not exist, it will be created.\n     * @function\n     * @param {String} groupName name of the group to which the entries will be added\n     * @param {module:described_field.DescribedDataField[]} describedFields sub fields that are added to the group\n     * @returns {DescribedDataFieldGroup}\n     */\n    this.addGroupEntries = function (groupName, describedFields) {\n      if (!groupName || groupName.length === 0) {\n        return this;\n      }\n      if (!describedFields || describedFields.length === 0) {\n        return this;\n      }\n      if (this.dataField[groupName] === undefined) {\n        this.dataField.groupNames.push(groupName);\n        this.dataField[groupName] = [];\n      }\n      var index;\n      var describedField;\n      for (index = 0; index < describedFields.length; index += 1) {\n        describedField = describedFields[index];\n        this.dataField[groupName].push(describedField);\n      }\n      return this;\n    };\n  }\n\n  return DescribedDataFieldGroup;\n}());\n","\"use strict\";\nvar described_field = require(\"../../src/js/describedfield.js\");\nmodule.exports= {described_field};\n"]}