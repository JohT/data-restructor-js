{"version":3,"sources":["describedfield.js","describedfield-ie.js"],"names":["module","describedFieldInternalCreateIfNotExists","objectToCheck","described_field","exports","internalCreateIfNotExists","DescribedDataFieldBuilder","withDefaultString","value","defaultValue","isSpecifiedString","describedField","category","type","abbreviation","image","index","displayName","fieldName","fromDescribedDataField","template","withDefaultArray","build","require"],"mappings":";AAMA,aACA,IAAIA,EAASC,EAAwCD,GAErD,SAASC,EAAwCC,GACxCA,OAAAA,GAAiB,GAO1B,IAAIC,EAAmBH,EAAOI,QAAU,GACxCD,EAAgBE,0BAA4BJ,EAuB5CE,EAAgBG,0BAA6B,WAkKlCC,SAAAA,EAAkBC,EAAOC,GACzBC,OALAA,SAAkBF,GAClB,MAAiB,iBAAVA,GAAgC,OAAVA,GAA4B,KAAVA,EAI/CE,CAAkBF,GAASA,EAAQC,EAOrCH,OArKEA,WAIFK,KAAAA,eAAiB,CACpBC,SAAU,GACVC,KAAM,GACNC,aAAc,GACdC,MAAO,GACPC,MAAO,GACPC,YAAa,GACbC,UAAW,GACXV,MAAO,IASJW,KAAAA,uBAAyB,SAASC,GAS9B,OARFR,KAAAA,SAASQ,EAASR,UAClBC,KAAAA,KAAKO,EAASP,MACdC,KAAAA,aAAaM,EAASN,cACtBC,KAAAA,MAAMK,EAASL,OACfC,KAAAA,MAAMI,EAASJ,OACfC,KAAAA,YAAYG,EAASH,aACrBC,KAAAA,UAAUE,EAASF,WACnBV,KAAAA,MAAMY,EAASZ,OACb,MAcJI,KAAAA,SAAW,SAAUJ,GAEjB,OADFG,KAAAA,eAAeC,SAAWL,EAAkBC,EAAO,IACjD,MAeJK,KAAAA,KAAO,SAAUL,GAEb,OADFG,KAAAA,eAAeE,KAAON,EAAkBC,EAAO,IAC7C,MAcJM,KAAAA,aAAe,SAAUN,GAErB,OADFG,KAAAA,eAAeG,aAAeP,EAAkBC,EAAO,IACrD,MAUJO,KAAAA,MAAQ,SAAUP,GAEd,OADFG,KAAAA,eAAeI,MAAQR,EAAkBC,EAAO,IAC9C,MAWJQ,KAAAA,MAAQ,SAAUR,GAEd,OADFG,KAAAA,eAAeK,MA0DfK,SAAiBb,EAAOC,GACxBD,OAAU,OAAVA,EAAgBA,EAAQC,EA3DDY,CAAiBb,EAAO,IAC7C,MAUJS,KAAAA,YAAc,SAAUT,GAEpB,OADFG,KAAAA,eAAeM,YAAcV,EAAkBC,EAAO,IACpD,MAUJU,KAAAA,UAAY,SAAUV,GAElB,OADFG,KAAAA,eAAeO,UAAYX,EAAkBC,EAAO,IAClD,MAUJA,KAAAA,MAAQ,SAAUA,GAEd,OADFG,KAAAA,eAAeH,MAAQD,EAAkBC,EAAO,IAC9C,MAQJc,KAAAA,MAAQ,WACJ,OAAA,KAAKX,iBA1J2B;;ACzC7C,aACA,IAAIR,EAAkBoB,QAAQ,kCAC9BvB,OAAOI,QAAS,CAACD,gBAAAA","file":"describedfield-ie.js","sourceRoot":"../src/js","sourcesContent":["/**\n * @file Describes a data field of the restructured data.\n * @version {@link https://github.com/JohT/data-restructor-js/releases/latest latest version}\n * @author JohT\n * @version ${project.version}\n */\n\"use strict\";\nvar module = describedFieldInternalCreateIfNotExists(module); // Fallback for vanilla js without modules\n\nfunction describedFieldInternalCreateIfNotExists(objectToCheck) {\n  return objectToCheck || {};\n}\n\n/**\n * Describes a data field of the restructured data.\n * @module described_field\n */\nvar described_field = (module.exports = {}); // Export module for npm...\ndescribed_field.internalCreateIfNotExists = describedFieldInternalCreateIfNotExists;\n\n/**\n * Describes a field of the restructured data.\n * Dynamically added properties represent custom named groups containing DescribedDataField-Arrays.\n *\n * @global\n * @typedef {Object} DescribedDataField\n * @property {string} [category=\"\"] - name of the category. Could contain a short domain name like \"product\" or \"vendor\".\n * @property {string} [type=\"\"] - type of the data element. Examples: \"summary\" for e.g. a list overview. \"detail\" e.g. when a summary is selected. \"filter\" e.g. for field/value pair results that can be selected as data filters.\n * @property {string} [abbreviation=\"\"] - one optional character, a symbol character or a short abbreviation of the category\n * @property {string} [image=\"\"] - one optional path to an image resource\n * @property {string} index - array of numbers containing the splitted index. Example: \"responses[2].hits.hits[4]._source.name\" will have an index of [2,4]\n * @property {string} displayName - display name of the field\n * @property {string} fieldName - field name\n * @property {string} value - content of the field\n * @property {DescribedDataField[]} [couldBeAnyCustomGroupName] any number of groups attached to the field each containing multiple fields\n */\n\n/**\n * DescribedDataFieldBuilder. \n * It is used to build a DescribedDataField that is the main element of the restructured data and therefore considered \"public\".\n */\ndescribed_field.DescribedDataFieldBuilder = (function () {\n  /**\n   * Constructor function and container for everything, that needs to exist per instance.\n   * @constructs DataFieldBuilder\n   */\n  function DescribedDataFieldBuilder() {\n    /**\n     * @type {DescribedDataField}\n     */\n    this.describedField = {\n      category: \"\",\n      type: \"\",\n      abbreviation: \"\",\n      image: \"\",\n      index: [],\n      displayName: \"\",\n      fieldName: \"\",\n      value: \"\"\n    };\n    /**\n     * Takes over all values of the given DescribedDataField.\n     * @function\n     * @param {DescribedDataField} template \n     * @returns {DescribedDataFieldBuilder}\n     * @example fromDescribedDataField(sourceField)\n     */\n    this.fromDescribedDataField = function(template) {\n      this.category(template.category);\n      this.type(template.type);\n      this.abbreviation(template.abbreviation);\n      this.image(template.image);\n      this.index(template.index);\n      this.displayName(template.displayName);\n      this.fieldName(template.fieldName);\n      this.value(template.value);\n      return this;\n    };\n    /**\n     * Sets the category.\n     *\n     * Contains a short domain nam, for example:\n     * - \"product\" for products\n     * - \"vendor\" for vendors\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example category(\"Product\")\n     */\n    this.category = function (value) {\n      this.describedField.category = withDefaultString(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the type.\n     *\n     * Contains the type of the entry, for example:\n     * - \"summary\" for e.g. a list overview.\n     * - \"detail\" e.g. when a summary is selected.\n     * - \"filter\" e.g. for field/value pair results that can be selected as search parameters.\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example type(\"summary\")\n     */\n    this.type = function (value) {\n      this.describedField.type = withDefaultString(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the optional abbreviation.\n     *\n     * Contains a symbol character or a very short abbreviation of the category.\n     * - \"P\" for products\n     * - \"V\" for vendors\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example abbreviation(\"P\")\n     */\n    this.abbreviation = function (value) {\n      this.describedField.abbreviation = withDefaultString(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the optional path to an image resource.\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example image(\"img/product.png\")\n     */\n    this.image = function (value) {\n      this.describedField.image = withDefaultString(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the index as an array of numbers containing the splitted array indexes of the source field.\n     * Example: \"responses[2].hits.hits[4]._source.name\" will have an index of [2,4].\n     *\n     * @function\n     * @param {number[]} [value=[]]\n     * @returns {DescribedDataFieldBuilder}\n     * @example index([2,4])\n     */\n    this.index = function (value) {\n      this.describedField.index = withDefaultArray(value, []);\n      return this;\n    };\n    /**\n     * Sets the display name.\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example displayName(\"Color\")\n     */\n    this.displayName = function (value) {\n      this.describedField.displayName = withDefaultString(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the (technical) field name.\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example fieldName(\"color\")\n     */\n    this.fieldName = function (value) {\n      this.describedField.fieldName = withDefaultString(value, \"\");\n      return this;\n    };\n   /**\n     * Sets the value/content of the field.\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example value(\"darkblue\")\n     */\n    this.value = function (value) {\n      this.describedField.value = withDefaultString(value, \"\");\n      return this;\n    };\n \n    /**\n     * Finalizes the settings and builds the DescribedDataField.\n     * @function\n     * @returns {DescribedDataField}\n     */\n    this.build = function () {\n      return this.describedField;\n    };\n  }\n\n  function isSpecifiedString(value) {\n    return typeof value === \"string\" && value !== null && value !== \"\";\n  }\n\n  function withDefaultString(value, defaultValue) {\n    return isSpecifiedString(value) ? value : defaultValue;\n  }\n\n  function withDefaultArray(value, defaultValue) {\n    return value !== null? value : defaultValue;\n  }\n\n  return DescribedDataFieldBuilder;\n}());\n","\"use strict\";\nvar described_field = require(\"../../src/js/describedfield.js\");\nmodule.exports= {described_field};\n"]}