{"mappings":"sgBAKG,aAEH,IAAIA,EAASC,EAAwCD,YAE5CC,EAAwCC,UACxCA,GAAa,GAOtB,IAAIC,EAAmBH,EAAOI,QAAO,GACrCD,EAAgBE,0BAA4BJ,EAmB5CE,EAAgBG,0BAAyB,oBAmL9BC,EAAkBC,EAAOC,mBAJPD,SACN,iBAALA,GAAgC,OAAVA,GAAuB,KAALA,EAI/CE,CAAkBF,GAASA,EAAQC,WAGnCE,EAAiBH,EAAOC,UACxBD,MAAAA,EAAwCC,EAAeD,SAlL7D,WAIEI,KACEC,eAAc,CACjBC,SAAQ,GACRC,KAAI,GACJC,aAAY,GACZC,MAAK,GACLC,MAAK,GACLC,WAAU,GACVC,YAAW,GACXC,UAAS,GACTb,MAAK,IAQJI,KACEU,uBAAsB,SAAaC,eACjCT,SAASS,EAAST,eAClBC,KAAKQ,EAASR,WACdC,aAAaO,EAASP,mBACtBC,MAAMM,EAASN,YACfC,MAAMK,EAASL,YACfC,WAAWI,EAASJ,iBACpBC,YAAYG,EAASH,kBACrBC,UAAUE,EAASF,gBACnBb,MAAMe,EAASf,aAcnBI,KACEE,SAAQ,SAAaN,eACnBK,eAAeC,SAAWP,EAAkBC,EAAK,UAerDI,KACEG,KAAI,SAAaP,eACfK,eAAeE,KAAOR,EAAkBC,EAAK,UAcjDI,KACEI,aAAY,SAAaR,eACvBK,eAAeG,aAAeT,EAAkBC,EAAK,UAUzDI,KACEK,MAAK,SAAaT,eAChBK,eAAeI,MAAQV,EAAkBC,EAAK,UAWlDI,KACEM,MAAK,SAAaV,eAChBK,eAAeK,MAAQP,EAAiBH,EAAK,UAWjDI,KACEO,WAAU,SAAaX,eACrBK,eAAeM,WAAaR,EAAiBH,EAAK,UAUtDI,KACEQ,YAAW,SAAaZ,eACtBK,eAAeO,YAAcb,EAAkBC,EAAK,UAUxDI,KACES,UAAS,SAAab,eACpBK,eAAeQ,UAAYd,EAAkBC,EAAK,UAUtDI,KACEJ,MAAK,SAAaA,eAChBK,eAAeL,MAAQA,QAQ3BI,KACEY,MAAK,uBACIX,iBA3KuB,GAoMzCV,EAAgBsB,kBAAiB,SAAaC,UACrC,IAAIvB,EAAgBG,2BAA4BgB,uBAAuBI,GAAoBP,WAAU,IAAKK,SAGnHrB,EAAgBwB,wBASX,SAC8BC,QAC1BA,UAAYA,EAQdhB,KACEiB,cAAa,SAAaC,EAAWjB,eACnCkB,gBAAgBD,EAAS,CAAGjB,UAUhCD,KACEmB,gBAAe,SAAaD,EAAWE,GAC1C,IAAKF,GAAkC,IAArBA,EAAUG,OAAY,OAAArB,KAGxC,IAAKoB,GAA8C,IAA3BA,EAAgBC,OAAY,OAAArB,KAOpD,IAAIM,EACAL,WAL8BqB,IAAhCtB,KAAOgB,UAAUE,UACZF,UAAUT,WAAWgB,KAAKL,QAC1BF,UAAUE,GAAS,IAIrBZ,EAAQ,EAAGA,EAAQc,EAAgBC,OAAQf,GAAS,EACvDL,EAAiBmB,EAAgBd,QAC5BU,UAAUE,GAAWK,KAAKtB","sources":["src/js/describedfield.js"],"sourcesContent":["/**\n * @file Describes a data field of the restructured data.\n * @version {@link https://github.com/JohT/data-restructor-js/releases/latest latest version}\n * @author JohT\n * @version ${project.version}\n */\n\"use strict\";\nvar module = describedFieldInternalCreateIfNotExists(module); // Fallback for vanilla js without modules\n\nfunction describedFieldInternalCreateIfNotExists(objectToCheck) {\n  return objectToCheck || {};\n}\n\n/**\n * Describes a data field of the restructured data.\n * @module described_field\n */\nvar described_field = (module.exports = {}); // Export module for npm...\ndescribed_field.internalCreateIfNotExists = describedFieldInternalCreateIfNotExists;\n\n/**\n * Describes a field of the restructured data.\n * Dynamically added properties represent custom named groups containing DescribedDataField-Arrays.\n *\n * @typedef {Object} module:described_field.DescribedDataField\n * @property {string} [category=\"\"] - name of the category. Could contain a short domain name like \"product\" or \"vendor\".\n * @property {string} [type=\"\"] - type of the data element. Examples: \"summary\" for e.g. a list overview. \"detail\" e.g. when a summary is selected. \"filter\" e.g. for field/value pair results that can be selected as data filters.\n * @property {string} [abbreviation=\"\"] - one optional character, a symbol character or a short abbreviation of the category\n * @property {string} [image=\"\"] - one optional path to an image resource\n * @property {string} index - array of numbers containing the splitted index. Example: \"responses[2].hits.hits[4]._source.name\" will have an index of [2,4]\n * @property {string[]} groupNames - array of names of all dynamically added properties representing groups\n * @property {string} displayName - display name of the field\n * @property {string} fieldName - field name\n * @property {{*}} value - content of the field\n * @property {module:described_field.DescribedDataField[]} [couldBeAnyCustomGroupName] any number of groups attached to the field each containing multiple fields\n */\n\ndescribed_field.DescribedDataFieldBuilder = (function () {\n  /**\n   * Builds a {@link module:described_field.DescribedDataField}.\n   * DescribedDataField is the main element of the restructured data and therefore considered \"public\".\n   * @constructs DescribedDataFieldBuilder\n   * @alias module:described_field.DescribedDataFieldBuilder\n   */\n  function DescribedDataFieldBuilder() {\n    /**\n     * @type {module:described_field.DescribedDataField}\n     */\n    this.describedField = {\n      category: \"\",\n      type: \"\",\n      abbreviation: \"\",\n      image: \"\",\n      index: [],\n      groupNames: [],\n      displayName: \"\",\n      fieldName: \"\",\n      value: \"\"\n    };\n    /**\n     * Takes over all values of the template {@link module:described_field.DescribedDataField}.\n     * @function\n     * @param {module:described_field.DescribedDataField} template\n     * @returns {DescribedDataFieldBuilder}\n     * @example fromDescribedDataField(sourceField)\n     */\n    this.fromDescribedDataField = function (template) {\n      this.category(template.category);\n      this.type(template.type);\n      this.abbreviation(template.abbreviation);\n      this.image(template.image);\n      this.index(template.index);\n      this.groupNames(template.groupNames);\n      this.displayName(template.displayName);\n      this.fieldName(template.fieldName);\n      this.value(template.value);\n      return this;\n    };\n    /**\n     * Sets the category.\n     *\n     * Contains a short domain nam, for example:\n     * - \"product\" for products\n     * - \"vendor\" for vendors\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example category(\"Product\")\n     */\n    this.category = function (value) {\n      this.describedField.category = withDefaultString(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the type.\n     *\n     * Contains the type of the entry, for example:\n     * - \"summary\" for e.g. a list overview.\n     * - \"detail\" e.g. when a summary is selected.\n     * - \"filter\" e.g. for field/value pair results that can be selected as search parameters.\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example type(\"summary\")\n     */\n    this.type = function (value) {\n      this.describedField.type = withDefaultString(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the optional abbreviation.\n     *\n     * Contains a symbol character or a very short abbreviation of the category.\n     * - \"P\" for products\n     * - \"V\" for vendors\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example abbreviation(\"P\")\n     */\n    this.abbreviation = function (value) {\n      this.describedField.abbreviation = withDefaultString(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the optional path to an image resource.\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example image(\"img/product.png\")\n     */\n    this.image = function (value) {\n      this.describedField.image = withDefaultString(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the index as an array of numbers containing the splitted array indexes of the source field.\n     * Example: \"responses[2].hits.hits[4]._source.name\" will have an index of [2,4].\n     *\n     * @function\n     * @param {number[]} [value=[]]\n     * @returns {DescribedDataFieldBuilder}\n     * @example index([2,4])\n     */\n    this.index = function (value) {\n      this.describedField.index = withDefaultArray(value, []);\n      return this;\n    };\n    /**\n     * Sets the group names as an array of strings containing the names of the dynamically added properties,\n     * that contain an array of {@link module:described_field.DescribedDataField}-Objects.\n     *\n     * @function\n     * @param {string[]} [value=[]]\n     * @returns {DescribedDataFieldBuilder}\n     * @example groupNames([\"summaries\",\"details\",\"options\"])\n     */\n    this.groupNames = function (value) {\n      this.describedField.groupNames = withDefaultArray(value, []);\n      return this;\n    };\n    /**\n     * Sets the display name.\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example displayName(\"Color\")\n     */\n    this.displayName = function (value) {\n      this.describedField.displayName = withDefaultString(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the (technical) field name.\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example fieldName(\"color\")\n     */\n    this.fieldName = function (value) {\n      this.describedField.fieldName = withDefaultString(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the value/content of the field.\n     *\n     * @function\n     * @param {*} value\n     * @returns {DescribedDataFieldBuilder}\n     * @example value(\"darkblue\")\n     */\n    this.value = function (value) {\n      this.describedField.value = value;\n      return this;\n    };\n\n    /**\n     * Finalizes the settings and builds the {@link module:described_field.DescribedDataField}.\n     * @function\n     * @returns {module:described_field.DescribedDataField}\n     */\n    this.build = function () {\n      return this.describedField;\n    };\n  }\n\n  function isSpecifiedString(value) {\n    return typeof value === \"string\" && value !== null && value !== \"\";\n  }\n\n  function withDefaultString(value, defaultValue) {\n    return isSpecifiedString(value) ? value : defaultValue;\n  }\n\n  function withDefaultArray(value, defaultValue) {\n    return value === undefined || value === null ? defaultValue : value;\n  }\n\n  return DescribedDataFieldBuilder;\n}());\n\n/**\n * Creates a new described data field with all properties of the original one except for dynamically added groups.\n * @param {module:described_field.DescribedDataField} describedDataField\n * @returns {module:described_field.DescribedDataField}\n * @memberof module:described_field\n */\ndescribed_field.copyWithoutGroups = function (describedDataField) {\n  return new described_field.DescribedDataFieldBuilder().fromDescribedDataField(describedDataField).groupNames([]).build();\n};\n\ndescribed_field.DescribedDataFieldGroup = (function () {\n  /**\n   * Adds groups to {@link module:described_field.DescribedDataField}s. These groups are dynamically added properties\n   * that contain an array of sub fields of the same type {@link module:described_field.DescribedDataField}s.\n   *\n   * @param {module:described_field.DescribedDataField} dataField\n   * @constructs DescribedDataFieldGroup\n   * @alias module:described_field.DescribedDataFieldGroup\n   * @example new described_field.DescribedDataFieldGroup(field).addGroupEntry(\"details\", detailField);\n   */\n  function DescribedDataFieldGroup(dataField) {\n    this.dataField = dataField;\n\n    /**\n     * Adds an entry to the given group. If the group does not exist, it will be created.\n     * @function\n     * @param {String} groupName name of the group to which the entry will be added\n     * @param {module:described_field.DescribedDataField} describedField sub field that is added to the group\n     * @returns {DescribedDataFieldGroup}\n     */\n    this.addGroupEntry = function (groupName, describedField) {\n      this.addGroupEntries(groupName, [describedField]);\n      return this;\n    };\n\n    /**\n     * Adds entries to the given group. If the group does not exist, it will be created.\n     * @function\n     * @param {String} groupName name of the group to which the entries will be added\n     * @param {module:described_field.DescribedDataField[]} describedFields sub fields that are added to the group\n     * @returns {DescribedDataFieldGroup}\n     */\n    this.addGroupEntries = function (groupName, describedFields) {\n      if (!groupName || groupName.length === 0) {\n        return this;\n      }\n      if (!describedFields || describedFields.length === 0) {\n        return this;\n      }\n      if (this.dataField[groupName] === undefined) {\n        this.dataField.groupNames.push(groupName);\n        this.dataField[groupName] = [];\n      }\n      var index;\n      var describedField;\n      for (index = 0; index < describedFields.length; index += 1) {\n        describedField = describedFields[index];\n        this.dataField[groupName].push(describedField);\n      }\n      return this;\n    };\n  }\n\n  return DescribedDataFieldGroup;\n}());\n"],"names":["$0887f3d77fbb598c$var$module","$0887f3d77fbb598c$var$describedFieldInternalCreateIfNotExists","objectToCheck","$0887f3d77fbb598c$var$described_field","exports","internalCreateIfNotExists","DescribedDataFieldBuilder","withDefaultString","value","defaultValue","isSpecifiedString","withDefaultArray","this","describedField","category","type","abbreviation","image","index","groupNames","displayName","fieldName","fromDescribedDataField","template","build","copyWithoutGroups","describedDataField","DescribedDataFieldGroup","dataField","addGroupEntry","groupName","addGroupEntries","describedFields","length","undefined","push"],"version":3,"file":"describedfield.js.map","sourceRoot":"../"}