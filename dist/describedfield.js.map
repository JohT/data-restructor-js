{"mappings":"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","sources":["<anon>","src/js/describedfield.js"],"sourcesContent":["var $parcel$global =\ntypeof globalThis !== 'undefined'\n  ? globalThis\n  : typeof self !== 'undefined'\n  ? self\n  : typeof window !== 'undefined'\n  ? window\n  : typeof global !== 'undefined'\n  ? global\n  : {};\nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequirec1f2\"];\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequirec1f2\"] = parcelRequire;\n}\nparcelRequire.register(\"d63jw\", function(module, exports) {\n/**\n * @file Describes a data field of the restructured data.\n * @version {@link https://github.com/JohT/data-restructor-js/releases/latest latest version}\n * @author JohT\n * @version ${project.version}\n */ \"use strict\";\nvar $988e67f614ef1b49$var$module = $988e67f614ef1b49$var$describedFieldInternalCreateIfNotExists($988e67f614ef1b49$var$module); // Fallback for vanilla js without modules\nfunction $988e67f614ef1b49$var$describedFieldInternalCreateIfNotExists(objectToCheck) {\n    return objectToCheck || {};\n}\n/**\n * Describes a data field of the restructured data.\n * @module described_field\n */ var $988e67f614ef1b49$var$described_field = $988e67f614ef1b49$var$module.exports = {}; // Export module for npm...\n$988e67f614ef1b49$var$described_field.internalCreateIfNotExists = $988e67f614ef1b49$var$describedFieldInternalCreateIfNotExists;\n/**\n * Describes a field of the restructured data.\n * Dynamically added properties represent custom named groups containing DescribedDataField-Arrays.\n *\n * @typedef {Object} module:described_field.DescribedDataField\n * @property {string} [category=\"\"] - name of the category. Could contain a short domain name like \"product\" or \"vendor\".\n * @property {string} [type=\"\"] - type of the data element. Examples: \"summary\" for e.g. a list overview. \"detail\" e.g. when a summary is selected. \"filter\" e.g. for field/value pair results that can be selected as data filters.\n * @property {string} [abbreviation=\"\"] - one optional character, a symbol character or a short abbreviation of the category\n * @property {string} [image=\"\"] - one optional path to an image resource\n * @property {string} index - array of numbers containing the splitted index. Example: \"responses[2].hits.hits[4]._source.name\" will have an index of [2,4]\n * @property {string[]} groupNames - array of names of all dynamically added properties representing groups\n * @property {string} displayName - display name of the field\n * @property {string} fieldName - field name\n * @property {{*}} value - content of the field\n * @property {module:described_field.DescribedDataField[]} [couldBeAnyCustomGroupName] any number of groups attached to the field each containing multiple fields\n */ $988e67f614ef1b49$var$described_field.DescribedDataFieldBuilder = function() {\n    /**\n   * Builds a {@link module:described_field.DescribedDataField}.\n   * DescribedDataField is the main element of the restructured data and therefore considered \"public\".\n   * @constructs DescribedDataFieldBuilder\n   * @alias module:described_field.DescribedDataFieldBuilder\n   */ function DescribedDataFieldBuilder() {\n        /**\n     * @type {module:described_field.DescribedDataField}\n     */ this.describedField = {\n            category: \"\",\n            type: \"\",\n            abbreviation: \"\",\n            image: \"\",\n            index: [],\n            groupNames: [],\n            displayName: \"\",\n            fieldName: \"\",\n            value: \"\"\n        };\n        /**\n     * Takes over all values of the template {@link module:described_field.DescribedDataField}.\n     * @function\n     * @param {module:described_field.DescribedDataField} template\n     * @returns {DescribedDataFieldBuilder}\n     * @example fromDescribedDataField(sourceField)\n     */ this.fromDescribedDataField = function(template) {\n            this.category(template.category);\n            this.type(template.type);\n            this.abbreviation(template.abbreviation);\n            this.image(template.image);\n            this.index(template.index);\n            this.groupNames(template.groupNames);\n            this.displayName(template.displayName);\n            this.fieldName(template.fieldName);\n            this.value(template.value);\n            return this;\n        };\n        /**\n     * Sets the category.\n     *\n     * Contains a short domain nam, for example:\n     * - \"product\" for products\n     * - \"vendor\" for vendors\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example category(\"Product\")\n     */ this.category = function(value) {\n            this.describedField.category = withDefaultString(value, \"\");\n            return this;\n        };\n        /**\n     * Sets the type.\n     *\n     * Contains the type of the entry, for example:\n     * - \"summary\" for e.g. a list overview.\n     * - \"detail\" e.g. when a summary is selected.\n     * - \"filter\" e.g. for field/value pair results that can be selected as search parameters.\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example type(\"summary\")\n     */ this.type = function(value) {\n            this.describedField.type = withDefaultString(value, \"\");\n            return this;\n        };\n        /**\n     * Sets the optional abbreviation.\n     *\n     * Contains a symbol character or a very short abbreviation of the category.\n     * - \"P\" for products\n     * - \"V\" for vendors\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example abbreviation(\"P\")\n     */ this.abbreviation = function(value) {\n            this.describedField.abbreviation = withDefaultString(value, \"\");\n            return this;\n        };\n        /**\n     * Sets the optional path to an image resource.\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example image(\"img/product.png\")\n     */ this.image = function(value) {\n            this.describedField.image = withDefaultString(value, \"\");\n            return this;\n        };\n        /**\n     * Sets the index as an array of numbers containing the splitted array indexes of the source field.\n     * Example: \"responses[2].hits.hits[4]._source.name\" will have an index of [2,4].\n     *\n     * @function\n     * @param {number[]} [value=[]]\n     * @returns {DescribedDataFieldBuilder}\n     * @example index([2,4])\n     */ this.index = function(value) {\n            this.describedField.index = withDefaultArray(value, []);\n            return this;\n        };\n        /**\n     * Sets the group names as an array of strings containing the names of the dynamically added properties,\n     * that contain an array of {@link module:described_field.DescribedDataField}-Objects.\n     *\n     * @function\n     * @param {string[]} [value=[]]\n     * @returns {DescribedDataFieldBuilder}\n     * @example groupNames([\"summaries\",\"details\",\"options\"])\n     */ this.groupNames = function(value) {\n            this.describedField.groupNames = withDefaultArray(value, []);\n            return this;\n        };\n        /**\n     * Sets the display name.\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example displayName(\"Color\")\n     */ this.displayName = function(value) {\n            this.describedField.displayName = withDefaultString(value, \"\");\n            return this;\n        };\n        /**\n     * Sets the (technical) field name.\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example fieldName(\"color\")\n     */ this.fieldName = function(value) {\n            this.describedField.fieldName = withDefaultString(value, \"\");\n            return this;\n        };\n        /**\n     * Sets the value/content of the field.\n     *\n     * @function\n     * @param {*} value\n     * @returns {DescribedDataFieldBuilder}\n     * @example value(\"darkblue\")\n     */ this.value = function(value) {\n            this.describedField.value = value;\n            return this;\n        };\n        /**\n     * Finalizes the settings and builds the {@link module:described_field.DescribedDataField}.\n     * @function\n     * @returns {module:described_field.DescribedDataField}\n     */ this.build = function() {\n            return this.describedField;\n        };\n    }\n    function isSpecifiedString(value) {\n        return typeof value === \"string\" && value !== null && value !== \"\";\n    }\n    function withDefaultString(value, defaultValue) {\n        return isSpecifiedString(value) ? value : defaultValue;\n    }\n    function withDefaultArray(value, defaultValue) {\n        return value === undefined || value === null ? defaultValue : value;\n    }\n    return DescribedDataFieldBuilder;\n}();\n/**\n * Creates a new described data field with all properties of the original one except for dynamically added groups.\n * @param {module:described_field.DescribedDataField} describedDataField\n * @returns {module:described_field.DescribedDataField}\n * @memberof module:described_field\n */ $988e67f614ef1b49$var$described_field.copyWithoutGroups = function(describedDataField) {\n    return new $988e67f614ef1b49$var$described_field.DescribedDataFieldBuilder().fromDescribedDataField(describedDataField).groupNames([]).build();\n};\n$988e67f614ef1b49$var$described_field.DescribedDataFieldGroup = function() {\n    /**\n   * Adds groups to {@link module:described_field.DescribedDataField}s. These groups are dynamically added properties\n   * that contain an array of sub fields of the same type {@link module:described_field.DescribedDataField}s.\n   *\n   * @param {module:described_field.DescribedDataField} dataField\n   * @constructs DescribedDataFieldGroup\n   * @alias module:described_field.DescribedDataFieldGroup\n   * @example new described_field.DescribedDataFieldGroup(field).addGroupEntry(\"details\", detailField);\n   */ function DescribedDataFieldGroup(dataField) {\n        this.dataField = dataField;\n        /**\n     * Adds an entry to the given group. If the group does not exist, it will be created.\n     * @function\n     * @param {String} groupName name of the group to which the entry will be added\n     * @param {module:described_field.DescribedDataField} describedField sub field that is added to the group\n     * @returns {DescribedDataFieldGroup}\n     */ this.addGroupEntry = function(groupName, describedField) {\n            this.addGroupEntries(groupName, [\n                describedField\n            ]);\n            return this;\n        };\n        /**\n     * Adds entries to the given group. If the group does not exist, it will be created.\n     * @function\n     * @param {String} groupName name of the group to which the entries will be added\n     * @param {module:described_field.DescribedDataField[]} describedFields sub fields that are added to the group\n     * @returns {DescribedDataFieldGroup}\n     */ this.addGroupEntries = function(groupName, describedFields) {\n            if (!groupName || groupName.length === 0) return this;\n            if (!describedFields || describedFields.length === 0) return this;\n            if (this.dataField[groupName] === undefined) {\n                this.dataField.groupNames.push(groupName);\n                this.dataField[groupName] = [];\n            }\n            var index;\n            var describedField;\n            for(index = 0; index < describedFields.length; index += 1){\n                describedField = describedFields[index];\n                this.dataField[groupName].push(describedField);\n            }\n            return this;\n        };\n    }\n    return DescribedDataFieldGroup;\n}();\n\n});\n\n\nparcelRequire(\"d63jw\");\n\n//# sourceMappingURL=describedfield.js.map\n","/**\n * @file Describes a data field of the restructured data.\n * @version {@link https://github.com/JohT/data-restructor-js/releases/latest latest version}\n * @author JohT\n * @version ${project.version}\n */\n\"use strict\";\nvar module = describedFieldInternalCreateIfNotExists(module); // Fallback for vanilla js without modules\n\nfunction describedFieldInternalCreateIfNotExists(objectToCheck) {\n  return objectToCheck || {};\n}\n\n/**\n * Describes a data field of the restructured data.\n * @module described_field\n */\nvar described_field = (module.exports = {}); // Export module for npm...\ndescribed_field.internalCreateIfNotExists = describedFieldInternalCreateIfNotExists;\n\n/**\n * Describes a field of the restructured data.\n * Dynamically added properties represent custom named groups containing DescribedDataField-Arrays.\n *\n * @typedef {Object} module:described_field.DescribedDataField\n * @property {string} [category=\"\"] - name of the category. Could contain a short domain name like \"product\" or \"vendor\".\n * @property {string} [type=\"\"] - type of the data element. Examples: \"summary\" for e.g. a list overview. \"detail\" e.g. when a summary is selected. \"filter\" e.g. for field/value pair results that can be selected as data filters.\n * @property {string} [abbreviation=\"\"] - one optional character, a symbol character or a short abbreviation of the category\n * @property {string} [image=\"\"] - one optional path to an image resource\n * @property {string} index - array of numbers containing the splitted index. Example: \"responses[2].hits.hits[4]._source.name\" will have an index of [2,4]\n * @property {string[]} groupNames - array of names of all dynamically added properties representing groups\n * @property {string} displayName - display name of the field\n * @property {string} fieldName - field name\n * @property {{*}} value - content of the field\n * @property {module:described_field.DescribedDataField[]} [couldBeAnyCustomGroupName] any number of groups attached to the field each containing multiple fields\n */\n\ndescribed_field.DescribedDataFieldBuilder = (function () {\n  /**\n   * Builds a {@link module:described_field.DescribedDataField}.\n   * DescribedDataField is the main element of the restructured data and therefore considered \"public\".\n   * @constructs DescribedDataFieldBuilder\n   * @alias module:described_field.DescribedDataFieldBuilder\n   */\n  function DescribedDataFieldBuilder() {\n    /**\n     * @type {module:described_field.DescribedDataField}\n     */\n    this.describedField = {\n      category: \"\",\n      type: \"\",\n      abbreviation: \"\",\n      image: \"\",\n      index: [],\n      groupNames: [],\n      displayName: \"\",\n      fieldName: \"\",\n      value: \"\"\n    };\n    /**\n     * Takes over all values of the template {@link module:described_field.DescribedDataField}.\n     * @function\n     * @param {module:described_field.DescribedDataField} template\n     * @returns {DescribedDataFieldBuilder}\n     * @example fromDescribedDataField(sourceField)\n     */\n    this.fromDescribedDataField = function (template) {\n      this.category(template.category);\n      this.type(template.type);\n      this.abbreviation(template.abbreviation);\n      this.image(template.image);\n      this.index(template.index);\n      this.groupNames(template.groupNames);\n      this.displayName(template.displayName);\n      this.fieldName(template.fieldName);\n      this.value(template.value);\n      return this;\n    };\n    /**\n     * Sets the category.\n     *\n     * Contains a short domain nam, for example:\n     * - \"product\" for products\n     * - \"vendor\" for vendors\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example category(\"Product\")\n     */\n    this.category = function (value) {\n      this.describedField.category = withDefaultString(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the type.\n     *\n     * Contains the type of the entry, for example:\n     * - \"summary\" for e.g. a list overview.\n     * - \"detail\" e.g. when a summary is selected.\n     * - \"filter\" e.g. for field/value pair results that can be selected as search parameters.\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example type(\"summary\")\n     */\n    this.type = function (value) {\n      this.describedField.type = withDefaultString(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the optional abbreviation.\n     *\n     * Contains a symbol character or a very short abbreviation of the category.\n     * - \"P\" for products\n     * - \"V\" for vendors\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example abbreviation(\"P\")\n     */\n    this.abbreviation = function (value) {\n      this.describedField.abbreviation = withDefaultString(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the optional path to an image resource.\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example image(\"img/product.png\")\n     */\n    this.image = function (value) {\n      this.describedField.image = withDefaultString(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the index as an array of numbers containing the splitted array indexes of the source field.\n     * Example: \"responses[2].hits.hits[4]._source.name\" will have an index of [2,4].\n     *\n     * @function\n     * @param {number[]} [value=[]]\n     * @returns {DescribedDataFieldBuilder}\n     * @example index([2,4])\n     */\n    this.index = function (value) {\n      this.describedField.index = withDefaultArray(value, []);\n      return this;\n    };\n    /**\n     * Sets the group names as an array of strings containing the names of the dynamically added properties,\n     * that contain an array of {@link module:described_field.DescribedDataField}-Objects.\n     *\n     * @function\n     * @param {string[]} [value=[]]\n     * @returns {DescribedDataFieldBuilder}\n     * @example groupNames([\"summaries\",\"details\",\"options\"])\n     */\n    this.groupNames = function (value) {\n      this.describedField.groupNames = withDefaultArray(value, []);\n      return this;\n    };\n    /**\n     * Sets the display name.\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example displayName(\"Color\")\n     */\n    this.displayName = function (value) {\n      this.describedField.displayName = withDefaultString(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the (technical) field name.\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example fieldName(\"color\")\n     */\n    this.fieldName = function (value) {\n      this.describedField.fieldName = withDefaultString(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the value/content of the field.\n     *\n     * @function\n     * @param {*} value\n     * @returns {DescribedDataFieldBuilder}\n     * @example value(\"darkblue\")\n     */\n    this.value = function (value) {\n      this.describedField.value = value;\n      return this;\n    };\n\n    /**\n     * Finalizes the settings and builds the {@link module:described_field.DescribedDataField}.\n     * @function\n     * @returns {module:described_field.DescribedDataField}\n     */\n    this.build = function () {\n      return this.describedField;\n    };\n  }\n\n  function isSpecifiedString(value) {\n    return typeof value === \"string\" && value !== null && value !== \"\";\n  }\n\n  function withDefaultString(value, defaultValue) {\n    return isSpecifiedString(value) ? value : defaultValue;\n  }\n\n  function withDefaultArray(value, defaultValue) {\n    return value === undefined || value === null ? defaultValue : value;\n  }\n\n  return DescribedDataFieldBuilder;\n}());\n\n/**\n * Creates a new described data field with all properties of the original one except for dynamically added groups.\n * @param {module:described_field.DescribedDataField} describedDataField\n * @returns {module:described_field.DescribedDataField}\n * @memberof module:described_field\n */\ndescribed_field.copyWithoutGroups = function (describedDataField) {\n  return new described_field.DescribedDataFieldBuilder().fromDescribedDataField(describedDataField).groupNames([]).build();\n};\n\ndescribed_field.DescribedDataFieldGroup = (function () {\n  /**\n   * Adds groups to {@link module:described_field.DescribedDataField}s. These groups are dynamically added properties\n   * that contain an array of sub fields of the same type {@link module:described_field.DescribedDataField}s.\n   *\n   * @param {module:described_field.DescribedDataField} dataField\n   * @constructs DescribedDataFieldGroup\n   * @alias module:described_field.DescribedDataFieldGroup\n   * @example new described_field.DescribedDataFieldGroup(field).addGroupEntry(\"details\", detailField);\n   */\n  function DescribedDataFieldGroup(dataField) {\n    this.dataField = dataField;\n\n    /**\n     * Adds an entry to the given group. If the group does not exist, it will be created.\n     * @function\n     * @param {String} groupName name of the group to which the entry will be added\n     * @param {module:described_field.DescribedDataField} describedField sub field that is added to the group\n     * @returns {DescribedDataFieldGroup}\n     */\n    this.addGroupEntry = function (groupName, describedField) {\n      this.addGroupEntries(groupName, [describedField]);\n      return this;\n    };\n\n    /**\n     * Adds entries to the given group. If the group does not exist, it will be created.\n     * @function\n     * @param {String} groupName name of the group to which the entries will be added\n     * @param {module:described_field.DescribedDataField[]} describedFields sub fields that are added to the group\n     * @returns {DescribedDataFieldGroup}\n     */\n    this.addGroupEntries = function (groupName, describedFields) {\n      if (!groupName || groupName.length === 0) {\n        return this;\n      }\n      if (!describedFields || describedFields.length === 0) {\n        return this;\n      }\n      if (this.dataField[groupName] === undefined) {\n        this.dataField.groupNames.push(groupName);\n        this.dataField[groupName] = [];\n      }\n      var index;\n      var describedField;\n      for (index = 0; index < describedFields.length; index += 1) {\n        describedField = describedFields[index];\n        this.dataField[groupName].push(describedField);\n      }\n      return this;\n    };\n  }\n\n  return DescribedDataFieldGroup;\n}());\n"],"names":["$parcel$global","globalThis","self","window","global","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","$988e67f614ef1b49$var$module","$988e67f614ef1b49$var$describedFieldInternalCreateIfNotExists","objectToCheck","$988e67f614ef1b49$var$described_field","internalCreateIfNotExists","DescribedDataFieldBuilder","withDefaultString","value","defaultValue","isSpecifiedString","describedField","category","type","abbreviation","image","index","groupNames","displayName","fieldName","fromDescribedDataField","template","build","copyWithoutGroups","describedDataField","DescribedDataFieldGroup","dataField","addGroupEntry","groupName","addGroupEntries","describedFields","length","undefined","push"],"version":3,"file":"describedfield.js.map","sourceRoot":"../"}