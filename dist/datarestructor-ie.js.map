{"mappings":"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","sources":["lib/js/flattenToArray.js","src/js/templateResolver.js","src/js/describedfield.js","lib/js/polyfills/isArrayPolyfill.js","lib/js/polyfills/arrayFilterPolyfill.js","lib/js/polyfills/indexOfPolyfill.js","lib/js/polyfills/objectKeysPolyfill.js","src/js/datarestructor.js","src/js/datarestructor-ie.js"],"sourcesContent":["\"use strict\";\n/**\n * @fileOverview Modded (compatibility, recursion depth) version of: https://stackoverflow.com/questions/19098797/fastest-way-to-flatten-un-flatten-nested-json-objectss\n * @version ${project.version}\n * @see {@link https://stackoverflow.com/questions/19098797/fastest-way-to-flatten-un-flatten-nested-json-objectss|stackoverflow flatten nested json objects}\n */\nvar module = module || {}; // Fallback for vanilla js without modules\n\n/**\n * internal_object_tools. Not meant to be used outside this repository.\n * @default {}\n */\nvar internal_object_tools = module.exports={}; // Export module for npm...\n\n/**\n * @typedef {Object} NameValuePair\n * @property {string} name - point separated names of the flattened main and sub properties, e.g. \"responses[2].hits.hits[4]._source.name\".\n * @property {string} value - value of the property\n */\n\n/**\n * @param {object} data hierarchical object that may consist fo fields, subfields and arrays.\n * @param {number} maxRecursionDepth\n * @returns {NameValuePair[]} array of property name and value pairs\n */\ninternal_object_tools.flattenToArray = function (data, maxRecursionDepth) {\n  var result = [];\n  if (typeof maxRecursionDepth !== \"number\" || maxRecursionDepth < 1) {\n    maxRecursionDepth = 20;\n  }\n  function recurse(cur, prop, depth) {\n    if (depth > maxRecursionDepth || typeof cur === \"function\") {\n      return;\n    }\n    if (Object(cur) !== cur) {\n      result.push({ name: prop, value: cur });\n    } else if (Array.isArray(cur)) {\n      var i;\n      var l = cur.length;\n      for (i = 0; i < l; i += 1) {\n        recurse(cur[i], prop + \"[\" + i + \"]\", depth + 1);\n      }\n      if (l === 0) {\n        result[prop] = [];\n        result.push({ name: prop, value: \"\" });\n      }\n    } else {\n      var isEmpty = true;\n      var p;\n      for (p in cur) {\n        isEmpty = false;\n        recurse(cur[p], prop ? prop + \".\" + p : p, depth + 1);\n      }\n      if (isEmpty && prop) {\n        result.push({ name: prop, value: \"\" });\n      }\n    }\n  }\n  recurse(data, \"\", 0);\n  return result;\n};\n","/**\n * @file Provides a simple template resolver, that replaces variables in double curly brackets with the values of a given object.\n * @version {@link https://github.com/JohT/data-restructor-js/releases/latest latest version}\n * @author JohT\n * @version ${project.version}\n */\n\"use strict\";\nvar module = templateResolverInternalCreateIfNotExists(module); // Fallback for vanilla js without modules\n\nfunction templateResolverInternalCreateIfNotExists(objectToCheck) {\n  return objectToCheck || {};\n}\n\n/**\n * Provides a simple template resolver, that replaces variables in double curly brackets with the values of a given object.\n * @module template_resolver\n */\nvar template_resolver = (module.exports = {}); // Export module for npm...\ntemplate_resolver.internalCreateIfNotExists = templateResolverInternalCreateIfNotExists;\n\nvar internal_object_tools = internal_object_tools || require(\"../../lib/js/flattenToArray\"); // supports vanilla js & npm\n\ntemplate_resolver.Resolver = (function () {\n  var removeArrayBracketsRegEx = new RegExp(\"\\\\[\\\\d+\\\\]\", \"gi\");\n\n  /**\n   * Resolver. Is used inside this repository. It could also be used outside.\n   * @param {*} sourceDataObject The properties of this object will be used to replace the placeholders in the template.\n   * @constructs Resolver\n   * @alias module:template_resolver.Resolver\n   */\n  function Resolver(sourceDataObject) {\n    /**\n     * The properties of this source data object will be used to replace the placeholders in the template.\n     */\n    this.sourceDataObject = sourceDataObject;\n    /**\n     * Resolves the given template.\n     *\n     * The template may contain variables in double curly brackets.\n     * Supported variables are all properties of this object, e.g. \"{{fieldName}}\", \"{{displayName}}\", \"{{value}}\".\n     * Since this object may also contains (described) groups of sub objects, they can also be used, e.g. \"{{summaries[0].value}}\"\n     * Parts of the index can be inserted by using e.g. \"{{index[1]}}\".\n     *\n     * @param {string} template\n     * @returns {string} resolved template\n     */\n    this.resolveTemplate = function (template) {\n      return this.replaceResolvableFields(template, addFieldsPerGroup(this.resolvableFieldsOfAll(this.sourceDataObject)));\n    };\n    /**\n     * Returns a map like object, that contains all resolvable fields and their values as properties.\n     * This function takes a variable count of input parameters,\n     * each containing an object that contains resolvable fields to extract from.\n     *\n     * The recursion depth is limited to 3, so that an object,\n     * that contains an object can contain another object (but not further).\n     *\n     * Properties beginning with an underscore in their name will be filtered out, since they are considered as internal fields.\n     *\n     * @param {...object} varArgs variable count of parameters. Each parameter contains an object that fields should be resolvable for variables.\n     * @returns {object} object with resolvable field names and their values.\n     * @public\n     */\n    this.resolvableFieldsOfAll = function () {\n      var map = {};\n      var ignoreInternalFields = function (propertyName) {\n        return propertyName.indexOf(\"_\") !== 0 && propertyName.indexOf(\"._\") < 0;\n      };\n      var index;\n      for (index = 0; index < arguments.length; index += 1) {\n        addToFilteredMapObject(internal_object_tools.flattenToArray(arguments[index], 3), map, ignoreInternalFields);\n      }\n      return map;\n    };\n    /**\n     * Replaces all variables in double curly brackets, e.g. {{property}},\n     * with the value of that property from the resolvableProperties.\n     *\n     * Supported property types: string, number, boolean\n     * @param {string} stringContainingVariables\n     * @param {object[]} resolvableFields (name=value)\n     */\n    this.replaceResolvableFields = function (stringContainingVariables, resolvableFields) {\n      var replaced = stringContainingVariables;\n      var propertyNames = Object.keys(resolvableFields);\n      var propertyIndex = 0;\n      var propertyName = \"\";\n      var propertyValue = \"\";\n      for (propertyIndex = 0; propertyIndex < propertyNames.length; propertyIndex += 1) {\n        propertyName = propertyNames[propertyIndex];\n        propertyValue = resolvableFields[propertyName];\n        replaced = replaced.replace(\"{{\" + propertyName + \"}}\", propertyValue);\n      }\n      return replaced;\n    };\n  }\n\n  /**\n   * Adds the value of the \"fieldName\" property (including its group prefix) and its associated \"value\" property content.\n   * For example: detail[2].fieldName=\"name\", detail[2].value=\"Smith\" lead to the additional property detail.name=\"Smith\".\n   * @param {object} object with resolvable field names and their values.\n   * @returns {object} object with resolvable field names and their values.\n   * @protected\n   * @memberof module:template_resolver.Resolver\n   */\n  function addFieldsPerGroup(map) {\n    var propertyNames = Object.keys(map);\n    var i, fullPropertyName, propertyInfo, propertyValue;\n    for (i = 0; i < propertyNames.length; i += 1) {\n      fullPropertyName = propertyNames[i];\n      propertyValue = map[fullPropertyName];\n      propertyInfo = getPropertyNameInfos(fullPropertyName);\n      // Supports fields that are defined by a property named \"fieldName\" (containing the name)\n      // and a property named \"value\" inside the same sub object (containing its value).\n      // Ignore custom fields that are named \"fieldName\"(propertyValue), since this would lead to an unpredictable behavior.\n      // TODO could make \"fieldName\" and \"value\" configurable\n      if (propertyInfo.name === \"fieldName\" && propertyValue !== \"fieldName\") {\n        map[propertyInfo.groupWithoutArrayIndices + propertyValue] = map[propertyInfo.group + \"value\"];\n      }\n    }\n    return map;\n  }\n\n  /**\n   * Infos about the full property name including the name of the group (followed by the separator) and the name of the property itself.\n   * @param {String} fullPropertyName\n   * @returns {Object} Contains \"group\" (empty or group name including trailing separator \".\"), \"groupWithoutArrayIndices\" and \"name\" (property name).\n   * @protected\n   * @memberof module:template_resolver.Resolver\n   */\n  function getPropertyNameInfos(fullPropertyName) {\n    var positionOfRightMostSeparator = fullPropertyName.lastIndexOf(\".\");\n    var propertyName = fullPropertyName;\n    if (positionOfRightMostSeparator > 0) {\n      propertyName = fullPropertyName.substr(positionOfRightMostSeparator + 1);\n    }\n    var propertyGroup = \"\";\n    if (positionOfRightMostSeparator > 0) {\n      propertyGroup = fullPropertyName.substr(0, positionOfRightMostSeparator + 1); //includes the trailing \".\".\n    }\n    var propertyGroupWithoutArrayIndices = propertyGroup.replace(removeArrayBracketsRegEx, \"\");\n    return { group: propertyGroup, groupWithoutArrayIndices: propertyGroupWithoutArrayIndices, name: propertyName };\n  }\n\n  /**\n   * Collects all flattened name-value-pairs into one object using the property names as keys and their values as values (map-like).\n   * Example: `{name: \"accountNumber\", value: \"12345\"}` becomes `mapObject[\"accountNumber\"]=\"12345\"`.\n   *\n   * @param {NameValuePair[]} elements flattened array of name-value-pairs\n   * @param {object} mapObject container to collect the results. Needs to be created before e.g. using `{}`.\n   * @param {function} filterMatchesFunction takes the property name as string argument and returns true (include) or false (exclude).\n   * @protected\n   * @memberof module:template_resolver.Resolver\n   */\n  function addToFilteredMapObject(elements, mapObject, filterMatchesFunction) {\n    var index, element;\n    for (index = 0; index < elements.length; index += 1) {\n      element = elements[index];\n      if (typeof filterMatchesFunction === \"function\" && filterMatchesFunction(element.name)) {\n        mapObject[element.name] = element.value;\n      }\n    }\n    return mapObject;\n  }\n\n  return Resolver;\n}());\n","/**\n * @file Describes a data field of the restructured data.\n * @version {@link https://github.com/JohT/data-restructor-js/releases/latest latest version}\n * @author JohT\n * @version ${project.version}\n */\n\"use strict\";\nvar module = describedFieldInternalCreateIfNotExists(module); // Fallback for vanilla js without modules\n\nfunction describedFieldInternalCreateIfNotExists(objectToCheck) {\n  return objectToCheck || {};\n}\n\n/**\n * Describes a data field of the restructured data.\n * @module described_field\n */\nvar described_field = (module.exports = {}); // Export module for npm...\ndescribed_field.internalCreateIfNotExists = describedFieldInternalCreateIfNotExists;\n\n/**\n * Describes a field of the restructured data.\n * Dynamically added properties represent custom named groups containing DescribedDataField-Arrays.\n *\n * @typedef {Object} module:described_field.DescribedDataField\n * @property {string} [category=\"\"] - name of the category. Could contain a short domain name like \"product\" or \"vendor\".\n * @property {string} [type=\"\"] - type of the data element. Examples: \"summary\" for e.g. a list overview. \"detail\" e.g. when a summary is selected. \"filter\" e.g. for field/value pair results that can be selected as data filters.\n * @property {string} [abbreviation=\"\"] - one optional character, a symbol character or a short abbreviation of the category\n * @property {string} [image=\"\"] - one optional path to an image resource\n * @property {string} index - array of numbers containing the splitted index. Example: \"responses[2].hits.hits[4]._source.name\" will have an index of [2,4]\n * @property {string[]} groupNames - array of names of all dynamically added properties representing groups\n * @property {string} displayName - display name of the field\n * @property {string} fieldName - field name\n * @property {{*}} value - content of the field\n * @property {module:described_field.DescribedDataField[]} [couldBeAnyCustomGroupName] any number of groups attached to the field each containing multiple fields\n */\n\ndescribed_field.DescribedDataFieldBuilder = (function () {\n  /**\n   * Builds a {@link module:described_field.DescribedDataField}.\n   * DescribedDataField is the main element of the restructured data and therefore considered \"public\".\n   * @constructs DescribedDataFieldBuilder\n   * @alias module:described_field.DescribedDataFieldBuilder\n   */\n  function DescribedDataFieldBuilder() {\n    /**\n     * @type {module:described_field.DescribedDataField}\n     */\n    this.describedField = {\n      category: \"\",\n      type: \"\",\n      abbreviation: \"\",\n      image: \"\",\n      index: [],\n      groupNames: [],\n      displayName: \"\",\n      fieldName: \"\",\n      value: \"\"\n    };\n    /**\n     * Takes over all values of the template {@link module:described_field.DescribedDataField}.\n     * @function\n     * @param {module:described_field.DescribedDataField} template\n     * @returns {DescribedDataFieldBuilder}\n     * @example fromDescribedDataField(sourceField)\n     */\n    this.fromDescribedDataField = function (template) {\n      this.category(template.category);\n      this.type(template.type);\n      this.abbreviation(template.abbreviation);\n      this.image(template.image);\n      this.index(template.index);\n      this.groupNames(template.groupNames);\n      this.displayName(template.displayName);\n      this.fieldName(template.fieldName);\n      this.value(template.value);\n      return this;\n    };\n    /**\n     * Sets the category.\n     *\n     * Contains a short domain nam, for example:\n     * - \"product\" for products\n     * - \"vendor\" for vendors\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example category(\"Product\")\n     */\n    this.category = function (value) {\n      this.describedField.category = withDefaultString(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the type.\n     *\n     * Contains the type of the entry, for example:\n     * - \"summary\" for e.g. a list overview.\n     * - \"detail\" e.g. when a summary is selected.\n     * - \"filter\" e.g. for field/value pair results that can be selected as search parameters.\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example type(\"summary\")\n     */\n    this.type = function (value) {\n      this.describedField.type = withDefaultString(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the optional abbreviation.\n     *\n     * Contains a symbol character or a very short abbreviation of the category.\n     * - \"P\" for products\n     * - \"V\" for vendors\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example abbreviation(\"P\")\n     */\n    this.abbreviation = function (value) {\n      this.describedField.abbreviation = withDefaultString(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the optional path to an image resource.\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example image(\"img/product.png\")\n     */\n    this.image = function (value) {\n      this.describedField.image = withDefaultString(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the index as an array of numbers containing the splitted array indexes of the source field.\n     * Example: \"responses[2].hits.hits[4]._source.name\" will have an index of [2,4].\n     *\n     * @function\n     * @param {number[]} [value=[]]\n     * @returns {DescribedDataFieldBuilder}\n     * @example index([2,4])\n     */\n    this.index = function (value) {\n      this.describedField.index = withDefaultArray(value, []);\n      return this;\n    };\n    /**\n     * Sets the group names as an array of strings containing the names of the dynamically added properties,\n     * that contain an array of {@link module:described_field.DescribedDataField}-Objects.\n     *\n     * @function\n     * @param {string[]} [value=[]]\n     * @returns {DescribedDataFieldBuilder}\n     * @example groupNames([\"summaries\",\"details\",\"options\"])\n     */\n    this.groupNames = function (value) {\n      this.describedField.groupNames = withDefaultArray(value, []);\n      return this;\n    };\n    /**\n     * Sets the display name.\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example displayName(\"Color\")\n     */\n    this.displayName = function (value) {\n      this.describedField.displayName = withDefaultString(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the (technical) field name.\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example fieldName(\"color\")\n     */\n    this.fieldName = function (value) {\n      this.describedField.fieldName = withDefaultString(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the value/content of the field.\n     *\n     * @function\n     * @param {*} value\n     * @returns {DescribedDataFieldBuilder}\n     * @example value(\"darkblue\")\n     */\n    this.value = function (value) {\n      this.describedField.value = value;\n      return this;\n    };\n\n    /**\n     * Finalizes the settings and builds the {@link module:described_field.DescribedDataField}.\n     * @function\n     * @returns {module:described_field.DescribedDataField}\n     */\n    this.build = function () {\n      return this.describedField;\n    };\n  }\n\n  function isSpecifiedString(value) {\n    return typeof value === \"string\" && value !== null && value !== \"\";\n  }\n\n  function withDefaultString(value, defaultValue) {\n    return isSpecifiedString(value) ? value : defaultValue;\n  }\n\n  function withDefaultArray(value, defaultValue) {\n    return value === undefined || value === null ? defaultValue : value;\n  }\n\n  return DescribedDataFieldBuilder;\n}());\n\n/**\n * Creates a new described data field with all properties of the original one except for dynamically added groups.\n * @param {module:described_field.DescribedDataField} describedDataField\n * @returns {module:described_field.DescribedDataField}\n * @memberof module:described_field\n */\ndescribed_field.copyWithoutGroups = function (describedDataField) {\n  return new described_field.DescribedDataFieldBuilder().fromDescribedDataField(describedDataField).groupNames([]).build();\n};\n\ndescribed_field.DescribedDataFieldGroup = (function () {\n  /**\n   * Adds groups to {@link module:described_field.DescribedDataField}s. These groups are dynamically added properties\n   * that contain an array of sub fields of the same type {@link module:described_field.DescribedDataField}s.\n   *\n   * @param {module:described_field.DescribedDataField} dataField\n   * @constructs DescribedDataFieldGroup\n   * @alias module:described_field.DescribedDataFieldGroup\n   * @example new described_field.DescribedDataFieldGroup(field).addGroupEntry(\"details\", detailField);\n   */\n  function DescribedDataFieldGroup(dataField) {\n    this.dataField = dataField;\n\n    /**\n     * Adds an entry to the given group. If the group does not exist, it will be created.\n     * @function\n     * @param {String} groupName name of the group to which the entry will be added\n     * @param {module:described_field.DescribedDataField} describedField sub field that is added to the group\n     * @returns {DescribedDataFieldGroup}\n     */\n    this.addGroupEntry = function (groupName, describedField) {\n      this.addGroupEntries(groupName, [describedField]);\n      return this;\n    };\n\n    /**\n     * Adds entries to the given group. If the group does not exist, it will be created.\n     * @function\n     * @param {String} groupName name of the group to which the entries will be added\n     * @param {module:described_field.DescribedDataField[]} describedFields sub fields that are added to the group\n     * @returns {DescribedDataFieldGroup}\n     */\n    this.addGroupEntries = function (groupName, describedFields) {\n      if (!groupName || groupName.length === 0) {\n        return this;\n      }\n      if (!describedFields || describedFields.length === 0) {\n        return this;\n      }\n      if (this.dataField[groupName] === undefined) {\n        this.dataField.groupNames.push(groupName);\n        this.dataField[groupName] = [];\n      }\n      var index;\n      var describedField;\n      for (index = 0; index < describedFields.length; index += 1) {\n        describedField = describedFields[index];\n        this.dataField[groupName].push(describedField);\n      }\n      return this;\n    };\n  }\n\n  return DescribedDataFieldGroup;\n}());\n","// https://gist.github.com/brianonn/4ef965a06b9e950d80e4e8b8e4c527f9\n// https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\nif (!Array.isArray) {\n    Array.isArray = function(arg) {\n      return Object.prototype.toString.call(arg) === '[object Array]';\n    };\n}","// From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter#Polyfill\nif (!Array.prototype.filter){\n    Array.prototype.filter = function(func, thisArg) {\n      'use strict';\n      if ( ! ((typeof func === 'Function' || typeof func === 'function') && this) )\n          throw new TypeError();\n     \n      var len = this.length >>> 0,\n          res = new Array(len), // preallocate array\n          t = this, c = 0, i = -1;\n  \n      var kValue;\n      if (thisArg === undefined){\n        while (++i !== len){\n          // checks to see if the key was set\n          if (i in this){\n            kValue = t[i]; // in case t is changed in callback\n            if (func(t[i], i, t)){\n              res[c++] = kValue;\n            }\n          }\n        }\n      }\n      else{\n        while (++i !== len){\n          // checks to see if the key was set\n          if (i in this){\n            kValue = t[i];\n            if (func.call(thisArg, t[i], i, t)){\n              res[c++] = kValue;\n            }\n          }\n        }\n      }\n     \n      res.length = c; // shrink down array to proper size\n      return res;\n    };\n  }","//https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf#Polyfill\nif (!Array.prototype.indexOf)  Array.prototype.indexOf = (function(Object, max, min){\n    \"use strict\";\n    return function indexOf(member, fromIndex) {\n      if(this===null||this===undefined)throw TypeError(\"Array.prototype.indexOf called on null or undefined\");\n      \n      var that = Object(this), Len = that.length >>> 0, i = min(fromIndex | 0, Len);\n      if (i < 0) i = max(0, Len+i); else if (i >= Len) return -1;\n      \n      if(member===void 0){ for(; i !== Len; ++i) if(that[i]===void 0 && i in that) return i; // undefined\n      }else if(member !== member){   for(; i !== Len; ++i) if(that[i] !== that[i]) return i; // NaN\n      }else                           for(; i !== Len; ++i) if(that[i] === member) return i; // all else\n  \n      return -1; // if the value was not found, then return -1\n    };\n  })(Object, Math.max, Math.min);","//http://tokenposts.blogspot.com/2012/04/javascript-objectkeys-browser.html\nif (!Object.keys) Object.keys = function(o) {\n    if (o !== Object(o))\n      throw new TypeError('Object.keys called on a non-object');\n    var k=[],p;\n    for (p in o) if (Object.prototype.hasOwnProperty.call(o,p)) k.push(p);\n    return k;\n  }","/**\n * @file datarestructor transforms parsed JSON objects into a uniform data structure\n * @version {@link https://github.com/JohT/data-restructor-js/releases/latest latest version}\n * @author JohT\n */\n\n \"use strict\";\nvar module = datarestructorInternalCreateIfNotExists(module); // Fallback for vanilla js without modules\n\nfunction datarestructorInternalCreateIfNotExists(objectToCheck) {\n  return objectToCheck || {};\n}\n\n/**\n * datarestructor namespace and module declaration.\n * It contains all functions to convert an object (e.g. parsed JSON) into uniform enumerated list of described field entries.\n * \n * <b>Transformation steps:</b>\n * - JSON\n * - flatten\n * - mark and identify\n * - add array fields\n * - deduplicate \n * - group\n * - flatten again\n * @module datarestructor\n */\nvar datarestructor = module.exports={}; // Export module for npm...\ndatarestructor.internalCreateIfNotExists = datarestructorInternalCreateIfNotExists;\n\nvar internal_object_tools = internal_object_tools || require(\"../../lib/js/flattenToArray\"); // supports vanilla js & npm\nvar template_resolver = template_resolver || require(\"../../src/js/templateResolver\"); // supports vanilla js & npm\nvar described_field = described_field || require(\"../../src/js/describedfield\"); // supports vanilla js & npm\n\n/**\n * Takes the full qualified original property name and extracts a simple name out of it.\n * \n * @callback module:datarestructor.propertyNameFunction\n * @param {string} propertyName full qualified, point separated property name \n * @return {String} extracted, simple name\n */\n\n/**\n * Describes a selected part of the incoming data structure and defines, \n * how the data should be transformed.\n * \n * @typedef {Object} module:datarestructor.PropertyStructureDescription\n * @property {string} type - \"\"(default). Some examples: \"summary\" for e.g. a list overview. \"detail\" e.g. when a summary is selected. \"filter\" e.g. for field/value pair results that can be selected as search parameters.\n * @property {string} category - name of the category. Default = \"\". Could contain a short domain name like \"product\" or \"vendor\".\n * @property {string} [abbreviation=\"\"] - one optional character, a symbol character or a short abbreviation of the category\n * @property {string} [image=\"\"] - one optional path to an image resource\n * @property {boolean} propertyPatternTemplateMode - \"false\"(default): property name needs to be equal to the pattern. \"true\" allows variables like \"{{fieldName}}\" inside the pattern.\n * @property {string} propertyPattern - property name pattern (without array indices) to match\n * @property {string} indexStartsWith - \"\"(default) matches all ids. String that needs to match the beginning of the id. E.g. \"1.\" will match id=\"1.3.4\" but not \"0.1.2\".\n * @property {module:datarestructor.propertyNameFunction} getDisplayNameForPropertyName - display name for the property. \"\"(default) last property name element with upper case first letter.\n * @property {module:datarestructor.propertyNameFunction} getFieldNameForPropertyName - field name for the property. \"\" (default) last property name element.\n * @property {string} groupName - name of the property, that contains grouped entries. Default=\"group\".\n * @property {string} groupPattern - Pattern that describes how to group entries. \"groupName\" defines the name of this group. A pattern may contain variables in double curly brackets {{variable}}.\n * @property {string} groupDestinationPattern - Pattern that describes where the group should be moved to. Default=\"\"=Group will not be moved. A pattern may contain variables in double curly brackets {{variable}}.\n * @property {string} groupDestinationName - (default=groupName) Name of the group when it had been moved to the destination.\n * @property {string} deduplicationPattern - Pattern to use to remove duplicate entries. A pattern may contain variables in double curly brackets {{variable}}.\n */\n\ndatarestructor.PropertyStructureDescriptionBuilder = (function () {\n  \"use strict\";\n\n  /**\n   * Builder for a {@link PropertyStructureDescription}.\n   * @constructs PropertyStructureDescriptionBuilder\n   * @alias module:datarestructor.PropertyStructureDescriptionBuilder\n   */\n  function PropertyStructureDescription() {\n    /**\n     * @type {module:datarestructor.PropertyStructureDescription}\n     */\n    this.description = {\n      type: \"\",\n      category: \"\",\n      abbreviation: \"\",\n      image: \"\",\n      propertyPatternTemplateMode: false,\n      propertyPattern: \"\",\n      indexStartsWith: \"\",\n      groupName: \"group\",\n      groupPattern: \"\",\n      groupDestinationPattern: \"\",\n      groupDestinationName: null,\n      deduplicationPattern: \"\",\n      getDisplayNameForPropertyName: null,\n      getFieldNameForPropertyName: null,\n      matchesPropertyName: null\n    };\n    /**\n     * Sets the type.\n     * \n     * Contains the type of the entry, for example: \n     * - \"summary\" for e.g. a list overview. \n     * - \"detail\" e.g. when a summary is selected. \n     * - \"filter\" e.g. for field/value pair results that can be selected as search parameters.\n     * \n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {module:datarestructor.PropertyStructureDescription}\n     * @example type(\"summary\")\n     */\n    this.type = function (value) {\n      this.description.type = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the category.\n     * \n     * Contains a short domain nam, for example: \n     * - \"product\" for products\n     * - \"vendor\" for vendors\n     * \n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {module:datarestructor.PropertyStructureDescription}\n     * @example category(\"Product\")\n     */\n    this.category = function (value) {\n      this.description.category = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the optional abbreviation.\n     * \n     * Contains a symbol character or a very short abbreviation of the category.\n     * - \"P\" for products\n     * - \"V\" for vendors\n     * \n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {module:datarestructor.PropertyStructureDescription}\n     * @example abbreviation(\"P\")\n     */\n    this.abbreviation = function (value) {\n      this.description.abbreviation = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the optional path to an image resource.\n     * \n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {module:datarestructor.PropertyStructureDescription}\n     * @example image(\"img/product.png\")\n     */\n    this.image = function (value) {\n      this.description.image = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Sets \"equal mode\" for the property pattern.\n     * \n     * \"propertyPattern\" need to match exactly if this mode is activated.\n     *  It clears propertyPatternTemplateMode which means \"equal\" mode.\n     * @function\n     * @returns {module:datarestructor.PropertyStructureDescription}\n     */\n    this.propertyPatternEqualMode = function () {\n      this.description.propertyPatternTemplateMode = false;\n      return this;\n    };\n    /**\n     * Sets \"template mode\" for the property pattern.\n     * \n     * \"propertyPattern\" can contain variables like {{fieldName}} and\n     * doesn't need to match the property name exactly. If the \"propertyPattern\"\n     * is shorter than the property name, it also matches when the property name\n     * starts with the \"propertyPattern\".\n     * \n     * @function\n     * @returns {module:datarestructor.PropertyStructureDescription}\n     */\n    this.propertyPatternTemplateMode = function () {\n      this.description.propertyPatternTemplateMode = true;\n      return this;\n    };\n    /**\n     * Sets the property name pattern. \n     * \n     * Contains single property names with sub types separated by \".\" without array indices.\n     * May contain variables in double curly brackets.\n     * \n     * Example: \n     * - responses.hits.hits._source.{{fieldName}}\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {module:datarestructor.PropertyStructureDescription}\n     * @example propertyPattern(\"responses.hits.hits._source.{{fieldName}}\")\n     */\n    this.propertyPattern = function (value) {\n      this.description.propertyPattern = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the optional beginning of the id that needs to match.\n     * Matches all indices if set to \"\" (or not called).\n     * \n     * For example:\n     * - \"1.\" will match id=\"1.3.4\" but not \"0.1.2\".\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {module:datarestructor.PropertyStructureDescription}\n     * @example indexStartsWith(\"1.\")\n     */\n    this.indexStartsWith = function (value) {\n      this.description.indexStartsWith = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Overrides the display name of the property.\n     * \n     * If it is not set or set to \"\" then it will be derived from the\n     * last part of original property name starting with an upper case character.\n     *  \n     * For example:\n     * - \"Product\"\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {module:datarestructor.PropertyStructureDescription}\n     * @example displayPropertyName(\"Product\")\n     */\n    this.displayPropertyName = function (value) {\n      this.description.getDisplayNameForPropertyName = createNameExtractFunction(value, this.description);\n      if (isSpecifiedString(value)) {\n        return this;\n      }\n      this.description.getDisplayNameForPropertyName = removeArrayValuePropertyPostfixFunction(\n        this.description.getDisplayNameForPropertyName\n      );\n      this.description.getDisplayNameForPropertyName = upperCaseFirstLetterForFunction(\n        this.description.getDisplayNameForPropertyName\n      );\n      return this;\n    };\n    /**\n     * Overrides the (technical) field name of the property.\n     * \n     * If it is not set or set to \"\" then it will be derived from the\n     * last part of original property name.\n     *  \n     * For example:\n     * - \"product\"\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {module:datarestructor.PropertyStructureDescription}\n     * @example fieldName(\"product\")\n     */\n    this.fieldName = function (value) {\n      this.description.getFieldNameForPropertyName = createNameExtractFunction(value, this.description);\n      return this;\n    };\n    /**\n     * Sets the name of the property, that contains grouped entries. \n     * \n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {module:datarestructor.PropertyStructureDescription}\n     * @example groupName(\"details\")\n     */\n    this.groupName = function (value) {\n      this.description.groupName = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the pattern that describes how to group entries. \n     * \n     * \"groupName\" defines the name of this group.\n     * A pattern may contain variables in double curly brackets {{variable}}.\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {module:datarestructor.PropertyStructureDescription}\n     * @example groupPattern(\"{{type}}-{{category}}\")\n     */\n    this.groupPattern = function (value) {\n      this.description.groupPattern = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the pattern that describes where the group should be moved to. \n     * \n     * Default=\"\"=Group will not be moved.\n     * A pattern may contain variables in double curly brackets {{variable}}.\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {module:datarestructor.PropertyStructureDescription}\n     * @example groupDestinationPattern(\"main-{{category}}\")\n     */\n    this.groupDestinationPattern = function (value) {\n      this.description.groupDestinationPattern = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the name of the group when it had been moved to the destination.\n     * \n     * The default value is the groupName, which will be used when the value is not valid (null or empty)\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {module:datarestructor.PropertyStructureDescription}\n     * @example groupDestinationPattern(\"options\")\n     */\n    this.groupDestinationName = function (value) {\n      this.description.groupDestinationName = withDefault(value, this.description.groupName);\n      return this;\n    };\n    /**\n     * Sets the pattern to be used to remove duplicate entries. \n     * \n     * A pattern may contain variables in double curly brackets {{variable}}.\n     * A pattern may contain variables in double curly brackets {{variable}}.\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {module:datarestructor.PropertyStructureDescription}\n     * @example deduplicationPattern(\"{{category}}--{{type}}--{{index[0]}}--{{index[1]}}--{{fieldName}}\")\n     */\n    this.deduplicationPattern = function (value) {\n      this.description.deduplicationPattern = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Finalizes the settings and builds the  PropertyStructureDescription.\n     * @function\n     * @returns {module:datarestructor.PropertyStructureDescription}\n     */\n    this.build = function () {\n      this.description.matchesPropertyName = createFunctionMatchesPropertyName(this.description);\n      if (this.description.getDisplayNameForPropertyName == null) {\n        this.displayPropertyName(\"\");\n      }\n      if (this.description.getFieldNameForPropertyName == null) {\n        this.fieldName(\"\");\n      }\n      if (this.description.groupDestinationName == null) {\n        this.groupDestinationName(\"\");\n      }\n      return this.description;\n    };\n  }\n\n  function createNameExtractFunction(value, description) {\n    if (isSpecifiedString(value)) {\n      return function () {\n        return value;\n      };\n    }\n    if (description.propertyPatternTemplateMode) {\n      var patternToMatch = description.propertyPattern; // closure (closed over) parameter\n      return extractNameUsingTemplatePattern(patternToMatch);\n    }\n    return extractNameUsingRightMostPropertyNameElement();\n  }\n\n  function createFunctionMatchesPropertyName(description) {\n    var propertyPatternToMatch = description.propertyPattern; // closure (closed over) parameter\n    if (!isSpecifiedString(propertyPatternToMatch)) {\n      return function () {\n        return false; // Without a propertyPattern, no property will match (deactivated mark/identify).\n      };\n    }\n    if (description.propertyPatternTemplateMode) {\n      return function (propertyNameWithoutArrayIndices) {\n        return templateModePatternRegexForPattern(propertyPatternToMatch).exec(propertyNameWithoutArrayIndices) != null;\n      };\n    }\n    return function (propertyNameWithoutArrayIndices) {\n      return propertyNameWithoutArrayIndices === propertyPatternToMatch;\n    };\n  }\n\n  function rightMostPropertyNameElement(propertyName) {\n    var regularExpression = new RegExp(\"(\\\\w+)$\", \"gi\");\n    var match = propertyName.match(regularExpression);\n    if (match != null) {\n      return match[0];\n    }\n    return propertyName;\n  }\n\n  function upperCaseFirstLetter(value) {\n    if (value.length > 1) {\n      return value.charAt(0).toUpperCase() + value.slice(1);\n    }\n    return value;\n  }\n\n  function upperCaseFirstLetterForFunction(nameExtractFunction) {\n    return function (propertyName) {\n      return upperCaseFirstLetter(nameExtractFunction(propertyName));\n    };\n  }\n\n  function removeArrayValuePropertyPostfixFunction(nameExtractFunction) {\n    return function (propertyName) {\n      var name = nameExtractFunction(propertyName);\n      name = name != null ? name : \"\";\n      return name.replace(\"_comma_separated_values\", \"\");\n    };\n  }\n\n  function extractNameUsingTemplatePattern(propertyPattern) {\n    return function (propertyName) {\n      var regex = templateModePatternRegexForPatternAndVariable(propertyPattern, \"{{fieldName}}\");\n      var match = regex.exec(propertyName);\n      if (match && match[1] != \"\") {\n        return match[1];\n      }\n      return rightMostPropertyNameElement(propertyName);\n    };\n  }\n\n  function extractNameUsingRightMostPropertyNameElement() {\n    return function (propertyName) {\n      return rightMostPropertyNameElement(propertyName);\n    };\n  }\n\n  function templateModePatternRegexForPattern(propertyPatternToUse) {\n    var placeholderInDoubleCurlyBracketsRegEx = new RegExp(\"\\\\\\\\\\\\{\\\\\\\\\\\\{[-\\\\w]+\\\\\\\\\\\\}\\\\\\\\\\\\}\", \"gi\");\n    return templateModePatternRegexForPatternAndVariable(propertyPatternToUse, placeholderInDoubleCurlyBracketsRegEx);\n  }\n\n  function templateModePatternRegexForPatternAndVariable(propertyPatternToUse, variablePattern) {\n    var pattern = escapeCharsForRegEx(propertyPatternToUse);\n    if (typeof variablePattern === \"string\") {\n      variablePattern = escapeCharsForRegEx(variablePattern);\n    }\n    pattern = pattern.replace(variablePattern, \"([-\\\\w]+)\");\n    pattern = \"^\" + pattern;\n    return new RegExp(pattern, \"i\");\n  }\n\n  function escapeCharsForRegEx(characters) {\n    var nonWordCharactersRegEx = new RegExp(\"([^-\\\\w])\", \"gi\");\n    return characters.replace(nonWordCharactersRegEx, \"\\\\$1\");\n  }\n\n  function withDefault(value, defaultValue) {\n    return isSpecifiedString(value) ? value : defaultValue;\n  }\n\n  function isSpecifiedString(value) {\n    return typeof value === \"string\" && value != null && value != \"\";\n  }\n\n  return PropertyStructureDescription;\n})();\n\n/**\n * Adds a group item/entry to the {@link module:datarestructor.DescribedEntry}.\n * \n * @callback module:datarestructor.addGroupEntryFunction\n * @param {String} groupName name of the group that should be added\n * @param {module:datarestructor.DescribedEntry} describedEntry entry that should be added to the group\n */\n\n/**\n * Adds some group items/entries to the {@link module:datarestructor.DescribedEntry}.\n * \n * @callback module:datarestructor.addGroupEntriesFunction\n * @param {String} groupName name of the group that should be added\n * @param {module:datarestructor.DescribedEntry[]} describedEntry entries that should be added to the group\n */\n\n/**\n * @typedef {Object} module:datarestructor.DescribedEntry\n * @property {string} category - category of the result from the PropertyStructureDescription using a short name or e.g. a symbol character\n * @property {string} type - type of the result from PropertyStructureDescription\n * @property {string} [abbreviation=\"\"] - one optional character, a symbol character or a short abbreviation of the category\n * @property {string} [image=\"\"] - one optional path to an image resource\n * @property {string} index - array of numbers containing the split index. Example: \"responses[2].hits.hits[4]._source.name\" leads to an array with the two elements: [2,4]\n * @property {string} displayName - display name extracted from the point separated hierarchical property name, e.g. \"Name\"\n * @property {string} fieldName - field name extracted from the point separated hierarchical property name, e.g. \"name\"\n * @property {string} value - content of the field\n * @property {string[]} groupNames - array of names of all dynamically added properties representing groups\n * @property {module:datarestructor.addGroupEntryFunction} addGroupEntry - function, that adds an entry to the given group. If the group does not exist, it will be created.\n * @property {module:datarestructor.addGroupEntriesFunction} addGroupEntries - function, that adds entries to the given group. If the group does not exist, it will be created.\n * @property {boolean} _isMatchingIndex - true, when _identifier.index matches the described \"indexStartsWith\"\n * @property {Object} _identifier - internal structure for identifier. Avoid using it outside since it may change.\n * @property {string} _identifier.index - array indices in hierarchical order separated by points, e.g. \"0.0\"\n * @property {string} _identifier.value - the (single) value of the \"flattened\" property, e.g. \"Smith\"\n * @property {string} _identifier.propertyNameWithArrayIndices - the \"original\" flattened property name in hierarchical order separated by points, e.g. \"responses[0].hits.hits[0]._source.name\"\n * @property {string} _identifier.propertyNameWithoutArrayIndices - same as propertyNamesWithArrayIndices but without array indices, e.g. \"responses.hits.hits._source.name\"\n * @property {string} _identifier.groupId - Contains the resolved groupPattern from the PropertyStructureDescription. Entries with the same id will be grouped into the \"groupName\" of the PropertyStructureDescription.\n * @property {string} _identifier.groupDestinationId - Contains the resolved groupDestinationPattern from the PropertyStructureDescription. Entries with this id will be moved to the given destination group.\n * @property {string} _identifier.deduplicationId - Contains the resolved deduplicationPattern from the PropertyStructureDescription. Entries with the same id will be considered to be a duplicate and hence removed.\n * @property {Object} _description - PropertyStructureDescription for internal use. Avoid using it outside since it may change.\n */\n\n/**\n * Returns a field value of the given {@link module:datarestructor.DescribedEntry}.\n * \n * @callback module:datarestructor.stringFieldOfDescribedEntryFunction\n * @param {module:datarestructor.DescribedEntry} entry described entry that contains the field that should be returned\n * @returns {String} field value \n */\n\ndatarestructor.DescribedEntryCreator = (function () {\n  \"use strict\";\n\n  var removeArrayBracketsRegEx = new RegExp(\"\\\\[\\\\d+\\\\]\", \"gi\");\n\n  /**\n   * Creates a {@link module:datarestructor.DescribedEntry}.\n   * @constructs DescribedEntryCreator\n   * @alias module:datarestructor.DescribedEntryCreator\n   */\n  function DescribedEntry(entry, description) {\n    var indices = indicesOf(entry.name);\n    var propertyNameWithoutArrayIndices = entry.name.replace(removeArrayBracketsRegEx, \"\");\n    var templateResolver = new template_resolver.Resolver(this);\n    this.category = description.category;\n    this.type = description.type;\n    this.abbreviation = description.abbreviation;\n    this.image = description.image;\n    /**\n     * Array of numbers containing the split index.\n     * Example: \"responses[2].hits.hits[4]._source.name\" leads to an array with two elements: [2,4]\n     * This is the public version of the internal variable _identifier.index, which contains in contrast all index elements in one point separated string (e.g. \"2.4\").\n     * @type {number[]}\n     */\n    this.index = indices.numberArray;\n    this.displayName = description.getDisplayNameForPropertyName(propertyNameWithoutArrayIndices);\n    this.fieldName = description.getFieldNameForPropertyName(propertyNameWithoutArrayIndices);\n    this.value = entry.value;\n    this.groupNames = [];\n    this._isMatchingIndex = indices.pointDelimited.indexOf(description.indexStartsWith) == 0;\n    this._description = description;\n\n    this._identifier = {\n      index: indices.pointDelimited,\n      propertyNameWithArrayIndices: entry.name,\n      propertyNameWithoutArrayIndices: propertyNameWithoutArrayIndices,\n      groupId: \"\",\n      groupDestinationId: \"\",\n      deduplicationId: \"\"\n    };\n    this._identifier.groupId = templateResolver.replaceResolvableFields(\n      description.groupPattern,\n      templateResolver.resolvableFieldsOfAll(this, this._description, this._identifier)\n    );\n    this._identifier.groupDestinationId = templateResolver.replaceResolvableFields(\n      description.groupDestinationPattern,\n      templateResolver.resolvableFieldsOfAll(this, this._description, this._identifier)\n    );\n    this._identifier.deduplicationId = templateResolver.replaceResolvableFields(\n      description.deduplicationPattern,\n      templateResolver.resolvableFieldsOfAll(this, this._description, this._identifier)\n    );\n\n    /**\n     * Adds an entry to the given group. If the group does not exist, it will be created.\n     * @param {String} groupName name of the group that should be added\n     * @param {module:datarestructor.DescribedEntry} describedEntry entry that should be added to the group\n     */\n    this.addGroupEntry = function(groupName, describedEntry) {\n      this.addGroupEntries(groupName, [describedEntry]);\n    };\n\n    /**\n     * Adds entries to the given group. If the group does not exist, it will be created.\n     * @param {String} groupName\n     * @param {module:datarestructor.DescribedEntry[]} describedEntries\n     */\n    this.addGroupEntries = function(groupName, describedEntries) {\n      if (!this[groupName]) {\n        this.groupNames.push(groupName);\n        this[groupName] = [];\n      }\n      var index;\n      var describedEntry;\n      for (index = 0; index < describedEntries.length; index += 1) {\n        describedEntry = describedEntries[index];\n        this[groupName].push(describedEntry);\n      }\n    };\n  }\n  /**\n   * @typedef {Object} module:datarestructor.ExtractedIndices\n   * @property {string} pointDelimited - bracket indices separated by points\n   * @property {number[]} numberArray as array of numbers\n   */\n\n  /**\n   * Returns \"1.12.123\" and [1,12,123] for \"results[1].hits.hits[12].aggregates[123]\".\n   *\n   * @param {String} fullPropertyName\n   * @return {module:datarestructor.ExtractedIndices} extracted indices in different representations\n   * @protected\n   * @memberof module:datarestructor.DescribedEntryCreator\n   */\n  function indicesOf(fullPropertyName) {\n    var arrayBracketsRegEx = new RegExp(\"\\\\[(\\\\d+)\\\\]\", \"gi\");\n    return indicesOfWithRegex(fullPropertyName, arrayBracketsRegEx);\n  }\n\n  /**\n   * Returns \"1.12.123\" and [1,12,123] for \"results[1].hits.hits[12].aggregates[123]\".\n   *\n   * @param {string} fullPropertyName\n   * @param {RegExp} regexWithOneNumberGroup\n   * @return {module:datarestructor.ExtractedIndices} extracted indices in different representations\n   * @protected\n   * @memberof module:datarestructor.DescribedEntryCreator\n   */\n  function indicesOfWithRegex(fullPropertyName, regexWithOneNumberGroup) {\n    var pointDelimited = \"\";\n    var numberArray = [];\n    var match;\n    do {\n      match = regexWithOneNumberGroup.exec(fullPropertyName);\n      if (match) {\n        if (pointDelimited.length > 0) {\n          pointDelimited += \".\";\n        }\n        pointDelimited += match[1];\n        numberArray.push(parseInt(match[1]));\n      }\n    } while (match);\n    return { pointDelimited: pointDelimited, numberArray: numberArray };\n  }\n\n  return DescribedEntry;\n})();\n\n  /**\n   * @typedef {Object} module:datarestructor.TransformConfig\n   * @property {boolean} debugMode enables/disables detailed logging\n   * @property {number} [maxRecursionDepth=8] Maximum recursion depth\n   * @property {number} [removeDuplicationAboveRecursionDepth=1]  Duplications will be removed above the given recursion depth value and remain unchanged below it.\n   */\n\n\ndatarestructor.Transform = (function () {\n  \"use strict\";\n\n  /**\n   * Main class for the data transformation.\n   * @param {module:datarestructor.PropertyStructureDescription[]} descriptions\n   * @constructs Transform\n   * @alias module:datarestructor.Transform\n   */\n  function Transform(descriptions) {\n    /**\n     * Descriptions of the input data that define the behaviour of the transformation.\n     * @type {module:datarestructor.DescribedEntry[]}\n     */\n    this.descriptions = descriptions;\n    /**\n     * Configuration for the transformation.\n     * @protected\n     * @type {module:datarestructor.TransformConfig}\n     */\n    this.config = {\n      /**\n       * Debug mode switch, that enables/disables detailed logging.\n       * @protected\n       * @type {boolean}\n       */\n      debugMode: false,\n      /**\n       * Maximum recursion depth. Defaults to 8.\n       * @protected\n       * @type {number}\n       */\n      maxRecursionDepth: 8,\n      /**\n       * Duplications will be removed above the given recursion depth and remain below it.\n       * Defaults to 1.\n       *\n       * Since fields can contain groups of fields that can contain groups of fields..., cyclic\n       * data structures are possible by nature and will lead to duplications. Some of them\n       * might be intended e.g. to take one (sub-)field with all (duplicated) groups.\n       * To restrict duplications and improve performance it is beneficial to define a\n       * recursion depth, above which further duplication won't be used and should be removed/avoided.\n       *\n       * @protected\n       * @type {number}\n       */\n      removeDuplicationAboveRecursionDepth: 1\n    };\n    /**\n     * Enables debug mode. Logs additional information.\n     * @returns {module:datarestructor.Transform}\n     */\n    this.enableDebugMode = function () {\n      this.config.debugMode = true;\n      return this;\n    };\n\n    /**\n     * Sets the maximum recursion depth. Defaults to 8 if not set.\n     * @param {number} value non negative number.\n     * @returns {module:datarestructor.Transform}\n     */\n    this.setMaxRecursionDepth = function (value) {\n      if (typeof value !== \"number\" || value < 0) {\n        throw \"Invalid max recursion depth value: \" + value;\n      }\n      this.config.maxRecursionDepth = value;\n      return this;\n    };\n    /**\n     * Sets the recursion depth above which duplication will be removed. Duplications below it remain unchanged.\n     * Defaults to 1.\n     *\n     * Since fields can contain groups of fields that can contain groups of fields..., cyclic\n     * data structures are possible by nature and will lead to duplications. Some of them\n     * might be intended e.g. to take one (sub-)field with all (duplicated) groups.\n     * To restrict duplications and improve performance it is beneficial to define a\n     * recursion depth, above which further duplication won't be used and should be removed/avoided.\n     *\n     * @param {number} value non negative number.\n     * @returns {module:datarestructor.Transform}\n     */\n    this.setRemoveDuplicationAboveRecursionDepth = function (value) {\n      if (typeof value !== \"number\" || value < 0) {\n        throw \"Invalid remove duplications above recursion depth value: \" + value;\n      }\n      this.config.removeDuplicationAboveRecursionDepth = value;\n      return this;\n    };\n    /**\n     * \"Assembly line\", that takes the (pared JSON) data and processes it using all given descriptions in their given order.\n     * @param {object} data - parsed JSON data or any other data object\n     * @returns {module:datarestructor.DescribedEntry[]}\n     * @example\n     * var allDescriptions = [];\n     * allDescriptions.push(summariesDescription());\n     * allDescriptions.push(detailsDescription());\n     * var result = new datarestructor.Transform(allDescriptions).processJson(jsonData);\n     */\n    this.processJson = function (data) {\n      return processJsonUsingDescriptions(data, this.descriptions, this.config);\n    };\n  }\n\n  /**\n   * \"Assembly line\", that takes the jsonData and processes it using all given descriptions in their given order.\n   * @param {object} jsonData parsed JSON data or any other data object\n   * @param {module:datarestructor.PropertyStructureDescription[]} descriptions - already grouped entries\n   * @param {module:datarestructor.TransformConfig} config configuration for the data transformation\n   * @returns {module:datarestructor.DescribedEntry[]}\n   * @protected\n   * @memberof module:datarestructor.Transform\n   */\n  function processJsonUsingDescriptions(jsonData, descriptions, config) {\n    // \"Flatten\" the hierarchical input json to an array of property names (point separated \"folders\") and values.\n    var processedData = internal_object_tools.flattenToArray(jsonData);\n    // Fill in properties ending with the name \"_comma_separated_values\" for array values to make it easier to display them.\n    processedData = fillInArrayValues(processedData);\n\n    if (config.debugMode) {\n      console.log(\"flattened data with array values:\");\n      console.log(processedData);\n    }\n\n    // Mark, identify and harmonize the flattened data by applying one description after another in their given order.\n    var describedData = [];\n    var descriptionIndex, description, dataWithDescription;\n    for (descriptionIndex = 0; descriptionIndex < descriptions.length; descriptionIndex += 1) {\n      description = descriptions[descriptionIndex];\n      // Filter all entries that match the current description and enrich them with it\n      dataWithDescription = extractEntriesByDescription(processedData, description);\n      // Remove duplicate entries where a deduplicationPattern is described\n      describedData = deduplicateFlattenedData(describedData, dataWithDescription);\n    }\n    processedData = describedData;\n\n    if (config.debugMode) {\n      console.log(\"describedData data:\");\n      console.log(processedData);\n    }\n\n    // Group entries where a groupPattern is described\n    processedData = groupFlattenedData(processedData);\n\n    if (config.debugMode) {\n      console.log(\"grouped describedData data:\");\n      console.log(processedData);\n    }\n\n    // Move group entries where a groupDestinationPattern is described\n    processedData = applyGroupDestinationPattern(processedData);\n\n    if (config.debugMode) {\n      console.log(\"moved grouped describedData data:\");\n      console.log(processedData);\n    }\n\n    // Turns the grouped object back into an array of DescribedEntry-Objects\n    processedData = propertiesAsArray(processedData);\n\n    // Converts the internal described entries  into described fields\n    processedData = toDescribedFields(processedData, config);\n\n    if (config.debugMode) {\n      console.log(\"transformed result:\");\n      console.log(processedData);\n    }\n\n    return processedData;\n  }\n\n  /**\n   * Takes two arrays of objects, e.g. [{id: B, value: 2},{id: C, value: 3}]\n   * and [{id: A, value: 1},{id: B, value: 4}] and merges them into one:\n   * [{id: C, value: 3},{id: A, value: 1},{id: B, value: 4}]\n   *\n   * Entries with the same id (\"duplicates\") will be overwritten.\n   * Only the last element with the same id remains. The order is\n   * determined by the order of the array elements, whereas the first\n   * array comes before the second one. This means, that entries with the\n   * same id in the second array overwrite entries in the first array,\n   * and entries that occur later in the array overwrite earlier ones,\n   * if they have the same id.\n   *\n   * The id is extracted from every element using the given function.\n   *\n   * @param {module:datarestructor.DescribedEntry[]} entries\n   * @param {module:datarestructor.DescribedEntry[]} entriesToMerge\n   * @param {module:datarestructor.stringFieldOfDescribedEntryFunction} idOfElementFunction returns the id of an DescribedEntry\n   * @protected\n   * @memberof module:datarestructor.Transform\n   */\n  function mergeFlattenedData(entries, entriesToMerge, idOfElementFunction) {\n    var entriesToMergeById = asIdBasedObject(entriesToMerge, idOfElementFunction);\n    var merged = [];\n    var index, entry, id;\n    for (index = 0; index < entries.length; index += 1) {\n      entry = entries[index];\n      id = idOfElementFunction(entry);\n      if (id == null || id === \"\" || entriesToMergeById[id] == null) {\n        merged.push(entry);\n      }\n    }\n    for (index = 0; index < entriesToMerge.length; index += 1) {\n      entry = entriesToMerge[index];\n      merged.push(entry);\n    }\n    return merged;\n  }\n\n  /**\n   * Takes two arrays of objects, e.g. [{id: B, value: 2},{id: C, value: 3}]\n   * and [{id: A, value: 1},{id: B, value: 4}] and merges them into one:\n   * [{id: C, value: 3},{id: A, value: 1},{id: B, value: 4}]\n   *\n   * Entries with the same id (\"duplicates\") will be overwritten.\n   * Only the last element with the same id remains. The order is\n   * determined by the order of the array elements, whereas the first\n   * array comes before the second one. This means, that entries with the\n   * same id in the second array overwrite entries in the first array,\n   * and entries occurring later in the array overwrite earlier ones,\n   * if they have the same id.\n   *\n   * \"entriesToMerge\" will be returned directly, if \"entries\" is null or empty.\n   *\n   * The id is extracted from every element using their deduplication pattern (if available).\n   *\n   * @param {module:datarestructor.DescribedEntry[]} entries\n   * @param {module:datarestructor.DescribedEntry[]} entriesToMerge\n   * @param {module:datarestructor.stringFieldOfDescribedEntryFunction} idOfElementFunction returns the id of an DescribedEntry\n   * @see mergeFlattenedData\n   * @protected\n   * @memberof module:datarestructor.Transform\n   */\n  function deduplicateFlattenedData(entries, entriesToMerge) {\n    if (entries == null || entries.length == 0) {\n      return entriesToMerge;\n    }\n    var idOfElementFunction = function (entry) {\n      return entry._identifier.deduplicationId;\n    };\n    return mergeFlattenedData(entries, entriesToMerge, idOfElementFunction);\n  }\n\n  /**\n   * Converts the given elements to an object, that provides these\n   * entries by their id. For example, [{id: A, value: 1}] becomes\n   * result['A'] = 1.\n   * @param {module:datarestructor.DescribedEntry[]} elements of DescribedEntry elements\n   * @param {module:datarestructor.stringFieldOfDescribedEntryFunction} idOfElementFunction returns the id of an DescribedEntry\n   * @return {module:datarestructor.DescribedEntry[] entries indexed by id\n   * @protected\n   * @memberof module:datarestructor.Transform\n   */\n  function asIdBasedObject(elements, idOfElementFunction) {\n    var idIndexedObject = new Object();\n    for (var index = 0; index < elements.length; index++) {\n      var element = elements[index];\n      idIndexedObject[idOfElementFunction(element)] = element;\n    }\n    return idIndexedObject;\n  }\n\n  /**\n   * Converts the given elements into an object, that provides these\n   * entries by their id (determined by the entry's groupPattern).\n   * For example, [{id: A, value: 1}] becomes result['A'] = 1.\n   *\n   * Furthermore, this function creates a group property (determined by the entry's groupName)\n   * and collects all related elements (specified by their group pattern) in it.\n   *\n   * @param {module:datarestructor.DescribedEntry[]} elements of DescribedEntry elements\n   * @return {module:datarestructor.DescribedEntry[] entries indexed by id\n   * @protected\n   * @memberof module:datarestructor.Transform\n   */\n  function groupFlattenedData(flattenedData) {\n    return groupById(\n      flattenedData,\n      function (entry) {\n        return entry._identifier.groupId;\n      },\n      function (entry) {\n        return entry._description.groupName;\n      }\n    );\n  }\n\n  /**\n   * Converts the given elements into an object, that provides these\n   * entries by their id. For example, [{id: A, value: 1}] becomes\n   * result['A'] = 1. Furthermore, this function creates a group property (with the name )\n   * and collects all related elements (specified by their group pattern) in it.\n   *\n   * @param {module:datarestructor.DescribedEntry[]} elements of DescribedEntry elements\n   * @param {module:datarestructor.stringFieldOfDescribedEntryFunction} groupNameOfElementFunction function, that returns the name of the group property that will be created inside the \"main\" element.\n   * @param {module:datarestructor.stringFieldOfDescribedEntryFunction} groupIdOfElementFunction returns the group id of an DescribedEntry\n   * @return {module:datarestructor.DescribedEntry[] entries indexed by id\n   * @protected\n   * @memberof module:datarestructor.Transform\n   */\n  function groupById(elements, groupIdOfElementFunction, groupNameOfElementFunction) {\n    var groupedResult = new Object();\n    for (var index = 0; index < elements.length; index++) {\n      var element = elements[index];\n      var groupId = groupIdOfElementFunction(element);\n      if (groupId === \"\") {\n        continue;\n      }\n      var groupName = groupNameOfElementFunction(element);\n      if (groupName == null || groupName === \"\") {\n        continue;\n      }\n      if (!groupedResult[groupId]) {\n        groupedResult[groupId] = element;\n      }\n      groupedResult[groupId].addGroupEntry(groupName, element);\n    }\n    return groupedResult;\n  }\n\n  /**\n   * Extracts entries out of \"flattened\" JSON data and provides an array of objects.\n   * @param {Object[]} flattenedData - flattened json from search query result\n   * @param {string} flattenedData[].name - name of the property in hierarchical order separated by points\n   * @param {string} flattenedData[].value - value of the property as string\n   * @param {module:datarestructor.PropertyStructureDescription} - description of structure of the entries that should be extracted\n   * @return {module:datarestructor.DescribedEntry[]}\n   * @protected\n   * @memberof module:datarestructor.Transform\n   */\n  function extractEntriesByDescription(flattenedData, description) {\n    var removeArrayBracketsRegEx = new RegExp(\"\\\\[\\\\d+\\\\]\", \"gi\");\n    var filtered = [];\n\n    flattenedData.filter(function (entry) {\n      var propertyNameWithoutArrayIndices = entry.name.replace(removeArrayBracketsRegEx, \"\");\n      if (description.matchesPropertyName(propertyNameWithoutArrayIndices)) {\n        var describedEntry = new datarestructor.DescribedEntryCreator(entry, description);\n        if (describedEntry._isMatchingIndex) {\n          filtered.push(describedEntry);\n        }\n      }\n    });\n    return filtered;\n  }\n\n  /**\n   * Takes already grouped {@link module:datarestructor.DescribedEntry} objects and\n   * uses their \"_identifier.groupDestinationId\" (if exists)\n   * to move groups to the given destination.\n   *\n   * This is useful, if separately described groups like \"summary\" and \"detail\" should be put together,\n   * so that every summery contains a group with the regarding details.\n   *\n   * @param {module:datarestructor.DescribedEntry[]} groupedObject - already grouped entries\n   * @return {module:datarestructor.DescribedEntry[]}\n   * @protected\n   * @memberof module:datarestructor.Transform\n   */\n  function applyGroupDestinationPattern(groupedObject) {\n    var keys = Object.keys(groupedObject);\n    var keysToDelete = [];\n    for (var index = 0; index < keys.length; index++) {\n      var key = keys[index];\n      var entry = groupedObject[key];\n      if (entry._description.groupDestinationPattern != \"\") {\n        var destinationKey = entry._identifier.groupDestinationId;\n        if (groupedObject[destinationKey] != null) {\n          var newGroup = entry[entry._description.groupName];\n          groupedObject[destinationKey].addGroupEntries(entry._description.groupDestinationName, newGroup);\n          keysToDelete.push(key);\n        }\n      }\n    }\n    // delete all moved entries that had been collected by their key\n    for (index = 0; index < keysToDelete.length; index += 1) {\n      var keyToDelete = keysToDelete[index];\n      delete groupedObject[keyToDelete];\n    }\n    return groupedObject;\n  }\n\n  /**\n   * Fills in extra \"_comma_separated_values\" properties into the flattened data\n   * for properties that end with an array. E.g. response.hits.hits.tags[0]=\"active\" and response.hits.hits.tags[0]=\"ready\"\n   * will lead to the extra element \"response.hits.hits.tags_comma_separated_values=\"active, ready\".\n   *\n   * @return flattened data with filled in \"_comma_separated_values\" properties\n   * @protected\n   * @memberof module:datarestructor.Transform\n   */\n  function fillInArrayValues(flattenedData) {\n    var trailingArrayIndexRegEx = new RegExp(\"\\\\[\\\\d+\\\\]$\", \"gi\");\n    var result = [];\n    var lastArrayProperty = \"\";\n    var lastArrayPropertyValue = \"\";\n\n    flattenedData.filter(function (entry) {\n      if (!entry.name.match(trailingArrayIndexRegEx)) {\n        if (lastArrayProperty !== \"\") {\n          result.push({ name: lastArrayProperty + \"_comma_separated_values\", value: lastArrayPropertyValue });\n          lastArrayProperty = \"\";\n        }\n        result.push(entry);\n        return;\n      }\n      var propertyNameWithoutTrailingArrayIndex = entry.name.replace(trailingArrayIndexRegEx, \"\");\n      if (lastArrayProperty === propertyNameWithoutTrailingArrayIndex) {\n        lastArrayPropertyValue += \", \" + entry.value;\n      } else {\n        if (lastArrayProperty !== \"\") {\n          result.push({ name: lastArrayProperty + \"_comma_separated_values\", value: lastArrayPropertyValue });\n          lastArrayProperty = \"\";\n        }\n        lastArrayProperty = propertyNameWithoutTrailingArrayIndex;\n        lastArrayPropertyValue = entry.value;\n      }\n      result.push(entry);\n    });\n    return result;\n  }\n\n  function propertiesAsArray(groupedData) {\n    var result = [];\n    var propertyNames = Object.keys(groupedData);\n    for (var propertyIndex = 0; propertyIndex < propertyNames.length; propertyIndex++) {\n      var propertyName = propertyNames[propertyIndex];\n      var propertyValue = groupedData[propertyName];\n      result.push(propertyValue);\n    }\n    return result;\n  }\n\n  /**\n   * Converts described entries (internal data structure) to described fields (external data structure).\n   * Since the structure of a described field is hierarchical, every field needs to be converted\n   * in a recursive manner. The maximum recursion depth is taken as the second parameter.\n   * @param {module:datarestructor.DescribedEntry[]} describedEntries\n   * @param {module:datarestructor.TransformConfig} config configuration for the data transformation\n   * @returns {module:described_field.DescribedDataField[]}\n   * @protected\n   * @memberof module:datarestructor.Transform\n   */\n  function toDescribedFields(describedEntries, config) {\n    var result = [];\n    var index;\n    var describedEntity;\n    for (index = 0; index < describedEntries.length; index += 1) {\n      describedEntity = describedEntries[index];\n      result.push(toDescribedField(describedEntity, {recursionDepth:0, config: config, groupToSkip:\"\"}));\n    }\n    return result;\n  }\n\n  /**\n   * Describes the context type for the recursive DescribedDataField conversion,\n   * that contains everything that needs to be accessible throughout recursion regardless of the\n   * recursion depth.\n   *\n   * @typedef {Object} module:datarestructor.DescribedFieldRecursionContext\n   * @param {number} recursionDepth current recursion depth\n   * @param {String} groupToSkip name of a group to skip or \"\" when no group should be skipped. \n   * @param {module:datarestructor.TransformConfig} config configuration for the data transformation\n   */\n\n  /**\n   * Converts a internal described entry to a newly created public described field.\n   * Since the structure of a described field is hierarchical, this function is called recursively.\n   * Because the internal described entries may very likely contain cyclic references, the depth of recursion\n   * needs to be limited. Therefore, the current recursion depth is taken as second parameter\n   * and the maximum recursion depth is taken as third parameter.\n   * @param {module:datarestructor.DescribedEntry} entry the internal entry that will be converted\n   * @param {module:datarestructor.DescribedFieldRecursionContext} recursionContext context contains everything that needs to be accessible throughout the recursion.\n   * @returns {module:described_field.DescribedDataField}\n   * @protected\n   * @memberof module:datarestructor.Transform\n   */\n  function toDescribedField(entry, recursionContext) {\n    var field = new described_field.DescribedDataFieldBuilder()\n      .category(entry.category)\n      .type(entry.type)\n      .abbreviation(entry.abbreviation)\n      .image(entry.image)\n      .index(entry.index)\n      .displayName(entry.displayName)\n      .fieldName(entry.fieldName)\n      .value(entry.value)\n      .build();\n    if (recursionContext.recursionDepth > recursionContext.config.maxRecursionDepth) {\n      return field;\n    }\n    var nextRecursionContext = null;\n    var duplicateGroupNameToSkip = \"\";\n    var fieldGroups = new described_field.DescribedDataFieldGroup(field);\n    forEachGroupEntry(entry, function (groupName, groupEntry, allGroupEntries) {\n      if (recursionContext.groupToSkip === groupName) {\n        if (recursionContext.config.debugMode) {\n          console.log(\"Removed duplicate group \" + groupName + \" at recursion depth \" + recursionContext.recursionDepth);\n        }\n        return;\n      }\n      duplicateGroupNameToSkip = \"\";\n      if (recursionContext.recursionDepth >= recursionContext.config.removeDuplicationAboveRecursionDepth) {\n        duplicateGroupNameToSkip = arraysEqual(groupEntry[groupName], allGroupEntries, describedFieldEqual)? groupName : \"\";\n      }\n      nextRecursionContext = {recursionDepth: recursionContext.recursionDepth + 1, config: recursionContext.config, groupToSkip: duplicateGroupNameToSkip};\n      fieldGroups.addGroupEntry(groupName, toDescribedField(groupEntry, nextRecursionContext));\n    });\n    return field;\n  }\n\n  function describedFieldEqual(a, b) {\n    return (\n      defaultEmpty(a.category) === defaultEmpty(b.category) &&\n      defaultEmpty(a.type) === defaultEmpty(b.type) &&\n      a.fieldName === b.fieldName &&\n      a.value === b.value\n    );\n  }\n\n  function defaultEmpty(value) {\n    return defaultValue(value, \"\");\n  }\n\n  function defaultValue(value, valueAsDefault) {\n    if (typeof value === \"undefined\" || !value) {\n      return valueAsDefault;\n    }\n    return value;\n  }\n\n  // Reference: https://stackoverflow.com/questions/3115982/how-to-check-if-two-arrays-are-equal-with-javascript/16430730\n  // Added \"elementEqualFunction\" to implement equal object detection.\n  // Arrays are assumed to be sorted. Differently ordered entries are treated as not equal.\n  function arraysEqual(a, b, elementEqualFunction) {\n    if (a === b) return true;\n    if (a == null || b == null) return false;\n    if (a.length !== b.length) return false;\n\n    for (var i = 0; i < a.length; ++i) {\n      if (!elementEqualFunction(a[i], b[i])) return false;\n    }\n    return true;\n  }\n\n  /**\n   * Takes the full qualified original property name and extracts a simple name out of it.\n   *\n   * @callback module:datarestructor.onEntryFoundFunction\n   * @param {string} groupName name of the group where the entry had been found.\n   * @param {module:datarestructor.DescribedEntry} foundEntry the found entry itself.\n   * @param {module:datarestructor.DescribedEntry[]} allEntries the array of all entries where the found entry is an element of.\n   */\n\n  /**\n   * Traverses through all groups and their entries and calls the given function on every found entry\n   * with the group name and the entry itself as parameters.\n   * @param {module:datarestructor.DescribedEntry} rootEntry\n   * @param {module:datarestructor.onEntryFoundFunction} onFoundEntry\n   * @protected\n   * @memberof module:datarestructor.Transform\n   */\n  function forEachGroupEntry(rootEntry, onFoundEntry) {\n    var groupIndex, entryIndex;\n    var groupName, entry;\n    for (groupIndex = 0; groupIndex < rootEntry.groupNames.length; groupIndex += 1) {\n      groupName = rootEntry.groupNames[groupIndex];\n      for (entryIndex = 0; entryIndex < rootEntry[groupName].length; entryIndex += 1) {\n        entry = rootEntry[groupName][entryIndex];\n        onFoundEntry(groupName, entry, rootEntry[groupName]);\n      }\n    }\n  }\n  return Transform;\n}());\n\n/**\n * Main fassade for the data restructor as static function(s).\n * \n * @example \n * var allDescriptions = [];\n * allDescriptions.push(summariesDescription());\n * allDescriptions.push(detailsDescription());\n * var result = datarestructor.Restructor.processJsonUsingDescriptions(jsonData, allDescriptions);\n * @namespace module:datarestructor.Restructor\n */\ndatarestructor.Restructor = {};\n/**\n * Static fassade function for the \"Assembly line\", that takes the jsonData and processes it using all given descriptions in their given order.\n * @param {object} jsonData - parsed JSON data or any other data object\n * @param {module:datarestructor.PropertyStructureDescription[]} descriptions - already grouped entries\n * @param {boolean} debugMode - false=default=off, true=write additional logs for detailed debugging\n * @returns {module:datarestructor.DescribedEntry[]}\n * @memberof module:datarestructor.Restructor\n * @deprecated since v3.1.0, please use \"new datarestructor.Transform(descriptions).processJson(jsonData)\".\n */\ndatarestructor.Restructor.processJsonUsingDescriptions = function(jsonData, descriptions, debugMode) {\n  var restructor = new datarestructor.Transform(descriptions);\n  if (debugMode) {\n    restructor.enableDebugMode();\n  }\n  return restructor.processJson(jsonData);\n};","\"use strict\";\nrequire(\"../../lib/js/polyfills/isArrayPolyfill.js\");\nrequire(\"../../lib/js/polyfills/arrayFilterPolyfill.js\");\nrequire(\"../../lib/js/polyfills/indexOfPolyfill.js\");\nrequire(\"../../lib/js/polyfills/objectKeysPolyfill.js\");\nvar datarestructor = require(\"../../src/js/datarestructor.js\");\nmodule.exports = {datarestructor : datarestructor};\n"],"names":["$59adffa3db62607f$var$module","exports","flattenToArray","data","maxRecursionDepth","result","recurse","cur","prop","depth","Object","push","name","value","Array","isArray","i","l","length","p","isEmpty","$68c6955ebe469375$var$module","$68c6955ebe469375$var$templateResolverInternalCreateIfNotExists","objectToCheck","$68c6955ebe469375$var$template_resolver","internalCreateIfNotExists","$68c6955ebe469375$var$internal_object_tools","parcelRequire","Resolver","removeArrayBracketsRegEx","RegExp","getPropertyNameInfos","fullPropertyName","positionOfRightMostSeparator","lastIndexOf","propertyName","substr","propertyGroup","propertyGroupWithoutArrayIndices","replace","group","groupWithoutArrayIndices","addToFilteredMapObject","elements","mapObject","filterMatchesFunction","index","element","sourceDataObject","this","resolveTemplate","template","replaceResolvableFields","map","propertyInfo","propertyValue","propertyNames","keys","addFieldsPerGroup","resolvableFieldsOfAll","ignoreInternalFields","indexOf","arguments","stringContainingVariables","resolvableFields","replaced","propertyIndex","$988e67f614ef1b49$var$module","$988e67f614ef1b49$var$describedFieldInternalCreateIfNotExists","$988e67f614ef1b49$var$described_field","DescribedDataFieldBuilder","withDefaultString","defaultValue","isSpecifiedString","withDefaultArray","describedField","category","type","abbreviation","image","groupNames","displayName","fieldName","fromDescribedDataField","build","copyWithoutGroups","describedDataField","DescribedDataFieldGroup","dataField","addGroupEntry","groupName","addGroupEntries","describedFields","undefined","arg","prototype","toString","call","filter","func","thisArg","TypeError","kValue","len","res","t","c","Object1","max","min","member","fromIndex","that","Len","Math","o","k","hasOwnProperty","$92b9ea3f9a8eb48c$var$module","$92b9ea3f9a8eb48c$var$datarestructorInternalCreateIfNotExists","$92b9ea3f9a8eb48c$var$datarestructor","$92b9ea3f9a8eb48c$var$internal_object_tools","$92b9ea3f9a8eb48c$var$template_resolver","$92b9ea3f9a8eb48c$var$described_field","PropertyStructureDescriptionBuilder","createNameExtractFunction","description","propertyPatternTemplateMode","patternToMatch","propertyPattern","match","templateModePatternRegexForPatternAndVariable","exec","rightMostPropertyNameElement","regularExpression","propertyPatternToUse","variablePattern","pattern","escapeCharsForRegEx","characters","nonWordCharactersRegEx","withDefault","indexStartsWith","groupPattern","groupDestinationPattern","groupDestinationName","deduplicationPattern","getDisplayNameForPropertyName","getFieldNameForPropertyName","matchesPropertyName","propertyPatternEqualMode","displayPropertyName","nameExtractFunction","charAt","toUpperCase","slice","upperCaseFirstLetter","upperCaseFirstLetterForFunction","propertyPatternToMatch","propertyNameWithoutArrayIndices","placeholderInDoubleCurlyBracketsRegEx","DescribedEntryCreator","entry","arrayBracketsRegEx","indices","regexWithOneNumberGroup","pointDelimited","numberArray","parseInt","indicesOfWithRegex","templateResolver","_isMatchingIndex","_description","_identifier","propertyNameWithArrayIndices","groupId","groupDestinationId","deduplicationId","describedEntry","describedEntries","Transform","mergeFlattenedData","entries","entriesToMerge","idOfElementFunction","id","entriesToMergeById","idIndexedObject","asIdBasedObject","merged","deduplicateFlattenedData","extractEntriesByDescription","flattenedData","filtered","toDescribedField","recursionContext","field","recursionDepth","config","nextRecursionContext","duplicateGroupNameToSkip","fieldGroups","rootEntry","onFoundEntry","groupIndex","entryIndex","forEachGroupEntry","groupEntry","allGroupEntries","groupToSkip","removeDuplicationAboveRecursionDepth","a","b","elementEqualFunction","arraysEqual","describedFieldEqual","debugMode","console","log","defaultEmpty","valueAsDefault","descriptions","enableDebugMode","setMaxRecursionDepth","setRemoveDuplicationAboveRecursionDepth","processJson","jsonData","processedData","trailingArrayIndexRegEx","lastArrayProperty","lastArrayPropertyValue","propertyNameWithoutTrailingArrayIndex","fillInArrayValues","descriptionIndex","describedData","groupIdOfElementFunction","groupNameOfElementFunction","groupedResult","groupById","groupFlattenedData","groupedObject","keysToDelete","key","destinationKey","newGroup","applyGroupDestinationPattern","describedEntity","toDescribedFields","groupedData","propertiesAsArray","processJsonUsingDescriptions","Restructor","restructor","module","datarestructor"],"version":3,"file":"datarestructor-ie.js.map","sourceRoot":"../"}