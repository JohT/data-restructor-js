{"version":3,"sources":["../../lib/js/polyfills/isArrayPolyfill.js","../../lib/js/polyfills/arrayFilterPolyfill.js","../../lib/js/polyfills/indexOfPolyfill.js","../../lib/js/polyfills/objectKeysPolyfill.js","../../lib/js/flattenToArray.js","templateResolver.js","datarestructor.js","datarestructor-ie.js"],"names":["Array","isArray","arg","Object","prototype","toString","call","filter","func","thisArg","TypeError","len","kValue","length","res","t","c","i","undefined","indexOf","max","min","member","fromIndex","that","Len","Math","keys","o","k","p","hasOwnProperty","push","module","internal_object_tools","exports","flattenToArray","data","maxRecursionDepth","result","recurse","cur","prop","depth","name","value","l","isEmpty","template_resolver","require","Resolver","removeArrayBracketsRegEx","RegExp","getPropertyNameInfos","fullPropertyName","positionOfRightMostSeparator","lastIndexOf","propertyName","substr","propertyGroup","propertyGroupWithoutArrayIndices","replace","group","groupWithoutArrayIndices","addToFilteredMapObject","elements","mapObject","filterMatchesFunction","index","element","sourceDataObject","resolveTemplate","template","replaceResolvableFields","addFieldsPerGroup","map","propertyNames","propertyInfo","propertyValue","resolvableFieldsOfAll","ignoreInternalFields","arguments","stringContainingVariables","resolvableFields","replaced","propertyIndex","datarestructor","PropertyStructureDescriptionBuilder","createNameExtractFunction","description","isSpecifiedString","propertyPatternTemplateMode","patternToMatch","propertyPattern","extractNameUsingTemplatePattern","regex","templateModePatternRegexForPatternAndVariable","match","exec","rightMostPropertyNameElement","extractNameUsingRightMostPropertyNameElement","regularExpression","propertyPatternToUse","variablePattern","pattern","escapeCharsForRegEx","characters","nonWordCharactersRegEx","withDefault","defaultValue","PropertyStructureDescription","type","category","abbreviation","image","indexStartsWith","groupName","groupPattern","groupDestinationPattern","groupDestinationName","deduplicationPattern","getDisplayNameForPropertyName","getFieldNameForPropertyName","matchesPropertyName","propertyPatternEqualMode","displayPropertyName","nameExtractFunction","upperCaseFirstLetterForFunction","upperCaseFirstLetter","charAt","toUpperCase","slice","removeArrayValuePropertyPostfixFunction","fieldName","build","propertyPatternToMatch","propertyNameWithoutArrayIndices","templateModePatternRegexForPattern","placeholderInDoubleCurlyBracketsRegEx","createFunctionMatchesPropertyName","DescribedEntryCreator","DescribedEntry","entry","indices","arrayBracketsRegEx","indicesOfWithRegex","regexWithOneNumberGroup","pointDelimited","numberArray","parseInt","templateResolver","displayName","_isMatchingIndex","_description","_identifier","propertyNameWithArrayIndices","groupId","groupDestinationId","deduplicationId","publicFieldsJson","space","propertyNamesWithoutObjectsAndFunctions","obj","prettyPrintJsonSpace","JSON","stringify","replacerRetainsOnlyDefinedPublicFields","key","onlyDefinedPublicFields","clonedEntry","clonedArray","Transform","mergeFlattenedData","entries","entriesToMerge","idOfElementFunction","entriesToMergeById","id","asIdBasedObject","idIndexedObject","merged","deduplicateFlattenedData","extractEntriesByDescription","flattenedData","filtered","describedEntry","descriptions","debugMode","enableDebugMode","processJson","processJsonUsingDescriptions","jsonData","processedData","trailingArrayIndexRegEx","lastArrayProperty","lastArrayPropertyValue","propertyNameWithoutTrailingArrayIndex","console","log","describedData","descriptionIndex","dataWithDescription","propertiesAsArray","groupedData","applyGroupDestinationPattern","groupedObject","keysToDelete","destinationKey","newGroup","existingGroup","updatedGroup","concat","keyToDelete","groupFlattenedData","groupById","groupIdOfElementFunction","groupNameOfElementFunction","groupedResult","Restructor","restructor"],"mappings":";AAEKA,MAAMC,UACPD,MAAMC,QAAU,SAASC,GAChBC,MAAwC,mBAAxCA,OAAOC,UAAUC,SAASC,KAAKJ;;ACHvCF,MAAMI,UAAUG,SACjBP,MAAMI,UAAUG,OAAS,SAASC,EAAMC,GACtC,aACK,GAAoB,mBAATD,GAAuC,mBAATA,IAAwB,KAClE,MAAM,IAAIE,UAEVC,IAIAC,EAJAD,EAAM,KAAKE,SAAW,EACtBC,EAAM,IAAId,MAAMW,GAChBI,EAAI,KAAMC,EAAI,EAAGC,GAAK,EAGtBR,QAAYS,IAAZT,EACK,OAAEQ,IAAMN,GAETM,KAAK,OACPL,EAASG,EAAEE,GACPT,EAAKO,EAAEE,GAAIA,EAAGF,KAChBD,EAAIE,KAAOJ,SAMV,OAAEK,IAAMN,GAETM,KAAK,OACPL,EAASG,EAAEE,GACPT,EAAKF,KAAKG,EAASM,EAAEE,GAAIA,EAAGF,KAC9BD,EAAIE,KAAOJ,IAOZE,OADPA,EAAID,OAASG,EACNF;;ACnCRd,MAAMI,UAAUe,UAAUnB,MAAMI,UAAUe,QAAW,SAAShB,EAAQiB,EAAKC,GAC5E,aACO,OAAA,SAAiBC,EAAQC,GAC3B,GAAA,MAAA,KAA8B,MAAMb,UAAU,uDAE7Cc,IAAAA,EAAOrB,EAAO,MAAOsB,EAAMD,EAAKX,SAAW,EAAGI,EAAII,EAAgB,EAAZE,EAAeE,GACrER,GAAAA,EAAI,EAAGA,EAAIG,EAAI,EAAGK,EAAIR,QAAS,GAAIA,GAAKQ,EAAK,OAAQ,EAEtDH,QAAS,IAATA,GAAwBL,KAAAA,IAAMQ,IAAOR,EAAMO,QAAU,IAAVA,EAAKP,IAAeA,KAAKO,EAAM,OAAOP,OAC9E,GAAGK,GAAWA,GAAiBL,KAAAA,IAAMQ,IAAOR,EAAMO,GAAAA,EAAKP,IAAOO,EAAKP,GAAI,OAAOA,OACpD,KAAMA,IAAMQ,IAAOR,EAAMO,GAAAA,EAAKP,KAAOK,EAAQ,OAAOL,EAE7E,OAAC,GAZ4C,CAcrDd,OAAQuB,KAAKN,IAAKM,KAAKL;;ACdvBlB,OAAOwB,OAAMxB,OAAOwB,KAAO,SAASC,GACjCA,GAAAA,IAAMzB,OAAOyB,GACf,MAAM,IAAIlB,UAAU,sCAClBmB,IAAKC,EAALD,EAAE,GACDC,IAAAA,KAAKF,EAAOzB,OAAOC,UAAU2B,eAAezB,KAAKsB,EAAEE,IAAID,EAAEG,KAAKF,GAC5DD,OAAAA;;ACNX,aAMA,IAAII,EAASA,GAAU,GAMnBC,EAAwBD,EAAOE,QAAQ,GAa3CD,EAAsBE,eAAiB,SAAUC,EAAMC,GACjDC,IAAAA,EAAS,GAiCNA,OAhC0B,iBAAtBD,GAAkCA,EAAoB,KAC/DA,EAAoB,IAEbE,SAAAA,EAAQC,EAAKC,EAAMC,GACtBA,KAAAA,EAAQL,GAAoC,mBAARG,GAGpCtC,GAAAA,OAAOsC,KAASA,EAClBF,EAAOP,KAAK,CAAEY,KAAMF,EAAMG,MAAOJ,SAC5B,GAAIzC,MAAMC,QAAQwC,GAAM,CACzBxB,IAAAA,EACA6B,EAAIL,EAAI5B,OACPI,IAAAA,EAAI,EAAGA,EAAI6B,EAAG7B,GAAK,EACtBuB,EAAQC,EAAIxB,GAAIyB,EAAO,IAAMzB,EAAI,IAAK0B,EAAQ,GAEtC,IAANG,IACFP,EAAOG,GAAQ,GACfH,EAAOP,KAAK,CAAEY,KAAMF,EAAMG,MAAO,UAE9B,CACDE,IACAjB,EADAiB,GAAU,EAETjB,IAAAA,KAAKW,EACRM,GAAU,EACVP,EAAQC,EAAIX,GAAIY,EAAOA,EAAO,IAAMZ,EAAIA,EAAGa,EAAQ,GAEjDI,GAAWL,GACbH,EAAOP,KAAK,CAAEY,KAAMF,EAAMG,MAAO,MAIvCL,CAAQH,EAAM,GAAI,GACXE;;ACrDT,aACA,IAAIN,EAASA,GAAU,GAMnBe,EAAqBf,EAAOE,QAAU,GAEtCD,EAAwBA,GAAyBe,QAAQ,+BAK7DD,EAAkBE,SAAY,WACxBC,IAAAA,EAA2B,IAAIC,OAAO,aAAc,MAkG/CC,SAAAA,EAAqBC,GACxBC,IAAAA,EAA+BD,EAAiBE,YAAY,KAC5DC,EAAeH,EACfC,EAA+B,IACjCE,EAAeH,EAAiBI,OAAOH,EAA+B,IAEpEI,IAAAA,EAAgB,GAChBJ,EAA+B,IACjCI,EAAgBL,EAAiBI,OAAO,EAAGH,EAA+B,IAExEK,IAAAA,EAAmCD,EAAcE,QAAQV,EAA0B,IAChF,MAAA,CAAEW,MAAOH,EAAeI,yBAA0BH,EAAkChB,KAAMa,GAW1FO,SAAAA,EAAuBC,EAAUC,EAAWC,GAC/CC,IAAAA,EAAOC,EACND,IAAAA,EAAQ,EAAGA,EAAQH,EAASpD,OAAQuD,GAAS,EAChDC,EAAUJ,EAASG,GACkB,mBAA1BD,GAAwCA,EAAsBE,EAAQzB,QAC/EsB,EAAUG,EAAQzB,MAAQyB,EAAQxB,OAG/BqB,OAAAA,EAOFhB,OAjIEA,SAASoB,GACXA,KAAAA,iBAAmBA,EAYnBC,KAAAA,gBAAkB,SAAUC,GACxB,OAAA,KAAKC,wBAAwBD,EAuD/BE,SAAkBC,GACrBC,IACA3D,EAAGqC,EAAkBuB,EAAcC,EADnCF,EAAgBzE,OAAOwB,KAAKgD,GAE3B1D,IAAAA,EAAI,EAAGA,EAAI2D,EAAc/D,OAAQI,GAAK,EACzCqC,EAAmBsB,EAAc3D,GACjC6D,EAAgBH,EAAIrB,GAMM,eAL1BuB,EAAexB,EAAqBC,IAKnBV,MAA0C,cAAlBkC,IACvCH,EAAIE,EAAad,yBAA2Be,GAAiBH,EAAIE,EAAaf,MAAQ,UAGnFa,OAAAA,EAtEyCD,CAAkB,KAAKK,sBAAsB,KAAKT,qBAe7FS,KAAAA,sBAAwB,WACvBJ,IAIAP,EAJAO,EAAM,GACNK,EAAuB,SAAUvB,GAC5BA,OAA8B,IAA9BA,EAAatC,QAAQ,MAAcsC,EAAatC,QAAQ,MAAQ,GAGpEiD,IAAAA,EAAQ,EAAGA,EAAQa,UAAUpE,OAAQuD,GAAS,EACjDJ,EAAuB9B,EAAsBE,eAAe6C,UAAUb,GAAQ,GAAIO,EAAKK,GAElFL,OAAAA,GAUJF,KAAAA,wBAA0B,SAAUS,EAA2BC,GAC9DC,IAAAA,EAAWF,EACXN,EAAgBzE,OAAOwB,KAAKwD,GAC5BE,EAAgB,EAChB5B,EAAe,GACfqB,EAAgB,GACfO,IAAAA,EAAgB,EAAGA,EAAgBT,EAAc/D,OAAQwE,GAAiB,EAE7EP,EAAgBK,EADhB1B,EAAemB,EAAcS,IAE7BD,EAAWA,EAASvB,QAAQ,KAAOJ,EAAe,KAAMqB,GAEnDM,OAAAA,IAlEiB;;ACd7B,aA+/BD,SAAA,EAAA,GAAA,OAAA,EAAA,mBAAA,QAAA,iBAAA,OAAA,SAAA,SAAA,GAAA,cAAA,GAAA,SAAA,GAAA,OAAA,GAAA,mBAAA,QAAA,EAAA,cAAA,QAAA,IAAA,OAAA,UAAA,gBAAA,IAAA,GA9/BA,IAAInD,EAASA,GAAU,GAgBnBqD,EAAiBrD,EAAOE,QAAQ,GAEhCD,EAAwBA,GAAyBe,QAAQ,+BACzDD,EAAoBA,GAAqBC,QAAQ,iCAoCrDqC,EAAeC,oCAAuC,WAsR3CC,SAAAA,EAA0B3C,EAAO4C,GACpCC,GAAAA,EAAkB7C,GACb,OAAA,WACEA,OAAAA,GAGP4C,GAAAA,EAAYE,4BAA6B,CACvCC,IAAAA,EAAiBH,EAAYI,gBAC1BC,OAoD8BD,EApDED,EAqDlC,SAAUnC,GACXsC,IAAAA,EAAQC,EAA8CH,EAAiB,iBACvEI,EAAQF,EAAMG,KAAKzC,GACnBwC,OAAAA,GAAqB,IAAZA,EAAM,GACVA,EAAM,GAERE,EAA6B1C,IAP/BqC,IAAgCD,EAlDhCO,OA8DA,SAAU3C,GACR0C,OAAAA,EAA6B1C,IA3C/B0C,SAAAA,EAA6B1C,GAChC4C,IAAAA,EAAoB,IAAIjD,OAAO,UAAW,MAC1C6C,EAAQxC,EAAawC,MAAMI,GAC3BJ,OAAS,MAATA,EACKA,EAAM,GAERxC,EA8CAuC,SAAAA,EAA8CM,EAAsBC,GACvEC,IAAAA,EAAUC,EAAoBH,GAM3B,MALwB,iBAApBC,IACTA,EAAkBE,EAAoBF,IAGxCC,EAAU,KADVA,EAAUA,EAAQ3C,QAAQ0C,EAAiB,cAEpC,IAAInD,OAAOoD,EAAS,KAGpBC,SAAAA,EAAoBC,GACvBC,IAAAA,EAAyB,IAAIvD,OAAO,YAAa,MAC9CsD,OAAAA,EAAW7C,QAAQ8C,EAAwB,QAG3CC,SAAAA,EAAY/D,EAAOgE,GACnBnB,OAAAA,EAAkB7C,GAASA,EAAQgE,EAGnCnB,SAAAA,EAAkB7C,GAClB,MAAiB,iBAAVA,GAA+B,MAATA,GAA0B,IAATA,EAGhDiE,OAxXEA,WAIFrB,KAAAA,YAAc,CACjBsB,KAAM,GACNC,SAAU,GACVC,aAAc,GACdC,MAAO,GACPvB,6BAA6B,EAC7BE,gBAAiB,GACjBsB,gBAAiB,GACjBC,UAAW,QACXC,aAAc,GACdC,wBAAyB,GACzBC,qBAAsB,KACtBC,qBAAsB,GACtBC,8BAA+B,KAC/BC,4BAA6B,KAC7BC,oBAAqB,MAelBZ,KAAAA,KAAO,SAAUlE,GAEb,OADF4C,KAAAA,YAAYsB,KAAOH,EAAY/D,EAAO,IACpC,MAcJmE,KAAAA,SAAW,SAAUnE,GAEjB,OADF4C,KAAAA,YAAYuB,SAAWJ,EAAY/D,EAAO,IACxC,MAcJoE,KAAAA,aAAe,SAAUpE,GAErB,OADF4C,KAAAA,YAAYwB,aAAeL,EAAY/D,EAAO,IAC5C,MAUJqE,KAAAA,MAAQ,SAAUrE,GAEd,OADF4C,KAAAA,YAAYyB,MAAQN,EAAY/D,EAAO,IACrC,MAUJ+E,KAAAA,yBAA2B,WAEvB,OADFnC,KAAAA,YAAYE,6BAA8B,EACxC,MAaJA,KAAAA,4BAA8B,WAE1B,OADFF,KAAAA,YAAYE,6BAA8B,EACxC,MAeJE,KAAAA,gBAAkB,SAAUhD,GAExB,OADF4C,KAAAA,YAAYI,gBAAkBe,EAAY/D,EAAO,IAC/C,MAaJsE,KAAAA,gBAAkB,SAAUtE,GAExB,OADF4C,KAAAA,YAAY0B,gBAAkBP,EAAY/D,EAAO,IAC/C,MAeJgF,KAAAA,oBAAsB,SAAUhF,GAE/B6C,OADCD,KAAAA,YAAYgC,8BAAgCjC,EAA0B3C,EAAO,KAAK4C,aACnFC,EAAkB7C,GACb,MAEJ4C,KAAAA,YAAYgC,+BAoK4BK,EAnK3C,KAAKrC,YAAYgC,8BAoKd,SAAUhE,GACXb,IAAAA,EAAOkF,EAAoBrE,GAExBb,OADPA,EAAe,MAARA,EAAeA,EAAO,IACjBiB,QAAQ,0BAA2B,MArK1C4B,KAAAA,YAAYgC,8BA2JZM,SAAgCD,GAChC,OAAA,SAAUrE,GACRuE,OATmBnF,EASEiF,EAAoBrE,IARxC5C,OAAS,EACVgC,EAAMoF,OAAO,GAAGC,cAAgBrF,EAAMsF,MAAM,GAE9CtF,EAJAmF,IAAqBnF,GApJuBkF,CAC/C,KAAKtC,YAAYgC,+BAEZ,MA8JFW,IAAwCN,GA/I1CO,KAAAA,UAAY,SAAUxF,GAElB,OADF4C,KAAAA,YAAYiC,4BAA8BlC,EAA0B3C,EAAO,KAAK4C,aAC9E,MAUJ2B,KAAAA,UAAY,SAAUvE,GAElB,OADF4C,KAAAA,YAAY2B,UAAYR,EAAY/D,EAAO,IACzC,MAYJwE,KAAAA,aAAe,SAAUxE,GAErB,OADF4C,KAAAA,YAAY4B,aAAeT,EAAY/D,EAAO,IAC5C,MAYJyE,KAAAA,wBAA0B,SAAUzE,GAEhC,OADF4C,KAAAA,YAAY6B,wBAA0BV,EAAY/D,EAAO,IACvD,MAWJ0E,KAAAA,qBAAuB,SAAU1E,GAE7B,OADF4C,KAAAA,YAAY8B,qBAAuBX,EAAY/D,EAAO,KAAK4C,YAAY2B,WACrE,MAYJI,KAAAA,qBAAuB,SAAU3E,GAE7B,OADF4C,KAAAA,YAAY+B,qBAAuBZ,EAAY/D,EAAO,IACpD,MAOJyF,KAAAA,MAAQ,WAWJ,OAVF7C,KAAAA,YAAYkC,qBA2BsBlC,EA3BkC,KAAKA,YA6B3EC,EADD6C,EAAyB9C,EAAYI,iBAMrCJ,EAAYE,4BACP,SAAU6C,GACRC,OAAoG,OAuDrEnC,EAvDIiC,EAwD1CG,EAAwC,IAAItF,OAAO,sCAAuC,MACvF4C,EAA8CM,EAAsBoC,IAzDLxC,KAAKsC,GAuDpEC,IAAmCnC,EACtCoC,GArDG,SAAUF,GACRA,OAAAA,IAAoCD,GAVpC,WACE,OAAA,IA9B6C,MAAlD,KAAK9C,YAAYgC,+BACdI,KAAAA,oBAAoB,IAEyB,MAAhD,KAAKpC,YAAYiC,6BACdW,KAAAA,UAAU,IAE4B,MAAzC,KAAK5C,YAAY8B,sBACdA,KAAAA,qBAAqB,IAErB,KAAK9B,YAiBPkD,IAAkClD,EACrC8C,IApS8C,GAuatDjD,EAAesD,sBAAyB,WAGlCzF,IAAAA,EAA2B,IAAIC,OAAO,aAAc,MAsLjDyF,OA/KEA,SAAeC,EAAOrD,GACzBsD,IA8EazF,EACb0F,EA/EAD,GA8EazF,EA9EOwF,EAAMlG,KA+E1BoG,EAAqB,IAAI5F,OAAO,eAAgB,MAW7C6F,SAAmB3F,EAAkB4F,GACxCC,IAEAlD,EAFAkD,EAAiB,GACjBC,EAAc,GAEf,IACDnD,EAAQiD,EAAwBhD,KAAK5C,MAE/B6F,EAAetI,OAAS,IAC1BsI,GAAkB,KAEpBA,GAAkBlD,EAAM,GACxBmD,EAAYpH,KAAKqH,SAASpD,EAAM,YAE3BA,GACF,MAAA,CAAEkD,eAAgBA,EAAgBC,YAAaA,GAxB/CH,CAAmB3F,EAAkB0F,IA/ExCR,EAAkCM,EAAMlG,KAAKiB,QAAQV,EAA0B,IAC/EmG,EAAmB,IAAItG,EAAkBE,SAAS,MAEjD8D,KAAAA,SAAWvB,EAAYuB,SACvBD,KAAAA,KAAOtB,EAAYsB,KACnBE,KAAAA,aAAexB,EAAYwB,aAC3BC,KAAAA,MAAQzB,EAAYyB,MAMpB9C,KAAAA,MAAQ2E,EAAQK,YAChBG,KAAAA,YAAc9D,EAAYgC,8BAA8Be,GACxDH,KAAAA,UAAY5C,EAAYiC,4BAA4Bc,GACpD3F,KAAAA,MAAQiG,EAAMjG,MACd2G,KAAAA,iBAAkF,GAA/DT,EAAQI,eAAehI,QAAQsE,EAAY0B,iBAC9DsC,KAAAA,aAAehE,EAEfiE,KAAAA,YAAc,CACjBtF,MAAO2E,EAAQI,eACfQ,6BAA8Bb,EAAMlG,KACpC4F,gCAAiCA,EACjCoB,QAAS,GACTC,mBAAoB,GACpBC,gBAAiB,IAEdJ,KAAAA,YAAYE,QAAUN,EAAiB7E,wBAC1CgB,EAAY4B,aACZiC,EAAiBvE,sBAAsB,KAAM,KAAK0E,aAAc,KAAKC,cAElEA,KAAAA,YAAYG,mBAAqBP,EAAiB7E,wBACrDgB,EAAY6B,wBACZgC,EAAiBvE,sBAAsB,KAAM,KAAK0E,aAAc,KAAKC,cAElEA,KAAAA,YAAYI,gBAAkBR,EAAiB7E,wBAClDgB,EAAY+B,qBACZ8B,EAAiBvE,sBAAsB,KAAM,KAAK0E,aAAc,KAAKC,cAalEnF,KAAAA,gBAAkB,SAAUC,GACxB,OAAA,IAAIxB,EAAkBE,SAAS,MAAMqB,gBAAgBC,IAOzDuF,KAAAA,iBAAmB,SAAUC,GAC5BpF,IAAAA,EAkDCqF,SAAwCC,GAC3C3H,IACA8C,EACA5B,EAFAlB,EAAS,GAGTqC,EAAgBzE,OAAOwB,KAAKuI,GAC3B7E,IAAAA,EAAgB,EAAGA,EAAgBT,EAAc/D,OAAQwE,GAAiB,EAC7E5B,EAAemB,EAAcS,GACI,WAA7B,EAAO6E,EAAIzG,KAA2D,mBAAtByG,EAAIzG,IACtDlB,EAAOP,KAAKyB,GAGTlB,OAAAA,EA7De0H,CAAwC,MACxDE,EAAwC,iBAAVH,EAAqBA,EAAQ,EACxDI,OAAAA,KAAKC,UAAU,KAyEjBC,SAAuC1F,GACvC,OAAA,SAAU2F,EAAK1H,GACb2H,OAaFA,SAAwBD,EAAK1H,EAAO+B,GACvC,KAAiB,WAAjB,EAAO/B,IAAsB+B,EAAczD,QAAQoJ,GAAO,GAAY,IAAPA,IAG3C,GAApBA,EAAIpJ,QAAQ,KAAZoJ,CAGAvK,GAAAA,MAAMC,QAAQ4C,GAAQ,CACpBuB,IAAAA,EAAOiB,EACPyD,EAAO2B,EACPC,EAAc,GACbtG,IAAAA,EAAQ,EAAGA,EAAQvB,EAAMhC,OAAQuD,GAAS,EAAG,CAG3CiB,IAFLyD,EAAQjG,EAAMuB,GACdqG,EAAc,GACTpF,EAAgB,EAAGA,EAAgBT,EAAc/D,OAAQwE,GAAiB,EAC7EoF,EAAY7F,EAAcS,IAAkByD,EAAMlE,EAAcS,IAElEqF,EAAY1I,KAAKyI,GAEZC,OAAAA,EAEF7H,OAAAA,GAlCE2H,CAAwBD,EAAK1H,EAAO+B,IA3Ef0F,CAAuC1F,GAAgBuF,KAzEjD,GA+LxC7E,EAAeqF,UAAa,WAqGjBC,SAAAA,EAAmBC,EAASC,EAAgBC,GAC/CC,IAEA5G,EAAO0E,EAAOmC,EAFdD,EAyDGE,SAAgBjH,EAAU8G,GAE5B,IADDI,IAAAA,EAAkB,IAAIhL,OACjBiE,EAAQ,EAAGA,EAAQH,EAASpD,OAAQuD,IAAS,CAChDC,IAAAA,EAAUJ,EAASG,GACvB+G,EAAgBJ,EAAoB1G,IAAYA,EAE3C8G,OAAAA,EA/DkBD,CAAgBJ,EAAgBC,GACrDK,EAAS,GAERhH,IAAAA,EAAQ,EAAGA,EAAQyG,EAAQhK,OAAQuD,GAAO,EAGnC,OADV6G,EAAKF,EADLjC,EAAQ+B,EAAQzG,MAES,KAAP6G,GAAuC,MAA1BD,EAAmBC,IAChDG,EAAOpJ,KAAK8G,GAGX1E,IAAAA,EAAQ,EAAGA,EAAQ0G,EAAejK,OAAQuD,GAAO,EACpD0E,EAAQgC,EAAe1G,GACvBgH,EAAOpJ,KAAK8G,GAEPsC,OAAAA,EAyBAC,SAAAA,EAAyBR,EAASC,GACrCD,GAAW,MAAXA,GAAqC,GAAlBA,EAAQhK,OACtBiK,OAAAA,EAKFF,OAAAA,EAAmBC,EAASC,EAHT,SAAUhC,GAC3BA,OAAAA,EAAMY,YAAYI,kBAqFpBwB,SAAAA,EAA4BC,EAAe9F,GAC9CtC,IAAAA,EAA2B,IAAIC,OAAO,aAAc,MACpDoI,EAAW,GAWRA,OATPD,EAAchL,OAAO,SAAUuI,GACzBN,IAAAA,EAAkCM,EAAMlG,KAAKiB,QAAQV,EAA0B,IAC/EsC,GAAAA,EAAYkC,oBAAoBa,GAAkC,CAChEiD,IAAAA,EAAiB,IAAInG,EAAesD,sBAAsBE,EAAOrD,GACjEgG,EAAejC,kBACjBgC,EAASxJ,KAAKyJ,MAIbD,EAwFFb,OApUEA,SAAUe,GAKZA,KAAAA,aAAeA,EAKfC,KAAAA,WAAY,EAKZC,KAAAA,gBAAkB,WAEd,OADFD,KAAAA,WAAY,EACV,MAYJE,KAAAA,YAAc,SAAUxJ,GACpByJ,OAWFA,SAA6BC,EAAUL,EAAcC,GAExDK,IA+OqBT,EACrBU,EACA1J,EACA2J,EACAC,EAnPAH,EAAgB9J,EAAsBE,eAAe2J,GA+OhCR,EA7OSS,EA8O9BC,EAA0B,IAAI7I,OAAO,cAAe,MACpDb,EAAS,GACT2J,EAAoB,GACpBC,EAAyB,GAE7BZ,EAAchL,OAAO,SAAUuI,GACzB,IAACA,EAAMlG,KAAKqD,MAAMgG,GAMpB,MAL0B,KAAtBC,IACF3J,EAAOP,KAAK,CAAEY,KAAMsJ,EAAoB,0BAA2BrJ,MAAOsJ,IAC1ED,EAAoB,SAEtB3J,EAAOP,KAAK8G,GAGVsD,IAAAA,EAAwCtD,EAAMlG,KAAKiB,QAAQoI,EAAyB,IACpFC,IAAsBE,EACxBD,GAA0B,KAAOrD,EAAMjG,OAEb,KAAtBqJ,IACF3J,EAAOP,KAAK,CAAEY,KAAMsJ,EAAoB,0BAA2BrJ,MAAOsJ,IAC1ED,EAAoB,IAEtBA,EAAoBE,EACpBD,EAAyBrD,EAAMjG,OAEjCN,EAAOP,KAAK8G,KAvQdkD,EAyQOzJ,EAvQmB,kBAAdoJ,GAA4BA,IACtCU,QAAQC,IAAI,qCACZD,QAAQC,IAAIN,IAIVO,IACAC,EAAkB/G,EAAagH,EAD/BF,EAAgB,GAEfC,IAAAA,EAAmB,EAAGA,EAAmBd,EAAa7K,OAAQ2L,GAAkB,EACnF/G,EAAciG,EAAac,GAE3BC,EAAsBnB,EAA4BU,EAAevG,GAEjE8G,EAAgBlB,EAAyBkB,EAAeE,GAWnDC,OAkPAA,SAAkBC,GAGpB,IAFDpK,IAAAA,EAAS,GACTqC,EAAgBzE,OAAOwB,KAAKgL,GACvBtH,EAAgB,EAAGA,EAAgBT,EAAc/D,OAAQwE,IAAiB,CAC7E5B,IAAAA,EAAemB,EAAcS,GAC7BP,EAAgB6H,EAAYlJ,GAChClB,EAAOP,KAAK8C,GAEPvC,OAAAA,EA1PAmK,CAHPV,EAsLOY,SAA6BC,GAG/B,IAFDlL,IAAAA,EAAOxB,OAAOwB,KAAKkL,GACnBC,EAAe,GACV1I,EAAQ,EAAGA,EAAQzC,EAAKd,OAAQuD,IAAS,CAC5CmG,IAAAA,EAAM5I,EAAKyC,GACX0E,EAAQ+D,EAActC,GACtBzB,GAA8C,IAA9CA,EAAMW,aAAanC,wBAA+B,CAChDyF,IAAAA,EAAiBjE,EAAMY,YAAYG,mBACnCgD,GAAiC,MAAjCA,EAAcE,GAAyB,CACrCC,IAAAA,EAAWlE,EAAMA,EAAMW,aAAarC,WACpC6F,EAAgBJ,EAAcE,GAAgBjE,EAAMW,aAAalC,sBACjE2F,EAAgC,MAAjBD,EAAwBA,EAAcE,OAAOH,GAAYA,EAC5EH,EAAcE,GAAgBjE,EAAMW,aAAalC,sBAAwB2F,EACzEJ,EAAa9K,KAAKuI,KAKnBnG,IAAAA,EAAQ,EAAGA,EAAQ0I,EAAajM,OAAQuD,GAAO,EAAG,CACjDgJ,IAAAA,EAAcN,EAAa1I,UACxByI,EAAcO,GAEhBP,OAAAA,EA5MSD,CAHhBZ,EA0GOqB,SAAmB9B,GACnB+B,OAsBAA,SAAUrJ,EAAUsJ,EAA0BC,GAEhD,IADDC,IAAAA,EAAgB,IAAItN,OACfiE,EAAQ,EAAGA,EAAQH,EAASpD,OAAQuD,IAAS,CAChDC,IAAAA,EAAUJ,EAASG,GACnBwF,EAAU2D,EAAyBlJ,GACnCuF,GAAY,KAAZA,EAAAA,CAGAxC,IAAAA,EAAYoG,EAA2BnJ,GAC1B,MAAb+C,GAAmC,KAAdA,IAGpBqG,EAAc7D,KACjB6D,EAAc7D,GAAWvF,EACzBoJ,EAAc7D,GAASxC,GAAa,IAEtCqG,EAAc7D,GAASxC,GAAWpF,KAAKqC,KAElCoJ,OAAAA,EAxCAH,CACL/B,EACA,SAAUzC,GACDA,OAAAA,EAAMY,YAAYE,SAE3B,SAAUd,GACDA,OAAAA,EAAMW,aAAarC,YAjHdiG,CAHhBrB,EAAgBO,KAhCPT,CAA6BzJ,EAAM,KAAKqJ,aAAc,KAAKC,aAtC5C,GAyV5BrG,EAAeoI,WAAa,GAQ5BpI,EAAeoI,WAAW5B,6BAA+B,SAASC,EAAUL,EAAcC,GACpFgC,IAAAA,EAAa,IAAIrI,EAAeqF,UAAUe,GAIvCiC,OAHHhC,GACFgC,EAAW/B,kBAEN+B,EAAW9B,YAAYE;;AC1gChC,aACA9I,QAAQ,6CACRA,QAAQ,iDACRA,QAAQ,6CACRA,QAAQ,gDACR,IAAIqC,EAAiBrC,QAAQ,kCAC7BhB,OAAOE,QAAS,CAACmD,eAAAA","file":"datarestructor-ie.js","sourceRoot":"../src/js","sourcesContent":["// https://gist.github.com/brianonn/4ef965a06b9e950d80e4e8b8e4c527f9\n// https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\nif (!Array.isArray) {\n    Array.isArray = function(arg) {\n      return Object.prototype.toString.call(arg) === '[object Array]';\n    };\n}","// From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter#Polyfill\nif (!Array.prototype.filter){\n    Array.prototype.filter = function(func, thisArg) {\n      'use strict';\n      if ( ! ((typeof func === 'Function' || typeof func === 'function') && this) )\n          throw new TypeError();\n     \n      var len = this.length >>> 0,\n          res = new Array(len), // preallocate array\n          t = this, c = 0, i = -1;\n  \n      var kValue;\n      if (thisArg === undefined){\n        while (++i !== len){\n          // checks to see if the key was set\n          if (i in this){\n            kValue = t[i]; // in case t is changed in callback\n            if (func(t[i], i, t)){\n              res[c++] = kValue;\n            }\n          }\n        }\n      }\n      else{\n        while (++i !== len){\n          // checks to see if the key was set\n          if (i in this){\n            kValue = t[i];\n            if (func.call(thisArg, t[i], i, t)){\n              res[c++] = kValue;\n            }\n          }\n        }\n      }\n     \n      res.length = c; // shrink down array to proper size\n      return res;\n    };\n  }","//https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf#Polyfill\nif (!Array.prototype.indexOf)  Array.prototype.indexOf = (function(Object, max, min){\n    \"use strict\";\n    return function indexOf(member, fromIndex) {\n      if(this===null||this===undefined)throw TypeError(\"Array.prototype.indexOf called on null or undefined\");\n      \n      var that = Object(this), Len = that.length >>> 0, i = min(fromIndex | 0, Len);\n      if (i < 0) i = max(0, Len+i); else if (i >= Len) return -1;\n      \n      if(member===void 0){ for(; i !== Len; ++i) if(that[i]===void 0 && i in that) return i; // undefined\n      }else if(member !== member){   for(; i !== Len; ++i) if(that[i] !== that[i]) return i; // NaN\n      }else                           for(; i !== Len; ++i) if(that[i] === member) return i; // all else\n  \n      return -1; // if the value was not found, then return -1\n    };\n  })(Object, Math.max, Math.min);","//http://tokenposts.blogspot.com/2012/04/javascript-objectkeys-browser.html\nif (!Object.keys) Object.keys = function(o) {\n    if (o !== Object(o))\n      throw new TypeError('Object.keys called on a non-object');\n    var k=[],p;\n    for (p in o) if (Object.prototype.hasOwnProperty.call(o,p)) k.push(p);\n    return k;\n  }","\"use strict\";\n/**\n * @fileOverview Modded (compatibility, recursion depth) version of: https://stackoverflow.com/questions/19098797/fastest-way-to-flatten-un-flatten-nested-json-objectss\n * @version ${project.version}\n * @see {@link https://stackoverflow.com/questions/19098797/fastest-way-to-flatten-un-flatten-nested-json-objectss|stackoverflow flatten nested json objects}\n */\nvar module = module || {}; // Fallback for vanilla js without modules\n\n/**\n * internal_object_tools. Not meant to be used outside this repository.\n * @default {}\n */\nvar internal_object_tools = module.exports={}; // Export module for npm...\n\n/**\n * @typedef {Object} NameValuePair\n * @property {string} name - point separated names of the flattened main and sub properties, e.g. \"responses[2].hits.hits[4]._source.name\".\n * @property {string} value - value of the property\n */\n\n/**\n * @param {object} data hierarchical object that may consist fo fields, subfields and arrays.\n * @param {number} maxRecursionDepth\n * @returns {NameValuePair[]} array of property name and value pairs\n */\ninternal_object_tools.flattenToArray = function (data, maxRecursionDepth) {\n  var result = [];\n  if (typeof maxRecursionDepth !== \"number\" || maxRecursionDepth < 1) {\n    maxRecursionDepth = 20;\n  }\n  function recurse(cur, prop, depth) {\n    if (depth > maxRecursionDepth || typeof cur === \"function\") {\n      return;\n    }\n    if (Object(cur) !== cur) {\n      result.push({ name: prop, value: cur });\n    } else if (Array.isArray(cur)) {\n      var i;\n      var l = cur.length;\n      for (i = 0; i < l; i += 1) {\n        recurse(cur[i], prop + \"[\" + i + \"]\", depth + 1);\n      }\n      if (l === 0) {\n        result[prop] = [];\n        result.push({ name: prop, value: \"\" });\n      }\n    } else {\n      var isEmpty = true;\n      var p;\n      for (p in cur) {\n        isEmpty = false;\n        recurse(cur[p], prop ? prop + \".\" + p : p, depth + 1);\n      }\n      if (isEmpty && prop) {\n        result.push({ name: prop, value: \"\" });\n      }\n    }\n  }\n  recurse(data, \"\", 0);\n  return result;\n};\n","/**\n * @file Provides a simple template resolver, that replaces variables in double curly brackets with the values of a given object.\n * @version {@link https://github.com/JohT/data-restructor-js/releases/latest latest version}\n * @author JohT\n * @version ${project.version}\n */\n\"use strict\";\nvar module = module || {}; // Fallback for vanilla js without modules\n\n/**\n * Provides a simple template resolver, that replaces variables in double curly brackets with the values of a given object.\n * @module template_resolver\n */\nvar template_resolver = (module.exports = {}); // Export module for npm...\n\nvar internal_object_tools = internal_object_tools || require(\"../../lib/js/flattenToArray\"); // supports vanilla js & npm\n\n/**\n * Resolver. Is used inside this repository. It could also be used outside.\n */\ntemplate_resolver.Resolver = (function () {\n  var removeArrayBracketsRegEx = new RegExp(\"\\\\[\\\\d+\\\\]\", \"gi\");\n\n  /**\n   * Constructor function and container for everything, that needs to exist per instance.\n   * @constructs Resolver\n   */\n  function Resolver(sourceDataObject) {\n    this.sourceDataObject = sourceDataObject;\n    /**\n     * Resolves the given template.\n     *\n     * The template may contain variables in double curly brackets.\n     * Supported variables are all properties of this object, e.g. \"{{fieldName}}\", \"{{displayName}}\", \"{{value}}\".\n     * Since this object may also contains (described) groups of sub objects, they can also be used, e.g. \"{{summaries[0].value}}\"\n     * Parts of the index can be inserted by using e.g. \"{{index[1]}}\".\n     *\n     * @param {string} template\n     * @returns {string} resolved template\n     */\n    this.resolveTemplate = function (template) {\n      return this.replaceResolvableFields(template, addFieldsPerGroup(this.resolvableFieldsOfAll(this.sourceDataObject)));\n    };\n    /**\n     * Returns a map like object, that contains all resolvable fields and their values as properties.\n     * This function takes a variable count of input parameters,\n     * each containing an object that contains resolvable fields to extract from.\n     *\n     * The recursion depth is limited to 3, so that an object,\n     * that contains an object can contain another object (but not further).\n     *\n     * Properties beginning with an underscore in their name will be filtered out, since they are considered as internal fields.\n     *\n     * @param {...object} varArgs variable count of parameters. Each parameter contains an object that fields should be resolvable for variables.\n     * @returns {object} object with resolvable field names and their values.\n     */\n    this.resolvableFieldsOfAll = function () {\n      var map = {};\n      var ignoreInternalFields = function (propertyName) {\n        return propertyName.indexOf(\"_\") !== 0 && propertyName.indexOf(\"._\") < 0;\n      };\n      var index;\n      for (index = 0; index < arguments.length; index += 1) {\n        addToFilteredMapObject(internal_object_tools.flattenToArray(arguments[index], 3), map, ignoreInternalFields);\n      }\n      return map;\n    };\n    /**\n     * Replaces all variables in double curly brackets, e.g. {{property}},\n     * with the value of that property from the resolvableProperties.\n     *\n     * Supported property types: string, number, boolean\n     * @param {string} stringContainingVariables\n     * @param {object[]} resolvableFields (name=value)\n     */\n    this.replaceResolvableFields = function (stringContainingVariables, resolvableFields) {\n      var replaced = stringContainingVariables;\n      var propertyNames = Object.keys(resolvableFields);\n      var propertyIndex = 0;\n      var propertyName = \"\";\n      var propertyValue = \"\";\n      for (propertyIndex = 0; propertyIndex < propertyNames.length; propertyIndex += 1) {\n        propertyName = propertyNames[propertyIndex];\n        propertyValue = resolvableFields[propertyName];\n        replaced = replaced.replace(\"{{\" + propertyName + \"}}\", propertyValue);\n      }\n      return replaced;\n    };\n  }\n\n  /**\n   * Adds the value of the \"fieldName\" property (including its group prefix) and its associated \"value\" property content.\n   * For example: detail[2].fieldName=\"name\", detail[2].value=\"Smith\" lead to the additional property detail.name=\"Smith\".\n   * @param {object} object with resolvable field names and their values.\n   * @returns {object} object with resolvable field names and their values.\n   */\n  function addFieldsPerGroup(map) {\n    var propertyNames = Object.keys(map);\n    var i, fullPropertyName, propertyInfo, propertyValue;\n    for (i = 0; i < propertyNames.length; i += 1) {\n      fullPropertyName = propertyNames[i];\n      propertyValue = map[fullPropertyName];\n      propertyInfo = getPropertyNameInfos(fullPropertyName);\n      // Supports fields that are defined by a property named \"fieldName\" (containing the name)\n      // and a property named \"value\" inside the same sub object (containing its value).\n      // Ignore custom fields that are named \"fieldName\"(propertyValue), since this would lead to an unpredictable behavior.\n      // TODO could make \"fieldName\" and \"value\" configurable\n      if (propertyInfo.name === \"fieldName\" && propertyValue !== \"fieldName\") {\n        map[propertyInfo.groupWithoutArrayIndices + propertyValue] = map[propertyInfo.group + \"value\"];\n      }\n    }\n    return map;\n  }\n\n  /**\n   * Infos about the full property name including the name of the group (followed by the separator) and the name of the property itself.\n   * @param {String} fullPropertyName\n   * @returns {Object} Contains \"group\" (empty or group name including trailing separator \".\"), \"groupWithoutArrayIndices\" and \"name\" (property name).\n   */\n  function getPropertyNameInfos(fullPropertyName) {\n    var positionOfRightMostSeparator = fullPropertyName.lastIndexOf(\".\");\n    var propertyName = fullPropertyName;\n    if (positionOfRightMostSeparator > 0) {\n      propertyName = fullPropertyName.substr(positionOfRightMostSeparator + 1);\n    }\n    var propertyGroup = \"\";\n    if (positionOfRightMostSeparator > 0) {\n      propertyGroup = fullPropertyName.substr(0, positionOfRightMostSeparator + 1); //includes the trailing \".\".\n    }\n    var propertyGroupWithoutArrayIndices = propertyGroup.replace(removeArrayBracketsRegEx, \"\");\n    return { group: propertyGroup, groupWithoutArrayIndices: propertyGroupWithoutArrayIndices, name: propertyName };\n  }\n\n  /**\n   * Collects all flattened name-value-pairs into one object using the property names as keys and their values as values (map-like).\n   * Example: `{name: \"accountNumber\", value: \"12345\"}` becomes `mapObject[\"accountNumber\"]=\"12345\"`.\n   *\n   * @param {NameValuePair[]} elements flattened array of name-value-pairs\n   * @param {object} mapObject container to collect the results. Needs to be created before e.g. using `{}`.\n   * @param {function} filterMatchesFunction takes the property name as string argument and returns true (include) or false (exclude).\n   */\n  function addToFilteredMapObject(elements, mapObject, filterMatchesFunction) {\n    var index, element;\n    for (index = 0; index < elements.length; index += 1) {\n      element = elements[index];\n      if (typeof filterMatchesFunction === \"function\" && filterMatchesFunction(element.name)) {\n        mapObject[element.name] = element.value;\n      }\n    }\n    return mapObject;\n  }\n\n  /**\n   * Public interface\n   * @scope template_resolver.Resolver\n   */\n  return Resolver;\n})();\n","/**\n * @file datarestructor transforms parsed JSON objects into a uniform data structure\n * @version {@link https://github.com/JohT/data-restructor-js/releases/latest latest version}\n * @author JohT\n */\n\n \"use strict\";\nvar module = module || {}; // Fallback for vanilla js without modules\n\n/**\n * datarestructor namespace and module declaration.\n * It contains all functions to convert an object (e.g. parsed JSON) into uniform enumerated list of described field entries.\n * \n * <b>Transformation steps:</b>\n * - JSON\n * - flatten\n * - mark and identify\n * - add array fields\n * - deduplicate \n * - group\n * - flatten again\n * @module datarestructor\n */\nvar datarestructor = module.exports={}; // Export module for npm...\n\nvar internal_object_tools = internal_object_tools || require(\"../../lib/js/flattenToArray\"); // supports vanilla js & npm\nvar template_resolver = template_resolver || require(\"../../src/js/templateResolver\"); // supports vanilla js & npm\n\n/**\n * Takes the full qualified original property name and extracts a simple name out of it.\n * \n * @global\n * @callback propertyNameFunction\n * @param {string} propertyName full qualified, point separated property name \n * @return {String} extracted, simple name\n */\n\n/**\n * Describes a selected part of the incoming data structure and defines, \n * how the data should be transformed.\n * \n * @global\n * @typedef {Object} PropertyStructureDescription\n * @property {string} type - \"\"(default). Some examples: \"summary\" for e.g. a list overview. \"detail\" e.g. when a summary is selected. \"filter\" e.g. for field/value pair results that can be selected as search parameters.\n * @property {string} category - name of the category. Default = \"\". Could contain a short domain name like \"product\" or \"vendor\".\n * @property {string} [abbreviation=\"\"] - one optional character, a symbol character or a short abbreviation of the category\n * @property {string} [image=\"\"] - one optional path to an image resource\n * @property {boolean} propertyPatternTemplateMode - \"false\"(default): property name needs to be equal to the pattern. \"true\" allows variables like \"{{fieldName}}\" inside the pattern.\n * @property {string} propertyPattern - property name pattern (without array indices) to match\n * @property {string} indexStartsWith - \"\"(default) matches all ids. String that needs to match the beginning of the id. E.g. \"1.\" will match id=\"1.3.4\" but not \"0.1.2\".\n * @property {propertyNameFunction} getDisplayNameForPropertyName - display name for the property. \"\"(default) last property name element with upper case first letter.\n * @property {propertyNameFunction} getFieldNameForPropertyName - field name for the property. \"\" (default) last property name element.\n * @property {string} groupName - name of the property, that contains grouped entries. Default=\"group\".\n * @property {string} groupPattern - Pattern that describes how to group entries. \"groupName\" defines the name of this group. A pattern may contain variables in double curly brackets {{variable}}.\n * @property {string} groupDestinationPattern - Pattern that describes where the group should be moved to. Default=\"\"=Group will not be moved. A pattern may contain variables in double curly brackets {{variable}}.\n * @property {string} groupDestinationName - (default=groupName) Name of the group when it had been moved to the destination.\n * @property {string} deduplicationPattern - Pattern to use to remove duplicate entries. A pattern may contain variables in double curly brackets {{variable}}.\n */\n\n/**\n * Builder for a {@link PropertyStructureDescription}.\n */\ndatarestructor.PropertyStructureDescriptionBuilder = (function () {\n  \"use strict\";\n\n  /**\n   * Constructor function and container for everything, that needs to exist per instance.\n   * @constructs PropertyStructureDescriptionBuilder\n   */\n  function PropertyStructureDescription() {\n    /**\n     * @type {PropertyStructureDescription}\n     */\n    this.description = {\n      type: \"\",\n      category: \"\",\n      abbreviation: \"\",\n      image: \"\",\n      propertyPatternTemplateMode: false,\n      propertyPattern: \"\",\n      indexStartsWith: \"\",\n      groupName: \"group\",\n      groupPattern: \"\",\n      groupDestinationPattern: \"\",\n      groupDestinationName: null,\n      deduplicationPattern: \"\",\n      getDisplayNameForPropertyName: null,\n      getFieldNameForPropertyName: null,\n      matchesPropertyName: null\n    };\n    /**\n     * Sets the type.\n     * \n     * Contains the type of the entry, for example: \n     * - \"summary\" for e.g. a list overview. \n     * - \"detail\" e.g. when a summary is selected. \n     * - \"filter\" e.g. for field/value pair results that can be selected as search parameters.\n     * \n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {PropertyStructureDescriptionBuilder}\n     * @example type(\"summary\")\n     */\n    this.type = function (value) {\n      this.description.type = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the category.\n     * \n     * Contains a short domain nam, for example: \n     * - \"product\" for products\n     * - \"vendor\" for vendors\n     * \n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {PropertyStructureDescriptionBuilder}\n     * @example category(\"Product\")\n     */\n    this.category = function (value) {\n      this.description.category = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the optional abbreviation.\n     * \n     * Contains a symbol character or a very short abbreviation of the category.\n     * - \"P\" for products\n     * - \"V\" for vendors\n     * \n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {PropertyStructureDescriptionBuilder}\n     * @example abbreviation(\"P\")\n     */\n    this.abbreviation = function (value) {\n      this.description.abbreviation = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the optional path to an image resource.\n     * \n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {PropertyStructureDescriptionBuilder}\n     * @example image(\"img/product.png\")\n     */\n    this.image = function (value) {\n      this.description.image = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Sets \"equal mode\" for the property pattern.\n     * \n     * \"propertyPattern\" need to match exactly if this mode is activated.\n     *  It clears propertyPatternTemplateMode which means \"equal\" mode.\n     * @function\n     * @returns {PropertyStructureDescriptionBuilder}\n     */\n    this.propertyPatternEqualMode = function () {\n      this.description.propertyPatternTemplateMode = false;\n      return this;\n    };\n    /**\n     * Sets \"template mode\" for the property pattern.\n     * \n     * \"propertyPattern\" can contain variables like {{fieldName}} and\n     * doesn't need to match the property name exactly. If the \"propertyPattern\"\n     * is shorter than the property name, it also matches when the property name\n     * starts with the \"propertyPattern\".\n     * \n     * @function\n     * @returns {PropertyStructureDescriptionBuilder}\n     */\n    this.propertyPatternTemplateMode = function () {\n      this.description.propertyPatternTemplateMode = true;\n      return this;\n    };\n    /**\n     * Sets the property name pattern. \n     * \n     * Contains single property names with sub types separated by \".\" without array indices.\n     * May contain variables in double curly brackets.\n     * \n     * Example: \n     * - responses.hits.hits._source.{{fieldName}}\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {PropertyStructureDescriptionBuilder}\n     * @example propertyPattern(\"responses.hits.hits._source.{{fieldName}}\")\n     */\n    this.propertyPattern = function (value) {\n      this.description.propertyPattern = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the optional beginning of the id that needs to match.\n     * Matches all indices if set to \"\" (or not called).\n     * \n     * For example:\n     * - \"1.\" will match id=\"1.3.4\" but not \"0.1.2\".\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {PropertyStructureDescriptionBuilder}\n     * @example indexStartsWith(\"1.\")\n     */\n    this.indexStartsWith = function (value) {\n      this.description.indexStartsWith = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Overrides the display name of the property.\n     * \n     * If it is not set or set to \"\" then it will be derived from the\n     * last part of original property name starting with an upper case character.\n     *  \n     * For example:\n     * - \"Product\"\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {PropertyStructureDescriptionBuilder}\n     * @example displayPropertyName(\"Product\")\n     */\n    this.displayPropertyName = function (value) {\n      this.description.getDisplayNameForPropertyName = createNameExtractFunction(value, this.description);\n      if (isSpecifiedString(value)) {\n        return this;\n      }\n      this.description.getDisplayNameForPropertyName = removeArrayValuePropertyPostfixFunction(\n        this.description.getDisplayNameForPropertyName\n      );\n      this.description.getDisplayNameForPropertyName = upperCaseFirstLetterForFunction(\n        this.description.getDisplayNameForPropertyName\n      );\n      return this;\n    };\n    /**\n     * Overrides the (technical) field name of the property.\n     * \n     * If it is not set or set to \"\" then it will be derived from the\n     * last part of original property name.\n     *  \n     * For example:\n     * - \"product\"\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {PropertyStructureDescriptionBuilder}\n     * @example fieldName(\"product\")\n     */\n    this.fieldName = function (value) {\n      this.description.getFieldNameForPropertyName = createNameExtractFunction(value, this.description);\n      return this;\n    };\n    /**\n     * Sets the name of the property, that contains grouped entries. \n     * \n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {PropertyStructureDescriptionBuilder}\n     * @example groupName(\"details\")\n     */\n    this.groupName = function (value) {\n      this.description.groupName = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the pattern that describes how to group entries. \n     * \n     * \"groupName\" defines the name of this group.\n     * A pattern may contain variables in double curly brackets {{variable}}.\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {PropertyStructureDescriptionBuilder}\n     * @example groupPattern(\"{{type}}-{{category}}\")\n     */\n    this.groupPattern = function (value) {\n      this.description.groupPattern = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the pattern that describes where the group should be moved to. \n     * \n     * Default=\"\"=Group will not be moved.\n     * A pattern may contain variables in double curly brackets {{variable}}.\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {PropertyStructureDescriptionBuilder}\n     * @example groupDestinationPattern(\"main-{{category}}\")\n     */\n    this.groupDestinationPattern = function (value) {\n      this.description.groupDestinationPattern = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the name of the group when it had been moved to the destination.\n     * \n     * The default value is the groupName, which will be used when the value is not valid (null or empty)\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {PropertyStructureDescriptionBuilder}\n     * @example groupDestinationPattern(\"options\")\n     */\n    this.groupDestinationName = function (value) {\n      this.description.groupDestinationName = withDefault(value, this.description.groupName);\n      return this;\n    };\n    /**\n     * Sets the pattern to be used to remove duplicate entries. \n     * \n     * A pattern may contain variables in double curly brackets {{variable}}.\n     * A pattern may contain variables in double curly brackets {{variable}}.\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {PropertyStructureDescriptionBuilder}\n     * @example deduplicationPattern(\"{{category}}--{{type}}--{{index[0]}}--{{index[1]}}--{{fieldName}}\")\n     */\n    this.deduplicationPattern = function (value) {\n      this.description.deduplicationPattern = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Finalizes the settings and builds the  PropertyStructureDescription.\n     * @function\n     * @returns {PropertyStructureDescription}\n     */\n    this.build = function () {\n      this.description.matchesPropertyName = createFunctionMatchesPropertyName(this.description);\n      if (this.description.getDisplayNameForPropertyName == null) {\n        this.displayPropertyName(\"\");\n      }\n      if (this.description.getFieldNameForPropertyName == null) {\n        this.fieldName(\"\");\n      }\n      if (this.description.groupDestinationName == null) {\n        this.groupDestinationName(\"\");\n      }\n      return this.description;\n    };\n  }\n\n  function createNameExtractFunction(value, description) {\n    if (isSpecifiedString(value)) {\n      return function () {\n        return value;\n      };\n    }\n    if (description.propertyPatternTemplateMode) {\n      var patternToMatch = description.propertyPattern; // closure (closed over) parameter\n      return extractNameUsingTemplatePattern(patternToMatch);\n    }\n    return extractNameUsingRightMostPropertyNameElement();\n  }\n\n  function createFunctionMatchesPropertyName(description) {\n    var propertyPatternToMatch = description.propertyPattern; // closure (closed over) parameter\n    if (!isSpecifiedString(propertyPatternToMatch)) {\n      return function () {\n        return false; // Without a propertyPattern, no property will match (deactivated mark/identify).\n      };\n    }\n    if (description.propertyPatternTemplateMode) {\n      return function (propertyNameWithoutArrayIndices) {\n        return templateModePatternRegexForPattern(propertyPatternToMatch).exec(propertyNameWithoutArrayIndices) != null;\n      };\n    }\n    return function (propertyNameWithoutArrayIndices) {\n      return propertyNameWithoutArrayIndices === propertyPatternToMatch;\n    };\n  }\n\n  function rightMostPropertyNameElement(propertyName) {\n    var regularExpression = new RegExp(\"(\\\\w+)$\", \"gi\");\n    var match = propertyName.match(regularExpression);\n    if (match != null) {\n      return match[0];\n    }\n    return propertyName;\n  }\n\n  function upperCaseFirstLetter(value) {\n    if (value.length > 1) {\n      return value.charAt(0).toUpperCase() + value.slice(1);\n    }\n    return value;\n  }\n\n  function upperCaseFirstLetterForFunction(nameExtractFunction) {\n    return function (propertyName) {\n      return upperCaseFirstLetter(nameExtractFunction(propertyName));\n    };\n  }\n\n  function removeArrayValuePropertyPostfixFunction(nameExtractFunction) {\n    return function (propertyName) {\n      var name = nameExtractFunction(propertyName);\n      name = name != null ? name : \"\";\n      return name.replace(\"_comma_separated_values\", \"\");\n    };\n  }\n\n  function extractNameUsingTemplatePattern(propertyPattern) {\n    return function (propertyName) {\n      var regex = templateModePatternRegexForPatternAndVariable(propertyPattern, \"{{fieldName}}\");\n      var match = regex.exec(propertyName);\n      if (match && match[1] != \"\") {\n        return match[1];\n      }\n      return rightMostPropertyNameElement(propertyName);\n    };\n  }\n\n  function extractNameUsingRightMostPropertyNameElement() {\n    return function (propertyName) {\n      return rightMostPropertyNameElement(propertyName);\n    };\n  }\n\n  function templateModePatternRegexForPattern(propertyPatternToUse) {\n    var placeholderInDoubleCurlyBracketsRegEx = new RegExp(\"\\\\\\\\\\\\{\\\\\\\\\\\\{[-\\\\w]+\\\\\\\\\\\\}\\\\\\\\\\\\}\", \"gi\");\n    return templateModePatternRegexForPatternAndVariable(propertyPatternToUse, placeholderInDoubleCurlyBracketsRegEx);\n  }\n\n  function templateModePatternRegexForPatternAndVariable(propertyPatternToUse, variablePattern) {\n    var pattern = escapeCharsForRegEx(propertyPatternToUse);\n    if (typeof variablePattern === \"string\") {\n      variablePattern = escapeCharsForRegEx(variablePattern);\n    }\n    pattern = pattern.replace(variablePattern, \"([-\\\\w]+)\");\n    pattern = \"^\" + pattern;\n    return new RegExp(pattern, \"i\");\n  }\n\n  function escapeCharsForRegEx(characters) {\n    var nonWordCharactersRegEx = new RegExp(\"([^-\\\\w])\", \"gi\");\n    return characters.replace(nonWordCharactersRegEx, \"\\\\$1\");\n  }\n\n  function withDefault(value, defaultValue) {\n    return isSpecifiedString(value) ? value : defaultValue;\n  }\n\n  function isSpecifiedString(value) {\n    return typeof value === \"string\" && value != null && value != \"\";\n  }\n\n  return PropertyStructureDescription;\n})();\n\n/**\n * @global\n * @typedef {Object} DescribedEntry\n * @property {string} category - category of the result from the PropertyStructureDescription using a short name or e.g. a symbol character\n * @property {string} type - type of the result from PropertyStructureDescription\n * @property {string} [abbreviation=\"\"] - one optional character, a symbol character or a short abbreviation of the category\n * @property {string} [image=\"\"] - one optional path to an image resource\n * @property {string} index - array of numbers containing the split index. Example: \"responses[2].hits.hits[4]._source.name\" leads to an array with the two elements: [2,4]\n * @property {string} displayName - display name extracted from the point separated hierarchical property name, e.g. \"Name\"\n * @property {string} fieldName - field name extracted from the point separated hierarchical property name, e.g. \"name\"\n * @property {string} value - content of the field\n * @property {string} resolveTemplate - function, that replaces propertyNames in double curly brackets with the values in this object.\n * @property {string} publicFieldsJson - function, that converts the public fields including grouped sub structures to JSON.\n * @property {boolean} _isMatchingIndex - true, when _identifier.index matches the described \"indexStartsWith\"\n * @property {Object} _identifier - internal structure for identifier. Avoid using it outside since it may change.\n * @property {string} _identifier.index - array indices in hierarchical order separated by points, e.g. \"0.0\"\n * @property {string} _identifier.value - the (single) value of the \"flattened\" property, e.g. \"Smith\"\n * @property {string} _identifier.propertyNameWithArrayIndices - the \"original\" flattened property name in hierarchical order separated by points, e.g. \"responses[0].hits.hits[0]._source.name\"\n * @property {string} _identifier.propertyNameWithoutArrayIndices - same as propertyNamesWithArrayIndices but without array indices, e.g. \"responses.hits.hits._source.name\"\n * @property {string} _identifier.groupId - Contains the resolved groupPattern from the PropertyStructureDescription. Entries with the same id will be grouped into the \"groupName\" of the PropertyStructureDescription.\n * @property {string} _identifier.groupDestinationId - Contains the resolved groupDestinationPattern from the PropertyStructureDescription. Entries with this id will be moved to the given destination group.\n * @property {string} _identifier.deduplicationId - Contains the resolved deduplicationPattern from the PropertyStructureDescription. Entries with the same id will be considered to be a duplicate and hence removed.\n * @property {Object} _description - PropertyStructureDescription for internal use. Avoid using it outside since it may change.\n */\n\n/**\n * Returns a field value of the given {@link DescribedEntry}.\n * \n * @global\n * @callback stringFieldOfDescribedEntryFunction\n * @param {DescribedEntry} entry described entry that contains the field that should be returned\n * @returns {String} field value \n */\n\n/**\n * Creates a {@link DescribedEntry}.\n */\ndatarestructor.DescribedEntryCreator = (function () {\n  \"use strict\";\n\n  var removeArrayBracketsRegEx = new RegExp(\"\\\\[\\\\d+\\\\]\", \"gi\");\n\n  /**\n   * Constructor function and container for everything, that needs to exist per instance.\n   * @constructs DescribedEntry\n   * @type {DescribedEntry}\n   */\n  function DescribedEntry(entry, description) {\n    var indices = indicesOf(entry.name);\n    var propertyNameWithoutArrayIndices = entry.name.replace(removeArrayBracketsRegEx, \"\");\n    var templateResolver = new template_resolver.Resolver(this);\n\n    this.category = description.category;\n    this.type = description.type;\n    this.abbreviation = description.abbreviation;\n    this.image = description.image;\n    /**\n     * Array of numbers containing the split index. \n     * Example: \"responses[2].hits.hits[4]._source.name\" leads to an array with two elements: [2,4]\n     * This is the public version of the internal variable _identifier.index, which contains in contrast all index elements in one point separated string (e.g. \"2.4\").\n     */\n    this.index = indices.numberArray;\n    this.displayName = description.getDisplayNameForPropertyName(propertyNameWithoutArrayIndices);\n    this.fieldName = description.getFieldNameForPropertyName(propertyNameWithoutArrayIndices);\n    this.value = entry.value;\n    this._isMatchingIndex = indices.pointDelimited.indexOf(description.indexStartsWith) == 0;\n    this._description = description;\n\n    this._identifier = {\n      index: indices.pointDelimited,\n      propertyNameWithArrayIndices: entry.name,\n      propertyNameWithoutArrayIndices: propertyNameWithoutArrayIndices,\n      groupId: \"\",\n      groupDestinationId: \"\",\n      deduplicationId: \"\"\n    };\n    this._identifier.groupId = templateResolver.replaceResolvableFields(\n      description.groupPattern,\n      templateResolver.resolvableFieldsOfAll(this, this._description, this._identifier)\n    );\n    this._identifier.groupDestinationId = templateResolver.replaceResolvableFields(\n      description.groupDestinationPattern,\n      templateResolver.resolvableFieldsOfAll(this, this._description, this._identifier)\n    );\n    this._identifier.deduplicationId = templateResolver.replaceResolvableFields(\n      description.deduplicationPattern,\n      templateResolver.resolvableFieldsOfAll(this, this._description, this._identifier)\n    );\n    /**\n     * Resolves the given template.\n     * \n     * The template may contain variables in double curly brackets.\n     * Supported variables are all properties of this object, e.g. \"{{fieldName}}\", \"{{displayName}}\", \"{{value}}\".\n     * Since this object may also contains (described) groups of sub objects, they can also be used, e.g. \"{{summaries[0].value}}\" \n     * Parts of the index can be inserted by using e.g. \"{{index[1]}}\".\n     * \n     * @param {string} template\n     * @returns {string} resolved template\n     */\n    this.resolveTemplate = function (template) {\n      return new template_resolver.Resolver(this).resolveTemplate(template);\n    };\n\n    /**\n     * Returns JSON containing all the public fields\n     * @param space — Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.\n     */\n    this.publicFieldsJson = function (space) {\n      var propertyNames = propertyNamesWithoutObjectsAndFunctions(this);\n      var prettyPrintJsonSpace = typeof space === \"number\" ? space : 0;\n      return JSON.stringify(this, replacerRetainsOnlyDefinedPublicFields(propertyNames), prettyPrintJsonSpace);\n    };\n  }\n\n  /**\n   * @typedef {Object} ExtractedIndices\n   * @property {string} pointDelimited - bracket indices separated by points\n   * @property {number[]} numberArray as array of numbers\n   */\n\n  /**\n   * Returns \"1.12.123\" and [1,12,123] for \"results[1].hits.hits[12].aggregates[123]\".\n   *\n   * @param {String} fullPropertyName\n   * @return {ExtractedIndices} extracted indices in different representations\n   */\n  function indicesOf(fullPropertyName) {\n    var arrayBracketsRegEx = new RegExp(\"\\\\[(\\\\d+)\\\\]\", \"gi\");\n    return indicesOfWithRegex(fullPropertyName, arrayBracketsRegEx);\n  }\n\n  /**\n   * Returns \"1.12.123\" and [1,12,123] for \"results[1].hits.hits[12].aggregates[123]\".\n   *\n   * @param {string} fullPropertyName\n   * @param {RegExp} regexWithOneNumberGroup\n   * @return {ExtractedIndices} extracted indices in different representations\n   */\n  function indicesOfWithRegex(fullPropertyName, regexWithOneNumberGroup) {\n    var pointDelimited = \"\";\n    var numberArray = [];\n    var match;\n    do {\n      match = regexWithOneNumberGroup.exec(fullPropertyName);\n      if (match) {\n        if (pointDelimited.length > 0) {\n          pointDelimited += \".\";\n        }\n        pointDelimited += match[1];\n        numberArray.push(parseInt(match[1]));\n      }\n    } while (match);\n    return { pointDelimited: pointDelimited, numberArray: numberArray };\n  }\n\n  /**\n   * Returns an array of property names of the given object without properties of type \"object\".\n   */\n  function propertyNamesWithoutObjectsAndFunctions(obj) {\n    var result = [];\n    var propertyIndex;\n    var propertyName;\n    var propertyNames = Object.keys(obj);\n    for (propertyIndex = 0; propertyIndex < propertyNames.length; propertyIndex += 1) {\n      propertyName = propertyNames[propertyIndex];\n      if (typeof obj[propertyName] !== \"object\" && typeof obj[propertyName] !== \"function\") {\n        result.push(propertyName);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Returns a function, that takes two arguments and is therefore applicable to be used as \"replacer\" parameter for JSON.stringify.\n   * It only retains the given property names and removes everything else except for embedded \"sub\" objects\n   * with the same structure (and only one recursive level). These sub objects will be cloned to get rid of the circular\n   * structure that would lead to the error message \"TypeError: Converting circular structure to JSON\".\n   * Internal properties containing objects but beginning with an underscore in their name will also be removed.\n   *\n   * @param key name of the property to be converted to JSON or empty for the whole object.\n   * @param value value of the property to be converted to JSON.\n   * @returns function that is applicable to be used as \"replacer\" parameter for JSON.stringify.\n   */\n  function replacerRetainsOnlyDefinedPublicFields(propertyNames) {\n    return function (key, value) {\n      return onlyDefinedPublicFields(key, value, propertyNames);\n    };\n  }\n  /**\n   * This function takes two arguments and is therefore applicable to be used as \"replacer\" parameter for JSON.stringify.\n   * It removes internal properties beginning with an underscore in their name\n   * and creates new objects for grouped structures (only one recursion level) to get rid of the circular structure\n   * that would lead to the error message \"TypeError: Converting circular structure to JSON\".\n   *\n   * @param {string} key name of the property to be converted to JSON or empty for the whole object.\n   * @param {string} value value of the property to be converted to JSON.\n   * @param {string[]} propertyNames array of strings containing only the public fields that will be converted to JSON.\n   */\n  function onlyDefinedPublicFields(key, value, propertyNames) {\n    if (typeof value !== \"object\" && propertyNames.indexOf(key) < 0 && key != \"\") {\n      return undefined; // Remove all properties that are not contained in the given list.\n    }\n    if (key.indexOf(\"_\") == 0) {\n      return undefined; //Remove all properties with a name beginning with an underscore (internal fields).\n    }\n    if (Array.isArray(value)) {\n      var index, propertyIndex;\n      var entry, clonedEntry;\n      var clonedArray = [];\n      for (index = 0; index < value.length; index += 1) {\n        entry = value[index];\n        clonedEntry = {};\n        for (propertyIndex = 0; propertyIndex < propertyNames.length; propertyIndex += 1) {\n          clonedEntry[propertyNames[propertyIndex]] = entry[propertyNames[propertyIndex]];\n        }\n        clonedArray.push(clonedEntry);\n      }\n      return clonedArray;\n    }\n    return value;\n  }\n\n  return DescribedEntry;\n})();\n\n/**\n * Main class for the data transformation.\n */\ndatarestructor.Transform = (function () {\n  \"use strict\";\n\n  /**\n   * Constructor function and container for anything, that needs to exist per instance.\n   * @param {PropertyStructureDescription[]} descriptions\n   * @constructs Transform\n   */\n  function Transform(descriptions) {\n    /**\n     * Descriptions of the input data that define the behaviour of the transformation.\n     * @type {DescribedEntry[]}\n     */\n    this.descriptions = descriptions;\n    /**\n     * DebugMode enables detailed logging for troubleshooting.\n     * @type {boolean}\n     */\n    this.debugMode = false;\n    /**\n     * Enables debug mode. Logs additional informations.\n     * @returns Transform\n     */\n    this.enableDebugMode = function () {\n      this.debugMode = true;\n      return this;\n    };\n    /**\n     * \"Assembly line\", that takes the (pared JSON) data and processes it using all given descriptions in their given order.\n     * @param {object} data - parsed JSON data or any other data object\n     * @returns {DescribedEntry[]}\n     * @example \n     * var allDescriptions = [];\n     * allDescriptions.push(summariesDescription());\n     * allDescriptions.push(detailsDescription());\n     * var result = new datarestructor.Transform(allDescriptions).processJson(jsonData);\n     */\n    this.processJson = function (data) {\n      return processJsonUsingDescriptions(data, this.descriptions, this.debugMode);\n    };\n  }\n\n  /**\n   * \"Assembly line\", that takes the jsonData and processes it using all given descriptions in their given order.\n   * @param {object} jsonData - parsed JSON data or any other data object\n   * @param {PropertyStructureDescription[]} descriptions - already grouped entries\n   * @param {boolean} debugMode - false=default=off, true=write additional logs for detailed debugging\n   * @returns {DescribedEntry[]}\n   */\n  function processJsonUsingDescriptions(jsonData, descriptions, debugMode) {\n    // \"Flatten\" the hierarchical input json to an array of property names (point separated \"folders\") and values.\n    var processedData = internal_object_tools.flattenToArray(jsonData);\n    // Fill in properties ending with the name \"_comma_separated_values\" for array values to make it easier to display them.\n    processedData = fillInArrayValues(processedData);\n\n    if ((typeof debugMode === \"boolean\") && debugMode) {\n      console.log(\"flattened data with array values:\");\n      console.log(processedData);\n    }\n\n    // Mark, identify and harmonize the flattened data by applying one description after another in their given order.\n    var describedData = [];\n    var descriptionIndex, description, dataWithDescription;\n    for (descriptionIndex = 0; descriptionIndex < descriptions.length; descriptionIndex+=1) {\n      description = descriptions[descriptionIndex];\n      // Filter all entries that match the current description and enrich them with it\n      dataWithDescription = extractEntriesByDescription(processedData, description);\n      // Remove duplicate entries where a deduplicationPattern is described\n      describedData = deduplicateFlattenedData(describedData, dataWithDescription);\n    }\n    processedData = describedData;\n\n    // Group entries where a groupPattern is described\n    processedData = groupFlattenedData(processedData);\n\n    // Move group entries where a groupDestinationPattern is described\n    processedData = applyGroupDestinationPattern(processedData);\n\n    // Turns the grouped object back into an array of DescribedEntry-Objects\n    return propertiesAsArray(processedData);\n  }\n\n  /**\n   * Takes two arrays of objects, e.g. [{id: B, value: 2},{id: C, value: 3}]\n   * and [{id: A, value: 1},{id: B, value: 4}] and merges them into one:\n   * [{id: C, value: 3},{id: A, value: 1},{id: B, value: 4}]\n   *\n   * Entries with the same id (\"duplicates\") will be overwritten.\n   * Only the last element with the same id remains. The order is\n   * determined by the order of the array elements, whereas the first\n   * array comes before the second one. This means, that entries with the\n   * same id in the second array overwrite entries in the first array,\n   * and entries that occur later in the array overwrite earlier ones,\n   * if they have the same id.\n   *\n   * The id is extracted from every element using the given function.\n   *\n   * @param {DescribedEntry[]} entries\n   * @param {DescribedEntry[]} entriesToMerge\n   * @param {stringFieldOfDescribedEntryFunction} idOfElementFunction returns the id of an DescribedEntry\n   */\n  function mergeFlattenedData(entries, entriesToMerge, idOfElementFunction) {\n    var entriesToMergeById = asIdBasedObject(entriesToMerge, idOfElementFunction);\n    var merged = [];\n    var index, entry, id;\n    for (index = 0; index < entries.length; index+=1) {\n      entry = entries[index];\n      id = idOfElementFunction(entry);\n      if (id == null || id === \"\" || entriesToMergeById[id] == null) {\n        merged.push(entry);\n      }\n    }\n    for (index = 0; index < entriesToMerge.length; index+=1) {\n      entry = entriesToMerge[index];\n      merged.push(entry);\n    }\n    return merged;\n  }\n\n  /**\n   * Takes two arrays of objects, e.g. [{id: B, value: 2},{id: C, value: 3}]\n   * and [{id: A, value: 1},{id: B, value: 4}] and merges them into one:\n   * [{id: C, value: 3},{id: A, value: 1},{id: B, value: 4}]\n   *\n   * Entries with the same id (\"duplicates\") will be overwritten.\n   * Only the last element with the same id remains. The order is\n   * determined by the order of the array elements, whereas the first\n   * array comes before the second one. This means, that entries with the\n   * same id in the second array overwrite entries in the first array,\n   * and entries occurring later in the array overwrite earlier ones,\n   * if they have the same id.\n   *\n   * \"entriesToMerge\" will be returned directly, if \"entries\" is null or empty.\n   *\n   * The id is extracted from every element using their deduplication pattern (if available).\n   *\n   * @param {DescribedEntry[]} entries\n   * @param {DescribedEntry[]} entriesToMerge\n   * @param {stringFieldOfDescribedEntryFunction} idOfElementFunction returns the id of an DescribedEntry\n   * @see mergeFlattenedData\n   */\n  function deduplicateFlattenedData(entries, entriesToMerge) {\n    if (entries == null || entries.length == 0) {\n      return entriesToMerge;\n    }\n    var idOfElementFunction = function (entry) {\n      return entry._identifier.deduplicationId;\n    };\n    return mergeFlattenedData(entries, entriesToMerge, idOfElementFunction);\n  }\n\n  /**\n   * Converts the given elements to an object, that provides these\n   * entries by their id. For example, [{id: A, value: 1}] becomes\n   * result['A'] = 1.\n   * @param {DescribedEntry[]} elements of DescribedEntry elements\n   * @param {stringFieldOfDescribedEntryFunction} idOfElementFunction returns the id of an DescribedEntry\n   * @return {DescribedEntry[] entries indexed by id\n   */\n  function asIdBasedObject(elements, idOfElementFunction) {\n    var idIndexedObject = new Object();\n    for (var index = 0; index < elements.length; index++) {\n      var element = elements[index];\n      idIndexedObject[idOfElementFunction(element)] = element;\n    }\n    return idIndexedObject;\n  }\n\n  /**\n   * Converts the given elements into an object, that provides these\n   * entries by their id (determined by the entry's groupPattern).\n   * For example, [{id: A, value: 1}] becomes result['A'] = 1.\n   *\n   * Furthermore, this function creates a group property (determined by the entry's groupName)\n   * and collects all related elements (specified by their group pattern) in it.\n   *\n   * @param {DescribedEntry[]} elements of DescribedEntry elements\n   * @return {DescribedEntry[] entries indexed by id\n   */\n  function groupFlattenedData(flattenedData) {\n    return groupById(\n      flattenedData,\n      function (entry) {\n        return entry._identifier.groupId;\n      },\n      function (entry) {\n        return entry._description.groupName;\n      }\n    );\n  }\n\n  /**\n   * Converts the given elements into an object, that provides these\n   * entries by their id. For example, [{id: A, value: 1}] becomes\n   * result['A'] = 1. Furthermore, this function creates a group property (with the name )\n   * and collects all related elements (specified by their group pattern) in it.\n   *\n   * @param {DescribedEntry[]} elements of DescribedEntry elements\n   * @param {stringFieldOfDescribedEntryFunction} groupNameOfElementFunction function, that returns the name of the group property that will be created inside the \"main\" element.\n   * @param {stringFieldOfDescribedEntryFunction} groupIdOfElementFunction returns the group id of an DescribedEntry\n   * @return {DescribedEntry[] entries indexed by id\n   */\n  function groupById(elements, groupIdOfElementFunction, groupNameOfElementFunction) {\n    var groupedResult = new Object();\n    for (var index = 0; index < elements.length; index++) {\n      var element = elements[index];\n      var groupId = groupIdOfElementFunction(element);\n      if (groupId === \"\") {\n        continue;\n      }\n      var groupName = groupNameOfElementFunction(element);\n      if (groupName == null || groupName === \"\") {\n        continue;\n      }\n      if (!groupedResult[groupId]) {\n        groupedResult[groupId] = element;\n        groupedResult[groupId][groupName] = [];\n      }\n      groupedResult[groupId][groupName].push(element);\n    }\n    return groupedResult;\n  }\n\n  /**\n   * Extracts entries out of \"flattened\" JSON data and provides an array of objects.\n   * @param {Object[]} flattenedData - flattened json from search query result\n   * @param {string} flattenedData[].name - name of the property in hierarchical order separated by points\n   * @param {string} flattenedData[].value - value of the property as string\n   * @param {PropertyStructureDescription} - description of structure of the entries that should be extracted\n   * @return {DescribedEntry[]}\n   */\n  function extractEntriesByDescription(flattenedData, description) {\n    var removeArrayBracketsRegEx = new RegExp(\"\\\\[\\\\d+\\\\]\", \"gi\");\n    var filtered = [];\n\n    flattenedData.filter(function (entry) {\n      var propertyNameWithoutArrayIndices = entry.name.replace(removeArrayBracketsRegEx, \"\");\n      if (description.matchesPropertyName(propertyNameWithoutArrayIndices)) {\n        var describedEntry = new datarestructor.DescribedEntryCreator(entry, description);\n        if (describedEntry._isMatchingIndex) {\n          filtered.push(describedEntry);\n        }\n      }\n    });\n    return filtered;\n  }\n\n  /**\n   * Takes already grouped {@link DescribedEntry} objects and\n   * uses their \"_identifier.groupDestinationId\" (if exists)\n   * to move groups to the given destination.\n   *\n   * This is useful, if separately described groups like \"summary\" and \"detail\" should be put together,\n   * so that every summery contains a group with the regarding details.\n   *\n   * @param {DescribedEntry[]} groupedObject - already grouped entries\n   * @return {DescribedEntry[]}\n   */\n  function applyGroupDestinationPattern(groupedObject) {\n    var keys = Object.keys(groupedObject);\n    var keysToDelete = [];\n    for (var index = 0; index < keys.length; index++) {\n      var key = keys[index];\n      var entry = groupedObject[key];\n      if (entry._description.groupDestinationPattern != \"\") {\n        var destinationKey = entry._identifier.groupDestinationId;\n        if (groupedObject[destinationKey] != null) {\n          var newGroup = entry[entry._description.groupName];\n          var existingGroup = groupedObject[destinationKey][entry._description.groupDestinationName]; //join if exists\n          var updatedGroup = existingGroup != null ? existingGroup.concat(newGroup) : newGroup;\n          groupedObject[destinationKey][entry._description.groupDestinationName] = updatedGroup;\n          keysToDelete.push(key);\n        }\n      }\n    }\n    // delete all moved entries that had been collected by their key\n    for (index = 0; index < keysToDelete.length; index+=1) {\n      var keyToDelete = keysToDelete[index];\n      delete groupedObject[keyToDelete];\n    }\n    return groupedObject;\n  }\n\n  /**\n   * Fills in extra \"_comma_separated_values\" properties into the flattened data\n   * for properties that end with an array. E.g. response.hits.hits.tags[0]=\"active\" and response.hits.hits.tags[0]=\"ready\"\n   * will lead to the extra element \"response.hits.hits.tags_comma_separated_values=\"active, ready\".\n   *\n   * @return flattened data with filled in \"_comma_separated_values\" properties\n   */\n  function fillInArrayValues(flattenedData) {\n    var trailingArrayIndexRegEx = new RegExp(\"\\\\[\\\\d+\\\\]$\", \"gi\");\n    var result = [];\n    var lastArrayProperty = \"\";\n    var lastArrayPropertyValue = \"\";\n\n    flattenedData.filter(function (entry) {\n      if (!entry.name.match(trailingArrayIndexRegEx)) {\n        if (lastArrayProperty !== \"\") {\n          result.push({ name: lastArrayProperty + \"_comma_separated_values\", value: lastArrayPropertyValue });\n          lastArrayProperty = \"\";\n        }\n        result.push(entry);\n        return;\n      }\n      var propertyNameWithoutTrailingArrayIndex = entry.name.replace(trailingArrayIndexRegEx, \"\");\n      if (lastArrayProperty === propertyNameWithoutTrailingArrayIndex) {\n        lastArrayPropertyValue += \", \" + entry.value;\n      } else {\n        if (lastArrayProperty !== \"\") {\n          result.push({ name: lastArrayProperty + \"_comma_separated_values\", value: lastArrayPropertyValue });\n          lastArrayProperty = \"\";\n        }\n        lastArrayProperty = propertyNameWithoutTrailingArrayIndex;\n        lastArrayPropertyValue = entry.value;\n      }\n      result.push(entry);\n    });\n    return result;\n  }\n\n  function propertiesAsArray(groupedData) {\n    var result = [];\n    var propertyNames = Object.keys(groupedData);\n    for (var propertyIndex = 0; propertyIndex < propertyNames.length; propertyIndex++) {\n      var propertyName = propertyNames[propertyIndex];\n      var propertyValue = groupedData[propertyName];\n      result.push(propertyValue);\n    }\n    return result;\n  }\n\n  return Transform;\n})();\n\n/**\n * Main fassade for the data restructor as static function(s).\n * \n * @example \n * var allDescriptions = [];\n * allDescriptions.push(summariesDescription());\n * allDescriptions.push(detailsDescription());\n * var result = datarestructor.Restructor.processJsonUsingDescriptions(jsonData, allDescriptions);\n * @namespace\n */\ndatarestructor.Restructor = {};\n/**\n * Static fassade function for the \"Assembly line\", that takes the jsonData and processes it using all given descriptions in their given order.\n * @param {object} jsonData - parsed JSON data or any other data object\n * @param {PropertyStructureDescription[]} descriptions - already grouped entries\n * @param {boolean} debugMode - false=default=off, true=write additional logs for detailed debugging\n * @returns {DescribedEntry[]}\n */\ndatarestructor.Restructor.processJsonUsingDescriptions = function(jsonData, descriptions, debugMode) {\n  var restructor = new datarestructor.Transform(descriptions);\n  if (debugMode) {\n    restructor.enableDebugMode();\n  }\n  return restructor.processJson(jsonData);\n};","\"use strict\";\nrequire(\"../../lib/js/polyfills/isArrayPolyfill.js\");\nrequire(\"../../lib/js/polyfills/arrayFilterPolyfill.js\");\nrequire(\"../../lib/js/polyfills/indexOfPolyfill.js\");\nrequire(\"../../lib/js/polyfills/objectKeysPolyfill.js\");\nvar datarestructor = require(\"../../src/js/datarestructor.js\");\nmodule.exports= {datarestructor};\n"]}