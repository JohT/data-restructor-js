{"version":3,"sources":["../../lib/js/flattenToArray.js","templateResolver.js","describedfield.js","datarestructor.js"],"names":["module","internal_object_tools","exports","flattenToArray","data","maxRecursionDepth","result","recurse","cur","prop","depth","Object","push","name","value","Array","isArray","i","l","length","isEmpty","p","templateResolverInternalCreateIfNotExists","objectToCheck","template_resolver","internalCreateIfNotExists","require","Resolver","removeArrayBracketsRegEx","RegExp","getPropertyNameInfos","fullPropertyName","positionOfRightMostSeparator","lastIndexOf","propertyName","substr","propertyGroup","propertyGroupWithoutArrayIndices","replace","group","groupWithoutArrayIndices","addToFilteredMapObject","elements","mapObject","filterMatchesFunction","index","element","sourceDataObject","resolveTemplate","template","replaceResolvableFields","addFieldsPerGroup","map","propertyNames","propertyInfo","propertyValue","keys","resolvableFieldsOfAll","ignoreInternalFields","indexOf","arguments","stringContainingVariables","resolvableFields","replaced","propertyIndex","describedFieldInternalCreateIfNotExists","described_field","DescribedDataFieldBuilder","withDefaultString","defaultValue","isSpecifiedString","withDefaultArray","describedField","category","type","abbreviation","image","groupNames","displayName","fieldName","fromDescribedDataField","build","copyWithoutGroups","describedDataField","DescribedDataFieldGroup","dataField","addGroupEntry","groupName","addGroupEntries","describedFields","datarestructorInternalCreateIfNotExists","datarestructor","PropertyStructureDescriptionBuilder","createNameExtractFunction","description","propertyPatternTemplateMode","patternToMatch","propertyPattern","extractNameUsingTemplatePattern","regex","templateModePatternRegexForPatternAndVariable","match","exec","rightMostPropertyNameElement","extractNameUsingRightMostPropertyNameElement","regularExpression","propertyPatternToUse","variablePattern","pattern","escapeCharsForRegEx","characters","nonWordCharactersRegEx","withDefault","PropertyStructureDescription","indexStartsWith","groupPattern","groupDestinationPattern","groupDestinationName","deduplicationPattern","getDisplayNameForPropertyName","getFieldNameForPropertyName","matchesPropertyName","propertyPatternEqualMode","displayPropertyName","nameExtractFunction","upperCaseFirstLetterForFunction","upperCaseFirstLetter","charAt","toUpperCase","slice","removeArrayValuePropertyPostfixFunction","propertyPatternToMatch","propertyNameWithoutArrayIndices","templateModePatternRegexForPattern","placeholderInDoubleCurlyBracketsRegEx","createFunctionMatchesPropertyName","DescribedEntryCreator","DescribedEntry","entry","indices","arrayBracketsRegEx","indicesOfWithRegex","regexWithOneNumberGroup","pointDelimited","numberArray","parseInt","templateResolver","_isMatchingIndex","_description","_identifier","propertyNameWithArrayIndices","groupId","groupDestinationId","deduplicationId","describedEntry","describedEntries","describedFieldDataGroup","Transform","mergeFlattenedData","entries","entriesToMerge","idOfElementFunction","entriesToMergeById","id","asIdBasedObject","idIndexedObject","merged","deduplicateFlattenedData","extractEntriesByDescription","flattenedData","filtered","filter","descriptions","debugMode","enableDebugMode","processJson","processJsonUsingDescriptions","jsonData","processedData","trailingArrayIndexRegEx","lastArrayProperty","lastArrayPropertyValue","propertyNameWithoutTrailingArrayIndex","console","log","describedData","descriptionIndex","dataWithDescription","propertiesAsArray","groupedData","applyGroupDestinationPattern","groupedObject","keysToDelete","key","destinationKey","newGroup","keyToDelete","groupFlattenedData","groupById","groupIdOfElementFunction","groupNameOfElementFunction","groupedResult","Restructor","restructor"],"mappings":"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","file":"datarestructor.js","sourceRoot":"../src/js","sourcesContent":["\"use strict\";\n/**\n * @fileOverview Modded (compatibility, recursion depth) version of: https://stackoverflow.com/questions/19098797/fastest-way-to-flatten-un-flatten-nested-json-objectss\n * @version ${project.version}\n * @see {@link https://stackoverflow.com/questions/19098797/fastest-way-to-flatten-un-flatten-nested-json-objectss|stackoverflow flatten nested json objects}\n */\nvar module = module || {}; // Fallback for vanilla js without modules\n\n/**\n * internal_object_tools. Not meant to be used outside this repository.\n * @default {}\n */\nvar internal_object_tools = module.exports={}; // Export module for npm...\n\n/**\n * @typedef {Object} NameValuePair\n * @property {string} name - point separated names of the flattened main and sub properties, e.g. \"responses[2].hits.hits[4]._source.name\".\n * @property {string} value - value of the property\n */\n\n/**\n * @param {object} data hierarchical object that may consist fo fields, subfields and arrays.\n * @param {number} maxRecursionDepth\n * @returns {NameValuePair[]} array of property name and value pairs\n */\ninternal_object_tools.flattenToArray = function (data, maxRecursionDepth) {\n  var result = [];\n  if (typeof maxRecursionDepth !== \"number\" || maxRecursionDepth < 1) {\n    maxRecursionDepth = 20;\n  }\n  function recurse(cur, prop, depth) {\n    if (depth > maxRecursionDepth || typeof cur === \"function\") {\n      return;\n    }\n    if (Object(cur) !== cur) {\n      result.push({ name: prop, value: cur });\n    } else if (Array.isArray(cur)) {\n      var i;\n      var l = cur.length;\n      for (i = 0; i < l; i += 1) {\n        recurse(cur[i], prop + \"[\" + i + \"]\", depth + 1);\n      }\n      if (l === 0) {\n        result[prop] = [];\n        result.push({ name: prop, value: \"\" });\n      }\n    } else {\n      var isEmpty = true;\n      var p;\n      for (p in cur) {\n        isEmpty = false;\n        recurse(cur[p], prop ? prop + \".\" + p : p, depth + 1);\n      }\n      if (isEmpty && prop) {\n        result.push({ name: prop, value: \"\" });\n      }\n    }\n  }\n  recurse(data, \"\", 0);\n  return result;\n};\n","/**\n * @file Provides a simple template resolver, that replaces variables in double curly brackets with the values of a given object.\n * @version {@link https://github.com/JohT/data-restructor-js/releases/latest latest version}\n * @author JohT\n * @version ${project.version}\n */\n\"use strict\";\nvar module = templateResolverInternalCreateIfNotExists(module); // Fallback for vanilla js without modules\n\nfunction templateResolverInternalCreateIfNotExists(objectToCheck) {\n  return objectToCheck || {};\n}\n\n/**\n * Provides a simple template resolver, that replaces variables in double curly brackets with the values of a given object.\n * @module template_resolver\n */\nvar template_resolver = (module.exports = {}); // Export module for npm...\ntemplate_resolver.internalCreateIfNotExists = templateResolverInternalCreateIfNotExists;\n\nvar internal_object_tools = internal_object_tools || require(\"../../lib/js/flattenToArray\"); // supports vanilla js & npm\n\n/**\n * Resolver. Is used inside this repository. It could also be used outside.\n */\ntemplate_resolver.Resolver = (function () {\n  var removeArrayBracketsRegEx = new RegExp(\"\\\\[\\\\d+\\\\]\", \"gi\");\n\n  /**\n   * Constructor function and container for everything, that needs to exist per instance.\n   * @constructs Resolver\n   */\n  function Resolver(sourceDataObject) {\n    this.sourceDataObject = sourceDataObject;\n    /**\n     * Resolves the given template.\n     *\n     * The template may contain variables in double curly brackets.\n     * Supported variables are all properties of this object, e.g. \"{{fieldName}}\", \"{{displayName}}\", \"{{value}}\".\n     * Since this object may also contains (described) groups of sub objects, they can also be used, e.g. \"{{summaries[0].value}}\"\n     * Parts of the index can be inserted by using e.g. \"{{index[1]}}\".\n     *\n     * @param {string} template\n     * @returns {string} resolved template\n     */\n    this.resolveTemplate = function (template) {\n      return this.replaceResolvableFields(template, addFieldsPerGroup(this.resolvableFieldsOfAll(this.sourceDataObject)));\n    };\n    /**\n     * Returns a map like object, that contains all resolvable fields and their values as properties.\n     * This function takes a variable count of input parameters,\n     * each containing an object that contains resolvable fields to extract from.\n     *\n     * The recursion depth is limited to 3, so that an object,\n     * that contains an object can contain another object (but not further).\n     *\n     * Properties beginning with an underscore in their name will be filtered out, since they are considered as internal fields.\n     *\n     * @param {...object} varArgs variable count of parameters. Each parameter contains an object that fields should be resolvable for variables.\n     * @returns {object} object with resolvable field names and their values.\n     */\n    this.resolvableFieldsOfAll = function () {\n      var map = {};\n      var ignoreInternalFields = function (propertyName) {\n        return propertyName.indexOf(\"_\") !== 0 && propertyName.indexOf(\"._\") < 0;\n      };\n      var index;\n      for (index = 0; index < arguments.length; index += 1) {\n        addToFilteredMapObject(internal_object_tools.flattenToArray(arguments[index], 3), map, ignoreInternalFields);\n      }\n      return map;\n    };\n    /**\n     * Replaces all variables in double curly brackets, e.g. {{property}},\n     * with the value of that property from the resolvableProperties.\n     *\n     * Supported property types: string, number, boolean\n     * @param {string} stringContainingVariables\n     * @param {object[]} resolvableFields (name=value)\n     */\n    this.replaceResolvableFields = function (stringContainingVariables, resolvableFields) {\n      var replaced = stringContainingVariables;\n      var propertyNames = Object.keys(resolvableFields);\n      var propertyIndex = 0;\n      var propertyName = \"\";\n      var propertyValue = \"\";\n      for (propertyIndex = 0; propertyIndex < propertyNames.length; propertyIndex += 1) {\n        propertyName = propertyNames[propertyIndex];\n        propertyValue = resolvableFields[propertyName];\n        replaced = replaced.replace(\"{{\" + propertyName + \"}}\", propertyValue);\n      }\n      return replaced;\n    };\n  }\n\n  /**\n   * Adds the value of the \"fieldName\" property (including its group prefix) and its associated \"value\" property content.\n   * For example: detail[2].fieldName=\"name\", detail[2].value=\"Smith\" lead to the additional property detail.name=\"Smith\".\n   * @param {object} object with resolvable field names and their values.\n   * @returns {object} object with resolvable field names and their values.\n   */\n  function addFieldsPerGroup(map) {\n    var propertyNames = Object.keys(map);\n    var i, fullPropertyName, propertyInfo, propertyValue;\n    for (i = 0; i < propertyNames.length; i += 1) {\n      fullPropertyName = propertyNames[i];\n      propertyValue = map[fullPropertyName];\n      propertyInfo = getPropertyNameInfos(fullPropertyName);\n      // Supports fields that are defined by a property named \"fieldName\" (containing the name)\n      // and a property named \"value\" inside the same sub object (containing its value).\n      // Ignore custom fields that are named \"fieldName\"(propertyValue), since this would lead to an unpredictable behavior.\n      // TODO could make \"fieldName\" and \"value\" configurable\n      if (propertyInfo.name === \"fieldName\" && propertyValue !== \"fieldName\") {\n        map[propertyInfo.groupWithoutArrayIndices + propertyValue] = map[propertyInfo.group + \"value\"];\n      }\n    }\n    return map;\n  }\n\n  /**\n   * Infos about the full property name including the name of the group (followed by the separator) and the name of the property itself.\n   * @param {String} fullPropertyName\n   * @returns {Object} Contains \"group\" (empty or group name including trailing separator \".\"), \"groupWithoutArrayIndices\" and \"name\" (property name).\n   */\n  function getPropertyNameInfos(fullPropertyName) {\n    var positionOfRightMostSeparator = fullPropertyName.lastIndexOf(\".\");\n    var propertyName = fullPropertyName;\n    if (positionOfRightMostSeparator > 0) {\n      propertyName = fullPropertyName.substr(positionOfRightMostSeparator + 1);\n    }\n    var propertyGroup = \"\";\n    if (positionOfRightMostSeparator > 0) {\n      propertyGroup = fullPropertyName.substr(0, positionOfRightMostSeparator + 1); //includes the trailing \".\".\n    }\n    var propertyGroupWithoutArrayIndices = propertyGroup.replace(removeArrayBracketsRegEx, \"\");\n    return { group: propertyGroup, groupWithoutArrayIndices: propertyGroupWithoutArrayIndices, name: propertyName };\n  }\n\n  /**\n   * Collects all flattened name-value-pairs into one object using the property names as keys and their values as values (map-like).\n   * Example: `{name: \"accountNumber\", value: \"12345\"}` becomes `mapObject[\"accountNumber\"]=\"12345\"`.\n   *\n   * @param {NameValuePair[]} elements flattened array of name-value-pairs\n   * @param {object} mapObject container to collect the results. Needs to be created before e.g. using `{}`.\n   * @param {function} filterMatchesFunction takes the property name as string argument and returns true (include) or false (exclude).\n   */\n  function addToFilteredMapObject(elements, mapObject, filterMatchesFunction) {\n    var index, element;\n    for (index = 0; index < elements.length; index += 1) {\n      element = elements[index];\n      if (typeof filterMatchesFunction === \"function\" && filterMatchesFunction(element.name)) {\n        mapObject[element.name] = element.value;\n      }\n    }\n    return mapObject;\n  }\n\n  /**\n   * Public interface\n   * @scope template_resolver.Resolver\n   */\n  return Resolver;\n})();\n","/**\n * @file Describes a data field of the restructured data.\n * @version {@link https://github.com/JohT/data-restructor-js/releases/latest latest version}\n * @author JohT\n * @version ${project.version}\n */\n\"use strict\";\nvar module = describedFieldInternalCreateIfNotExists(module); // Fallback for vanilla js without modules\n\nfunction describedFieldInternalCreateIfNotExists(objectToCheck) {\n  return objectToCheck || {};\n}\n\n/**\n * Describes a data field of the restructured data.\n * @module described_field\n */\nvar described_field = (module.exports = {}); // Export module for npm...\ndescribed_field.internalCreateIfNotExists = describedFieldInternalCreateIfNotExists;\n\n/**\n * Describes a field of the restructured data.\n * Dynamically added properties represent custom named groups containing DescribedDataField-Arrays.\n *\n * @global\n * @typedef {Object} DescribedDataField\n * @property {string} [category=\"\"] - name of the category. Could contain a short domain name like \"product\" or \"vendor\".\n * @property {string} [type=\"\"] - type of the data element. Examples: \"summary\" for e.g. a list overview. \"detail\" e.g. when a summary is selected. \"filter\" e.g. for field/value pair results that can be selected as data filters.\n * @property {string} [abbreviation=\"\"] - one optional character, a symbol character or a short abbreviation of the category\n * @property {string} [image=\"\"] - one optional path to an image resource\n * @property {string} index - array of numbers containing the splitted index. Example: \"responses[2].hits.hits[4]._source.name\" will have an index of [2,4]\n * @property {string[]} groupNames - array of names of all dynamically added properties representing groups\n * @property {string} displayName - display name of the field\n * @property {string} fieldName - field name\n * @property {{*}} value - content of the field\n * @property {DescribedDataField[]} [couldBeAnyCustomGroupName] any number of groups attached to the field each containing multiple fields\n */\n\ndescribed_field.DescribedDataFieldBuilder = (function () {\n  /**\n   * Builds a DescribedDataField.  \n   * DescribedDataField is the main element of the restructured data and therefore considered \"public\".\n   * @constructs DescribedDataFieldBuilder\n   */\n  function DescribedDataFieldBuilder() {\n    /**\n     * @type {DescribedDataField}\n     */\n    this.describedField = {\n      category: \"\",\n      type: \"\",\n      abbreviation: \"\",\n      image: \"\",\n      index: [],\n      groupNames: [],\n      displayName: \"\",\n      fieldName: \"\",\n      value: \"\"\n    };\n    /**\n     * Takes over all values of the template DescribedDataField.\n     * @function\n     * @param {DescribedDataField} template\n     * @returns {DescribedDataFieldBuilder}\n     * @example fromDescribedDataField(sourceField)\n     */\n    this.fromDescribedDataField = function (template) {\n      this.category(template.category);\n      this.type(template.type);\n      this.abbreviation(template.abbreviation);\n      this.image(template.image);\n      this.index(template.index);\n      this.groupNames(template.groupNames);\n      this.displayName(template.displayName);\n      this.fieldName(template.fieldName);\n      this.value(template.value);\n      return this;\n    };\n    /**\n     * Sets the category.\n     *\n     * Contains a short domain nam, for example:\n     * - \"product\" for products\n     * - \"vendor\" for vendors\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example category(\"Product\")\n     */\n    this.category = function (value) {\n      this.describedField.category = withDefaultString(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the type.\n     *\n     * Contains the type of the entry, for example:\n     * - \"summary\" for e.g. a list overview.\n     * - \"detail\" e.g. when a summary is selected.\n     * - \"filter\" e.g. for field/value pair results that can be selected as search parameters.\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example type(\"summary\")\n     */\n    this.type = function (value) {\n      this.describedField.type = withDefaultString(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the optional abbreviation.\n     *\n     * Contains a symbol character or a very short abbreviation of the category.\n     * - \"P\" for products\n     * - \"V\" for vendors\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example abbreviation(\"P\")\n     */\n    this.abbreviation = function (value) {\n      this.describedField.abbreviation = withDefaultString(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the optional path to an image resource.\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example image(\"img/product.png\")\n     */\n    this.image = function (value) {\n      this.describedField.image = withDefaultString(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the index as an array of numbers containing the splitted array indexes of the source field.\n     * Example: \"responses[2].hits.hits[4]._source.name\" will have an index of [2,4].\n     *\n     * @function\n     * @param {number[]} [value=[]]\n     * @returns {DescribedDataFieldBuilder}\n     * @example index([2,4])\n     */\n    this.index = function (value) {\n      this.describedField.index = withDefaultArray(value, []);\n      return this;\n    };\n    /**\n     * Sets the group names as an array of strings containing the names of the dynamically added properties,\n     * that contain an array of DescribedDataField-Objects.\n     *\n     * @function\n     * @param {string[]} [value=[]]\n     * @returns {DescribedDataFieldBuilder}\n     * @example groupNames([\"summaries\",\"details\",\"options\"])\n     */\n    this.groupNames = function (value) {\n      this.describedField.groupNames = withDefaultArray(value, []);\n      return this;\n    };\n    /**\n     * Sets the display name.\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example displayName(\"Color\")\n     */\n    this.displayName = function (value) {\n      this.describedField.displayName = withDefaultString(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the (technical) field name.\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example fieldName(\"color\")\n     */\n    this.fieldName = function (value) {\n      this.describedField.fieldName = withDefaultString(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the value/content of the field.\n     *\n     * @function\n     * @param {*} value\n     * @returns {DescribedDataFieldBuilder}\n     * @example value(\"darkblue\")\n     */\n    this.value = function (value) {\n      this.describedField.value = value;\n      return this;\n    };\n\n    /**\n     * Finalizes the settings and builds the DescribedDataField.\n     * @function\n     * @returns {DescribedDataField}\n     */\n    this.build = function () {\n      return this.describedField;\n    };\n  }\n\n  function isSpecifiedString(value) {\n    return typeof value === \"string\" && value !== null && value !== \"\";\n  }\n\n  function withDefaultString(value, defaultValue) {\n    return isSpecifiedString(value) ? value : defaultValue;\n  }\n\n  function withDefaultArray(value, defaultValue) {\n    return value === undefined || value === null ? defaultValue : value;\n  }\n\n  return DescribedDataFieldBuilder;\n})();\n\n/**\n * Creates a new described data field with all properties of the original one except for dynamically added groups.\n * @param {DescribedDataField} describedDataField \n * @returns {DescribedDataField} \n * @memberof described_field\n */\ndescribed_field.copyWithoutGroups = function(describedDataField) {\n  return new described_field.DescribedDataFieldBuilder().fromDescribedDataField(describedDataField).build();\n};\n\ndescribed_field.DescribedDataFieldGroup = (function () {\n  /**\n   * Adds groups to DescribedDataFields. These groups are dynamically added properties\n   * that contain an array of sub fields of the same type DescribedDataFields.\n   * \n   * @param {DescribedDataField} dataField\n   * @constructs DescribedDataFieldGroup\n   * @example new described_field.DescribedDataFieldGroup(field).addGroupEntry(\"details\", detailField);\n   */\n  function DescribedDataFieldGroup(dataField) {\n    this.dataField = dataField;\n\n    /**\n     * Adds an entry to the given group. If the group does not exist, it will be created.\n     * @function\n     * @param {String} groupName name of the group to which the entry will be added\n     * @param {DescribedDataField} describedField sub field that is added to the group\n     * @returns {DescribedDataFieldGroup}\n     * @memberOf DescribedDataFieldGroup\n     */\n    this.addGroupEntry = function (groupName, describedField) {\n      this.addGroupEntries(groupName, [describedField]);\n      return this;\n    };\n\n    /**\n     * Adds entries to the given group. If the group does not exist, it will be created.\n     * @function\n     * @param {String} groupName name of the group to which the entries will be added\n     * @param {DescribedDataField[]} describedFields sub fields that are added to the group\n     * @returns {DescribedDataFieldGroup}\n     * @memberOf DescribedDataFieldGroup\n     */\n    this.addGroupEntries = function (groupName, describedFields) {\n      if (!this.dataField[groupName]) {\n        this.dataField.groupNames.push(groupName);\n        this.dataField[groupName] = [];\n      }\n      var index;\n      var describedField;\n      for (index = 0; index < describedFields.length; index += 1) {\n        describedField = describedFields[index];\n        describedField = described_field.copyWithoutGroups(describedField);\n        this.dataField[groupName].push(describedField);\n      }\n      return this;\n    };\n  }\n\n  return DescribedDataFieldGroup;\n})();\n","/**\n * @file datarestructor transforms parsed JSON objects into a uniform data structure\n * @version {@link https://github.com/JohT/data-restructor-js/releases/latest latest version}\n * @author JohT\n */\n\n \"use strict\";\nvar module = datarestructorInternalCreateIfNotExists(module); // Fallback for vanilla js without modules\n\nfunction datarestructorInternalCreateIfNotExists(objectToCheck) {\n  return objectToCheck || {};\n}\n\n/**\n * datarestructor namespace and module declaration.\n * It contains all functions to convert an object (e.g. parsed JSON) into uniform enumerated list of described field entries.\n * \n * <b>Transformation steps:</b>\n * - JSON\n * - flatten\n * - mark and identify\n * - add array fields\n * - deduplicate \n * - group\n * - flatten again\n * @module datarestructor\n */\nvar datarestructor = module.exports={}; // Export module for npm...\ndatarestructor.internalCreateIfNotExists = datarestructorInternalCreateIfNotExists;\n\nvar internal_object_tools = internal_object_tools || require(\"../../lib/js/flattenToArray\"); // supports vanilla js & npm\nvar template_resolver = template_resolver || require(\"../../src/js/templateResolver\"); // supports vanilla js & npm\nvar described_field = described_field || require(\"../../src/js/describedfield\"); // supports vanilla js & npm\n\n/**\n * Takes the full qualified original property name and extracts a simple name out of it.\n * \n * @global\n * @callback propertyNameFunction\n * @param {string} propertyName full qualified, point separated property name \n * @return {String} extracted, simple name\n */\n\n/**\n * Describes a selected part of the incoming data structure and defines, \n * how the data should be transformed.\n * \n * @global\n * @typedef {Object} PropertyStructureDescription\n * @property {string} type - \"\"(default). Some examples: \"summary\" for e.g. a list overview. \"detail\" e.g. when a summary is selected. \"filter\" e.g. for field/value pair results that can be selected as search parameters.\n * @property {string} category - name of the category. Default = \"\". Could contain a short domain name like \"product\" or \"vendor\".\n * @property {string} [abbreviation=\"\"] - one optional character, a symbol character or a short abbreviation of the category\n * @property {string} [image=\"\"] - one optional path to an image resource\n * @property {boolean} propertyPatternTemplateMode - \"false\"(default): property name needs to be equal to the pattern. \"true\" allows variables like \"{{fieldName}}\" inside the pattern.\n * @property {string} propertyPattern - property name pattern (without array indices) to match\n * @property {string} indexStartsWith - \"\"(default) matches all ids. String that needs to match the beginning of the id. E.g. \"1.\" will match id=\"1.3.4\" but not \"0.1.2\".\n * @property {propertyNameFunction} getDisplayNameForPropertyName - display name for the property. \"\"(default) last property name element with upper case first letter.\n * @property {propertyNameFunction} getFieldNameForPropertyName - field name for the property. \"\" (default) last property name element.\n * @property {string} groupName - name of the property, that contains grouped entries. Default=\"group\".\n * @property {string} groupPattern - Pattern that describes how to group entries. \"groupName\" defines the name of this group. A pattern may contain variables in double curly brackets {{variable}}.\n * @property {string} groupDestinationPattern - Pattern that describes where the group should be moved to. Default=\"\"=Group will not be moved. A pattern may contain variables in double curly brackets {{variable}}.\n * @property {string} groupDestinationName - (default=groupName) Name of the group when it had been moved to the destination.\n * @property {string} deduplicationPattern - Pattern to use to remove duplicate entries. A pattern may contain variables in double curly brackets {{variable}}.\n */\n\n/**\n * Builder for a {@link PropertyStructureDescription}.\n */\ndatarestructor.PropertyStructureDescriptionBuilder = (function () {\n  \"use strict\";\n\n  /**\n   * Constructor function and container for everything, that needs to exist per instance.\n   * @constructs PropertyStructureDescriptionBuilder\n   */\n  function PropertyStructureDescription() {\n    /**\n     * @type {PropertyStructureDescription}\n     */\n    this.description = {\n      type: \"\",\n      category: \"\",\n      abbreviation: \"\",\n      image: \"\",\n      propertyPatternTemplateMode: false,\n      propertyPattern: \"\",\n      indexStartsWith: \"\",\n      groupName: \"group\",\n      groupPattern: \"\",\n      groupDestinationPattern: \"\",\n      groupDestinationName: null,\n      deduplicationPattern: \"\",\n      getDisplayNameForPropertyName: null,\n      getFieldNameForPropertyName: null,\n      matchesPropertyName: null\n    };\n    /**\n     * Sets the type.\n     * \n     * Contains the type of the entry, for example: \n     * - \"summary\" for e.g. a list overview. \n     * - \"detail\" e.g. when a summary is selected. \n     * - \"filter\" e.g. for field/value pair results that can be selected as search parameters.\n     * \n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {PropertyStructureDescriptionBuilder}\n     * @example type(\"summary\")\n     */\n    this.type = function (value) {\n      this.description.type = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the category.\n     * \n     * Contains a short domain nam, for example: \n     * - \"product\" for products\n     * - \"vendor\" for vendors\n     * \n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {PropertyStructureDescriptionBuilder}\n     * @example category(\"Product\")\n     */\n    this.category = function (value) {\n      this.description.category = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the optional abbreviation.\n     * \n     * Contains a symbol character or a very short abbreviation of the category.\n     * - \"P\" for products\n     * - \"V\" for vendors\n     * \n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {PropertyStructureDescriptionBuilder}\n     * @example abbreviation(\"P\")\n     */\n    this.abbreviation = function (value) {\n      this.description.abbreviation = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the optional path to an image resource.\n     * \n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {PropertyStructureDescriptionBuilder}\n     * @example image(\"img/product.png\")\n     */\n    this.image = function (value) {\n      this.description.image = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Sets \"equal mode\" for the property pattern.\n     * \n     * \"propertyPattern\" need to match exactly if this mode is activated.\n     *  It clears propertyPatternTemplateMode which means \"equal\" mode.\n     * @function\n     * @returns {PropertyStructureDescriptionBuilder}\n     */\n    this.propertyPatternEqualMode = function () {\n      this.description.propertyPatternTemplateMode = false;\n      return this;\n    };\n    /**\n     * Sets \"template mode\" for the property pattern.\n     * \n     * \"propertyPattern\" can contain variables like {{fieldName}} and\n     * doesn't need to match the property name exactly. If the \"propertyPattern\"\n     * is shorter than the property name, it also matches when the property name\n     * starts with the \"propertyPattern\".\n     * \n     * @function\n     * @returns {PropertyStructureDescriptionBuilder}\n     */\n    this.propertyPatternTemplateMode = function () {\n      this.description.propertyPatternTemplateMode = true;\n      return this;\n    };\n    /**\n     * Sets the property name pattern. \n     * \n     * Contains single property names with sub types separated by \".\" without array indices.\n     * May contain variables in double curly brackets.\n     * \n     * Example: \n     * - responses.hits.hits._source.{{fieldName}}\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {PropertyStructureDescriptionBuilder}\n     * @example propertyPattern(\"responses.hits.hits._source.{{fieldName}}\")\n     */\n    this.propertyPattern = function (value) {\n      this.description.propertyPattern = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the optional beginning of the id that needs to match.\n     * Matches all indices if set to \"\" (or not called).\n     * \n     * For example:\n     * - \"1.\" will match id=\"1.3.4\" but not \"0.1.2\".\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {PropertyStructureDescriptionBuilder}\n     * @example indexStartsWith(\"1.\")\n     */\n    this.indexStartsWith = function (value) {\n      this.description.indexStartsWith = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Overrides the display name of the property.\n     * \n     * If it is not set or set to \"\" then it will be derived from the\n     * last part of original property name starting with an upper case character.\n     *  \n     * For example:\n     * - \"Product\"\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {PropertyStructureDescriptionBuilder}\n     * @example displayPropertyName(\"Product\")\n     */\n    this.displayPropertyName = function (value) {\n      this.description.getDisplayNameForPropertyName = createNameExtractFunction(value, this.description);\n      if (isSpecifiedString(value)) {\n        return this;\n      }\n      this.description.getDisplayNameForPropertyName = removeArrayValuePropertyPostfixFunction(\n        this.description.getDisplayNameForPropertyName\n      );\n      this.description.getDisplayNameForPropertyName = upperCaseFirstLetterForFunction(\n        this.description.getDisplayNameForPropertyName\n      );\n      return this;\n    };\n    /**\n     * Overrides the (technical) field name of the property.\n     * \n     * If it is not set or set to \"\" then it will be derived from the\n     * last part of original property name.\n     *  \n     * For example:\n     * - \"product\"\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {PropertyStructureDescriptionBuilder}\n     * @example fieldName(\"product\")\n     */\n    this.fieldName = function (value) {\n      this.description.getFieldNameForPropertyName = createNameExtractFunction(value, this.description);\n      return this;\n    };\n    /**\n     * Sets the name of the property, that contains grouped entries. \n     * \n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {PropertyStructureDescriptionBuilder}\n     * @example groupName(\"details\")\n     */\n    this.groupName = function (value) {\n      this.description.groupName = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the pattern that describes how to group entries. \n     * \n     * \"groupName\" defines the name of this group.\n     * A pattern may contain variables in double curly brackets {{variable}}.\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {PropertyStructureDescriptionBuilder}\n     * @example groupPattern(\"{{type}}-{{category}}\")\n     */\n    this.groupPattern = function (value) {\n      this.description.groupPattern = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the pattern that describes where the group should be moved to. \n     * \n     * Default=\"\"=Group will not be moved.\n     * A pattern may contain variables in double curly brackets {{variable}}.\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {PropertyStructureDescriptionBuilder}\n     * @example groupDestinationPattern(\"main-{{category}}\")\n     */\n    this.groupDestinationPattern = function (value) {\n      this.description.groupDestinationPattern = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the name of the group when it had been moved to the destination.\n     * \n     * The default value is the groupName, which will be used when the value is not valid (null or empty)\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {PropertyStructureDescriptionBuilder}\n     * @example groupDestinationPattern(\"options\")\n     */\n    this.groupDestinationName = function (value) {\n      this.description.groupDestinationName = withDefault(value, this.description.groupName);\n      return this;\n    };\n    /**\n     * Sets the pattern to be used to remove duplicate entries. \n     * \n     * A pattern may contain variables in double curly brackets {{variable}}.\n     * A pattern may contain variables in double curly brackets {{variable}}.\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {PropertyStructureDescriptionBuilder}\n     * @example deduplicationPattern(\"{{category}}--{{type}}--{{index[0]}}--{{index[1]}}--{{fieldName}}\")\n     */\n    this.deduplicationPattern = function (value) {\n      this.description.deduplicationPattern = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Finalizes the settings and builds the  PropertyStructureDescription.\n     * @function\n     * @returns {PropertyStructureDescription}\n     */\n    this.build = function () {\n      this.description.matchesPropertyName = createFunctionMatchesPropertyName(this.description);\n      if (this.description.getDisplayNameForPropertyName == null) {\n        this.displayPropertyName(\"\");\n      }\n      if (this.description.getFieldNameForPropertyName == null) {\n        this.fieldName(\"\");\n      }\n      if (this.description.groupDestinationName == null) {\n        this.groupDestinationName(\"\");\n      }\n      return this.description;\n    };\n  }\n\n  function createNameExtractFunction(value, description) {\n    if (isSpecifiedString(value)) {\n      return function () {\n        return value;\n      };\n    }\n    if (description.propertyPatternTemplateMode) {\n      var patternToMatch = description.propertyPattern; // closure (closed over) parameter\n      return extractNameUsingTemplatePattern(patternToMatch);\n    }\n    return extractNameUsingRightMostPropertyNameElement();\n  }\n\n  function createFunctionMatchesPropertyName(description) {\n    var propertyPatternToMatch = description.propertyPattern; // closure (closed over) parameter\n    if (!isSpecifiedString(propertyPatternToMatch)) {\n      return function () {\n        return false; // Without a propertyPattern, no property will match (deactivated mark/identify).\n      };\n    }\n    if (description.propertyPatternTemplateMode) {\n      return function (propertyNameWithoutArrayIndices) {\n        return templateModePatternRegexForPattern(propertyPatternToMatch).exec(propertyNameWithoutArrayIndices) != null;\n      };\n    }\n    return function (propertyNameWithoutArrayIndices) {\n      return propertyNameWithoutArrayIndices === propertyPatternToMatch;\n    };\n  }\n\n  function rightMostPropertyNameElement(propertyName) {\n    var regularExpression = new RegExp(\"(\\\\w+)$\", \"gi\");\n    var match = propertyName.match(regularExpression);\n    if (match != null) {\n      return match[0];\n    }\n    return propertyName;\n  }\n\n  function upperCaseFirstLetter(value) {\n    if (value.length > 1) {\n      return value.charAt(0).toUpperCase() + value.slice(1);\n    }\n    return value;\n  }\n\n  function upperCaseFirstLetterForFunction(nameExtractFunction) {\n    return function (propertyName) {\n      return upperCaseFirstLetter(nameExtractFunction(propertyName));\n    };\n  }\n\n  function removeArrayValuePropertyPostfixFunction(nameExtractFunction) {\n    return function (propertyName) {\n      var name = nameExtractFunction(propertyName);\n      name = name != null ? name : \"\";\n      return name.replace(\"_comma_separated_values\", \"\");\n    };\n  }\n\n  function extractNameUsingTemplatePattern(propertyPattern) {\n    return function (propertyName) {\n      var regex = templateModePatternRegexForPatternAndVariable(propertyPattern, \"{{fieldName}}\");\n      var match = regex.exec(propertyName);\n      if (match && match[1] != \"\") {\n        return match[1];\n      }\n      return rightMostPropertyNameElement(propertyName);\n    };\n  }\n\n  function extractNameUsingRightMostPropertyNameElement() {\n    return function (propertyName) {\n      return rightMostPropertyNameElement(propertyName);\n    };\n  }\n\n  function templateModePatternRegexForPattern(propertyPatternToUse) {\n    var placeholderInDoubleCurlyBracketsRegEx = new RegExp(\"\\\\\\\\\\\\{\\\\\\\\\\\\{[-\\\\w]+\\\\\\\\\\\\}\\\\\\\\\\\\}\", \"gi\");\n    return templateModePatternRegexForPatternAndVariable(propertyPatternToUse, placeholderInDoubleCurlyBracketsRegEx);\n  }\n\n  function templateModePatternRegexForPatternAndVariable(propertyPatternToUse, variablePattern) {\n    var pattern = escapeCharsForRegEx(propertyPatternToUse);\n    if (typeof variablePattern === \"string\") {\n      variablePattern = escapeCharsForRegEx(variablePattern);\n    }\n    pattern = pattern.replace(variablePattern, \"([-\\\\w]+)\");\n    pattern = \"^\" + pattern;\n    return new RegExp(pattern, \"i\");\n  }\n\n  function escapeCharsForRegEx(characters) {\n    var nonWordCharactersRegEx = new RegExp(\"([^-\\\\w])\", \"gi\");\n    return characters.replace(nonWordCharactersRegEx, \"\\\\$1\");\n  }\n\n  function withDefault(value, defaultValue) {\n    return isSpecifiedString(value) ? value : defaultValue;\n  }\n\n  function isSpecifiedString(value) {\n    return typeof value === \"string\" && value != null && value != \"\";\n  }\n\n  return PropertyStructureDescription;\n})();\n\n/**\n * @global\n * @typedef {Object} DescribedEntry\n * @property {DescribedDataField} describedField - public type with the main properties for external/public use\n * @property {string} category - category of the result from the PropertyStructureDescription using a short name or e.g. a symbol character\n * @property {string} type - type of the result from PropertyStructureDescription\n * @property {string} [abbreviation=\"\"] - one optional character, a symbol character or a short abbreviation of the category\n * @property {string} [image=\"\"] - one optional path to an image resource\n * @property {string} index - array of numbers containing the split index. Example: \"responses[2].hits.hits[4]._source.name\" leads to an array with the two elements: [2,4]\n * @property {string} displayName - display name extracted from the point separated hierarchical property name, e.g. \"Name\"\n * @property {string} fieldName - field name extracted from the point separated hierarchical property name, e.g. \"name\"\n * @property {string} value - content of the field\n * @property {DescribedDataField} addGroupEntry - function, that adds an entry to the given group. If the group does not exist, it will be created.\n * @property {DescribedDataField[]} addGroupEntries - function, that adds entries to the given group. If the group does not exist, it will be created.\n * @property {boolean} _isMatchingIndex - true, when _identifier.index matches the described \"indexStartsWith\"\n * @property {Object} _identifier - internal structure for identifier. Avoid using it outside since it may change.\n * @property {string} _identifier.index - array indices in hierarchical order separated by points, e.g. \"0.0\"\n * @property {string} _identifier.value - the (single) value of the \"flattened\" property, e.g. \"Smith\"\n * @property {string} _identifier.propertyNameWithArrayIndices - the \"original\" flattened property name in hierarchical order separated by points, e.g. \"responses[0].hits.hits[0]._source.name\"\n * @property {string} _identifier.propertyNameWithoutArrayIndices - same as propertyNamesWithArrayIndices but without array indices, e.g. \"responses.hits.hits._source.name\"\n * @property {string} _identifier.groupId - Contains the resolved groupPattern from the PropertyStructureDescription. Entries with the same id will be grouped into the \"groupName\" of the PropertyStructureDescription.\n * @property {string} _identifier.groupDestinationId - Contains the resolved groupDestinationPattern from the PropertyStructureDescription. Entries with this id will be moved to the given destination group.\n * @property {string} _identifier.deduplicationId - Contains the resolved deduplicationPattern from the PropertyStructureDescription. Entries with the same id will be considered to be a duplicate and hence removed.\n * @property {Object} _description - PropertyStructureDescription for internal use. Avoid using it outside since it may change.\n */\n\n/**\n * Returns a field value of the given {@link DescribedEntry}.\n * \n * @global\n * @callback stringFieldOfDescribedEntryFunction\n * @param {DescribedEntry} entry described entry that contains the field that should be returned\n * @returns {String} field value \n */\n\n/**\n * Creates a {@link DescribedEntry}.\n */\ndatarestructor.DescribedEntryCreator = (function () {\n  \"use strict\";\n\n  var removeArrayBracketsRegEx = new RegExp(\"\\\\[\\\\d+\\\\]\", \"gi\");\n\n  /**\n   * Constructor function and container for everything, that needs to exist per instance.\n   * @constructs DescribedEntry\n   * @type {DescribedEntry}\n   */\n  function DescribedEntry(entry, description) {\n    var indices = indicesOf(entry.name);\n    var propertyNameWithoutArrayIndices = entry.name.replace(removeArrayBracketsRegEx, \"\");\n    var templateResolver = new template_resolver.Resolver(this);\n\n    this.describedField = new described_field.DescribedDataFieldBuilder()\n      .category(description.category)\n      .type(description.type)\n      .abbreviation(description.abbreviation)\n      .image(description.image)\n      .index(indices.numberArray)\n      .displayName(description.getDisplayNameForPropertyName(propertyNameWithoutArrayIndices))\n      .fieldName(description.getFieldNameForPropertyName(propertyNameWithoutArrayIndices))\n      .value(entry.value)\n      .build();\n    this.category = description.category;\n    this.type = description.type;\n    this.abbreviation = description.abbreviation;\n    this.image = description.image;\n    /**\n     * Array of numbers containing the split index. \n     * Example: \"responses[2].hits.hits[4]._source.name\" leads to an array with two elements: [2,4]\n     * This is the public version of the internal variable _identifier.index, which contains in contrast all index elements in one point separated string (e.g. \"2.4\").\n     * @type {number[]}\n     */\n    this.index = indices.numberArray;\n    this.displayName = description.getDisplayNameForPropertyName(propertyNameWithoutArrayIndices);\n    this.fieldName = description.getFieldNameForPropertyName(propertyNameWithoutArrayIndices);\n    this.value = entry.value;\n    this._isMatchingIndex = indices.pointDelimited.indexOf(description.indexStartsWith) == 0;\n    this._description = description;\n\n    this._identifier = {\n      index: indices.pointDelimited,\n      propertyNameWithArrayIndices: entry.name,\n      propertyNameWithoutArrayIndices: propertyNameWithoutArrayIndices,\n      groupId: \"\",\n      groupDestinationId: \"\",\n      deduplicationId: \"\"\n    };\n    this._identifier.groupId = templateResolver.replaceResolvableFields(\n      description.groupPattern,\n      templateResolver.resolvableFieldsOfAll(this.describedField, this._description, this._identifier)\n    );\n    this._identifier.groupDestinationId = templateResolver.replaceResolvableFields(\n      description.groupDestinationPattern,\n      templateResolver.resolvableFieldsOfAll(this.describedField, this._description, this._identifier)\n    );\n    this._identifier.deduplicationId = templateResolver.replaceResolvableFields(\n      description.deduplicationPattern,\n      templateResolver.resolvableFieldsOfAll(this.describedField, this._description, this._identifier)\n    );\n\n    /**\n     * Adds an entry to the given group. If the group does not exist, it will be created.\n     * @param {String} groupName \n     * @param {DescribedEntry} describedEntry \n     */\n    this.addGroupEntry = function(groupName, describedEntry) {\n      this.addGroupEntries(groupName, [describedEntry]);\n    };\n\n    /**\n     * Adds entries to the given group. If the group does not exist, it will be created.\n     * @param {String} groupName \n     * @param {DescribedEntry[]} describedEntries\n     */\n    this.addGroupEntries = function(groupName, describedEntries) {\n      var describedFieldDataGroup =  new described_field.DescribedDataFieldGroup(this.describedField);\n      if (!this[groupName]) {\n        this[groupName] = [];\n      }\n      var index;\n      var describedEntry;\n      for (index = 0; index < describedEntries.length; index += 1) {\n        describedEntry = describedEntries[index];\n        this[groupName].push(describedEntry);\n        describedFieldDataGroup.addGroupEntry(groupName, describedEntry.describedField);\n      }\n    };\n  }\n  /**\n   * @typedef {Object} ExtractedIndices\n   * @property {string} pointDelimited - bracket indices separated by points\n   * @property {number[]} numberArray as array of numbers\n   */\n\n  /**\n   * Returns \"1.12.123\" and [1,12,123] for \"results[1].hits.hits[12].aggregates[123]\".\n   *\n   * @param {String} fullPropertyName\n   * @return {ExtractedIndices} extracted indices in different representations\n   */\n  function indicesOf(fullPropertyName) {\n    var arrayBracketsRegEx = new RegExp(\"\\\\[(\\\\d+)\\\\]\", \"gi\");\n    return indicesOfWithRegex(fullPropertyName, arrayBracketsRegEx);\n  }\n\n  /**\n   * Returns \"1.12.123\" and [1,12,123] for \"results[1].hits.hits[12].aggregates[123]\".\n   *\n   * @param {string} fullPropertyName\n   * @param {RegExp} regexWithOneNumberGroup\n   * @return {ExtractedIndices} extracted indices in different representations\n   */\n  function indicesOfWithRegex(fullPropertyName, regexWithOneNumberGroup) {\n    var pointDelimited = \"\";\n    var numberArray = [];\n    var match;\n    do {\n      match = regexWithOneNumberGroup.exec(fullPropertyName);\n      if (match) {\n        if (pointDelimited.length > 0) {\n          pointDelimited += \".\";\n        }\n        pointDelimited += match[1];\n        numberArray.push(parseInt(match[1]));\n      }\n    } while (match);\n    return { pointDelimited: pointDelimited, numberArray: numberArray };\n  }\n\n  return DescribedEntry;\n})();\n\n/**\n * Main class for the data transformation.\n */\ndatarestructor.Transform = (function () {\n  \"use strict\";\n\n  /**\n   * Constructor function and container for anything, that needs to exist per instance.\n   * @param {PropertyStructureDescription[]} descriptions\n   * @constructs Transform\n   */\n  function Transform(descriptions) {\n    /**\n     * Descriptions of the input data that define the behaviour of the transformation.\n     * @type {DescribedEntry[]}\n     */\n    this.descriptions = descriptions;\n    /**\n     * DebugMode enables detailed logging for troubleshooting.\n     * @type {boolean}\n     */\n    this.debugMode = false;\n    /**\n     * Enables debug mode. Logs additional informations.\n     * @returns Transform\n     */\n    this.enableDebugMode = function () {\n      this.debugMode = true;\n      return this;\n    };\n    /**\n     * \"Assembly line\", that takes the (pared JSON) data and processes it using all given descriptions in their given order.\n     * @param {object} data - parsed JSON data or any other data object\n     * @returns {DescribedEntry[]}\n     * @example \n     * var allDescriptions = [];\n     * allDescriptions.push(summariesDescription());\n     * allDescriptions.push(detailsDescription());\n     * var result = new datarestructor.Transform(allDescriptions).processJson(jsonData);\n     */\n    this.processJson = function (data) {\n      return processJsonUsingDescriptions(data, this.descriptions, this.debugMode);\n    };\n  }\n\n  /**\n   * \"Assembly line\", that takes the jsonData and processes it using all given descriptions in their given order.\n   * @param {object} jsonData - parsed JSON data or any other data object\n   * @param {PropertyStructureDescription[]} descriptions - already grouped entries\n   * @param {boolean} debugMode - false=default=off, true=write additional logs for detailed debugging\n   * @returns {DescribedEntry[]}\n   */\n  function processJsonUsingDescriptions(jsonData, descriptions, debugMode) {\n    // \"Flatten\" the hierarchical input json to an array of property names (point separated \"folders\") and values.\n    var processedData = internal_object_tools.flattenToArray(jsonData);\n    // Fill in properties ending with the name \"_comma_separated_values\" for array values to make it easier to display them.\n    processedData = fillInArrayValues(processedData);\n\n    if ((typeof debugMode === \"boolean\") && debugMode) {\n      console.log(\"flattened data with array values:\");\n      console.log(processedData);\n    }\n\n    // Mark, identify and harmonize the flattened data by applying one description after another in their given order.\n    var describedData = [];\n    var descriptionIndex, description, dataWithDescription;\n    for (descriptionIndex = 0; descriptionIndex < descriptions.length; descriptionIndex+=1) {\n      description = descriptions[descriptionIndex];\n      // Filter all entries that match the current description and enrich them with it\n      dataWithDescription = extractEntriesByDescription(processedData, description);\n      // Remove duplicate entries where a deduplicationPattern is described\n      describedData = deduplicateFlattenedData(describedData, dataWithDescription);\n    }\n    processedData = describedData;\n\n    // Group entries where a groupPattern is described\n    processedData = groupFlattenedData(processedData);\n\n    // Move group entries where a groupDestinationPattern is described\n    processedData = applyGroupDestinationPattern(processedData);\n\n    // Turns the grouped object back into an array of DescribedEntry-Objects\n    return propertiesAsArray(processedData);\n  }\n\n  /**\n   * Takes two arrays of objects, e.g. [{id: B, value: 2},{id: C, value: 3}]\n   * and [{id: A, value: 1},{id: B, value: 4}] and merges them into one:\n   * [{id: C, value: 3},{id: A, value: 1},{id: B, value: 4}]\n   *\n   * Entries with the same id (\"duplicates\") will be overwritten.\n   * Only the last element with the same id remains. The order is\n   * determined by the order of the array elements, whereas the first\n   * array comes before the second one. This means, that entries with the\n   * same id in the second array overwrite entries in the first array,\n   * and entries that occur later in the array overwrite earlier ones,\n   * if they have the same id.\n   *\n   * The id is extracted from every element using the given function.\n   *\n   * @param {DescribedEntry[]} entries\n   * @param {DescribedEntry[]} entriesToMerge\n   * @param {stringFieldOfDescribedEntryFunction} idOfElementFunction returns the id of an DescribedEntry\n   */\n  function mergeFlattenedData(entries, entriesToMerge, idOfElementFunction) {\n    var entriesToMergeById = asIdBasedObject(entriesToMerge, idOfElementFunction);\n    var merged = [];\n    var index, entry, id;\n    for (index = 0; index < entries.length; index+=1) {\n      entry = entries[index];\n      id = idOfElementFunction(entry);\n      if (id == null || id === \"\" || entriesToMergeById[id] == null) {\n        merged.push(entry);\n      }\n    }\n    for (index = 0; index < entriesToMerge.length; index+=1) {\n      entry = entriesToMerge[index];\n      merged.push(entry);\n    }\n    return merged;\n  }\n\n  /**\n   * Takes two arrays of objects, e.g. [{id: B, value: 2},{id: C, value: 3}]\n   * and [{id: A, value: 1},{id: B, value: 4}] and merges them into one:\n   * [{id: C, value: 3},{id: A, value: 1},{id: B, value: 4}]\n   *\n   * Entries with the same id (\"duplicates\") will be overwritten.\n   * Only the last element with the same id remains. The order is\n   * determined by the order of the array elements, whereas the first\n   * array comes before the second one. This means, that entries with the\n   * same id in the second array overwrite entries in the first array,\n   * and entries occurring later in the array overwrite earlier ones,\n   * if they have the same id.\n   *\n   * \"entriesToMerge\" will be returned directly, if \"entries\" is null or empty.\n   *\n   * The id is extracted from every element using their deduplication pattern (if available).\n   *\n   * @param {DescribedEntry[]} entries\n   * @param {DescribedEntry[]} entriesToMerge\n   * @param {stringFieldOfDescribedEntryFunction} idOfElementFunction returns the id of an DescribedEntry\n   * @see mergeFlattenedData\n   */\n  function deduplicateFlattenedData(entries, entriesToMerge) {\n    if (entries == null || entries.length == 0) {\n      return entriesToMerge;\n    }\n    var idOfElementFunction = function (entry) {\n      return entry._identifier.deduplicationId;\n    };\n    return mergeFlattenedData(entries, entriesToMerge, idOfElementFunction);\n  }\n\n  /**\n   * Converts the given elements to an object, that provides these\n   * entries by their id. For example, [{id: A, value: 1}] becomes\n   * result['A'] = 1.\n   * @param {DescribedEntry[]} elements of DescribedEntry elements\n   * @param {stringFieldOfDescribedEntryFunction} idOfElementFunction returns the id of an DescribedEntry\n   * @return {DescribedEntry[] entries indexed by id\n   */\n  function asIdBasedObject(elements, idOfElementFunction) {\n    var idIndexedObject = new Object();\n    for (var index = 0; index < elements.length; index++) {\n      var element = elements[index];\n      idIndexedObject[idOfElementFunction(element)] = element;\n    }\n    return idIndexedObject;\n  }\n\n  /**\n   * Converts the given elements into an object, that provides these\n   * entries by their id (determined by the entry's groupPattern).\n   * For example, [{id: A, value: 1}] becomes result['A'] = 1.\n   *\n   * Furthermore, this function creates a group property (determined by the entry's groupName)\n   * and collects all related elements (specified by their group pattern) in it.\n   *\n   * @param {DescribedEntry[]} elements of DescribedEntry elements\n   * @return {DescribedEntry[] entries indexed by id\n   */\n  function groupFlattenedData(flattenedData) {\n    return groupById(\n      flattenedData,\n      function (entry) {\n        return entry._identifier.groupId;\n      },\n      function (entry) {\n        return entry._description.groupName;\n      }\n    );\n  }\n\n  /**\n   * Converts the given elements into an object, that provides these\n   * entries by their id. For example, [{id: A, value: 1}] becomes\n   * result['A'] = 1. Furthermore, this function creates a group property (with the name )\n   * and collects all related elements (specified by their group pattern) in it.\n   *\n   * @param {DescribedEntry[]} elements of DescribedEntry elements\n   * @param {stringFieldOfDescribedEntryFunction} groupNameOfElementFunction function, that returns the name of the group property that will be created inside the \"main\" element.\n   * @param {stringFieldOfDescribedEntryFunction} groupIdOfElementFunction returns the group id of an DescribedEntry\n   * @return {DescribedEntry[] entries indexed by id\n   */\n  function groupById(elements, groupIdOfElementFunction, groupNameOfElementFunction) {\n    var groupedResult = new Object();\n    for (var index = 0; index < elements.length; index++) {\n      var element = elements[index];\n      var groupId = groupIdOfElementFunction(element);\n      if (groupId === \"\") {\n        continue;\n      }\n      var groupName = groupNameOfElementFunction(element);\n      if (groupName == null || groupName === \"\") {\n        continue;\n      }\n      if (!groupedResult[groupId]) {\n        groupedResult[groupId] = element; \n      }\n      groupedResult[groupId].addGroupEntry(groupName, element);\n    }\n    return groupedResult;\n  }\n\n  /**\n   * Extracts entries out of \"flattened\" JSON data and provides an array of objects.\n   * @param {Object[]} flattenedData - flattened json from search query result\n   * @param {string} flattenedData[].name - name of the property in hierarchical order separated by points\n   * @param {string} flattenedData[].value - value of the property as string\n   * @param {PropertyStructureDescription} - description of structure of the entries that should be extracted\n   * @return {DescribedEntry[]}\n   */\n  function extractEntriesByDescription(flattenedData, description) {\n    var removeArrayBracketsRegEx = new RegExp(\"\\\\[\\\\d+\\\\]\", \"gi\");\n    var filtered = [];\n\n    flattenedData.filter(function (entry) {\n      var propertyNameWithoutArrayIndices = entry.name.replace(removeArrayBracketsRegEx, \"\");\n      if (description.matchesPropertyName(propertyNameWithoutArrayIndices)) {\n        var describedEntry = new datarestructor.DescribedEntryCreator(entry, description);\n        if (describedEntry._isMatchingIndex) {\n          filtered.push(describedEntry);\n        }\n      }\n    });\n    return filtered;\n  }\n\n  /**\n   * Takes already grouped {@link DescribedEntry} objects and\n   * uses their \"_identifier.groupDestinationId\" (if exists)\n   * to move groups to the given destination.\n   *\n   * This is useful, if separately described groups like \"summary\" and \"detail\" should be put together,\n   * so that every summery contains a group with the regarding details.\n   *\n   * @param {DescribedEntry[]} groupedObject - already grouped entries\n   * @return {DescribedEntry[]}\n   */\n  function applyGroupDestinationPattern(groupedObject) {\n    var keys = Object.keys(groupedObject);\n    var keysToDelete = [];\n    for (var index = 0; index < keys.length; index++) {\n      var key = keys[index];\n      var entry = groupedObject[key];\n      if (entry._description.groupDestinationPattern != \"\") {\n        var destinationKey = entry._identifier.groupDestinationId;\n        if (groupedObject[destinationKey] != null) {\n          var newGroup = entry[entry._description.groupName];\n          groupedObject[destinationKey].addGroupEntries(entry._description.groupDestinationName, newGroup);\n          keysToDelete.push(key);\n        }\n      }\n    }\n    // delete all moved entries that had been collected by their key\n    for (index = 0; index < keysToDelete.length; index+=1) {\n      var keyToDelete = keysToDelete[index];\n      delete groupedObject[keyToDelete];\n    }\n    return groupedObject;\n  }\n\n  /**\n   * Fills in extra \"_comma_separated_values\" properties into the flattened data\n   * for properties that end with an array. E.g. response.hits.hits.tags[0]=\"active\" and response.hits.hits.tags[0]=\"ready\"\n   * will lead to the extra element \"response.hits.hits.tags_comma_separated_values=\"active, ready\".\n   *\n   * @return flattened data with filled in \"_comma_separated_values\" properties\n   */\n  function fillInArrayValues(flattenedData) {\n    var trailingArrayIndexRegEx = new RegExp(\"\\\\[\\\\d+\\\\]$\", \"gi\");\n    var result = [];\n    var lastArrayProperty = \"\";\n    var lastArrayPropertyValue = \"\";\n\n    flattenedData.filter(function (entry) {\n      if (!entry.name.match(trailingArrayIndexRegEx)) {\n        if (lastArrayProperty !== \"\") {\n          result.push({ name: lastArrayProperty + \"_comma_separated_values\", value: lastArrayPropertyValue });\n          lastArrayProperty = \"\";\n        }\n        result.push(entry);\n        return;\n      }\n      var propertyNameWithoutTrailingArrayIndex = entry.name.replace(trailingArrayIndexRegEx, \"\");\n      if (lastArrayProperty === propertyNameWithoutTrailingArrayIndex) {\n        lastArrayPropertyValue += \", \" + entry.value;\n      } else {\n        if (lastArrayProperty !== \"\") {\n          result.push({ name: lastArrayProperty + \"_comma_separated_values\", value: lastArrayPropertyValue });\n          lastArrayProperty = \"\";\n        }\n        lastArrayProperty = propertyNameWithoutTrailingArrayIndex;\n        lastArrayPropertyValue = entry.value;\n      }\n      result.push(entry);\n    });\n    return result;\n  }\n\n  function propertiesAsArray(groupedData) {\n    var result = [];\n    var propertyNames = Object.keys(groupedData);\n    for (var propertyIndex = 0; propertyIndex < propertyNames.length; propertyIndex++) {\n      var propertyName = propertyNames[propertyIndex];\n      var propertyValue = groupedData[propertyName];\n      result.push(propertyValue.describedField);\n    }\n    return result;\n  }\n\n  return Transform;\n})();\n\n/**\n * Main fassade for the data restructor as static function(s).\n * \n * @example \n * var allDescriptions = [];\n * allDescriptions.push(summariesDescription());\n * allDescriptions.push(detailsDescription());\n * var result = datarestructor.Restructor.processJsonUsingDescriptions(jsonData, allDescriptions);\n * @namespace\n */\ndatarestructor.Restructor = {};\n/**\n * Static fassade function for the \"Assembly line\", that takes the jsonData and processes it using all given descriptions in their given order.\n * @param {object} jsonData - parsed JSON data or any other data object\n * @param {PropertyStructureDescription[]} descriptions - already grouped entries\n * @param {boolean} debugMode - false=default=off, true=write additional logs for detailed debugging\n * @returns {DescribedEntry[]}\n */\ndatarestructor.Restructor.processJsonUsingDescriptions = function(jsonData, descriptions, debugMode) {\n  var restructor = new datarestructor.Transform(descriptions);\n  if (debugMode) {\n    restructor.enableDebugMode();\n  }\n  return restructor.processJson(jsonData);\n};"]}