{"version":3,"sources":["../../lib/js/flattenToArray.js","templateResolver.js","describedfield.js","datarestructor.js","../../node_modules/parcel-bundler/src/builtins/hmr-runtime.js"],"names":["module","internal_object_tools","exports","flattenToArray","data","maxRecursionDepth","result","recurse","cur","prop","depth","Object","push","name","value","Array","isArray","i","l","length","isEmpty","p","templateResolverInternalCreateIfNotExists","objectToCheck","template_resolver","internalCreateIfNotExists","require","Resolver","removeArrayBracketsRegEx","RegExp","sourceDataObject","resolveTemplate","template","replaceResolvableFields","addFieldsPerGroup","resolvableFieldsOfAll","map","ignoreInternalFields","propertyName","indexOf","index","arguments","addToFilteredMapObject","stringContainingVariables","resolvableFields","replaced","propertyNames","keys","propertyIndex","propertyValue","replace","fullPropertyName","propertyInfo","getPropertyNameInfos","groupWithoutArrayIndices","group","positionOfRightMostSeparator","lastIndexOf","substr","propertyGroup","propertyGroupWithoutArrayIndices","elements","mapObject","filterMatchesFunction","element","describedFieldInternalCreateIfNotExists","described_field","DescribedDataFieldBuilder","describedField","category","type","abbreviation","image","groupNames","displayName","fieldName","fromDescribedDataField","withDefaultString","withDefaultArray","build","isSpecifiedString","defaultValue","undefined","copyWithoutGroups","describedDataField","DescribedDataFieldGroup","dataField","addGroupEntry","groupName","addGroupEntries","describedFields","datarestructorInternalCreateIfNotExists","datarestructor","PropertyStructureDescriptionBuilder","PropertyStructureDescription","description","propertyPatternTemplateMode","propertyPattern","indexStartsWith","groupPattern","groupDestinationPattern","groupDestinationName","deduplicationPattern","getDisplayNameForPropertyName","getFieldNameForPropertyName","matchesPropertyName","withDefault","propertyPatternEqualMode","displayPropertyName","createNameExtractFunction","removeArrayValuePropertyPostfixFunction","upperCaseFirstLetterForFunction","createFunctionMatchesPropertyName","patternToMatch","extractNameUsingTemplatePattern","extractNameUsingRightMostPropertyNameElement","propertyPatternToMatch","propertyNameWithoutArrayIndices","templateModePatternRegexForPattern","exec","rightMostPropertyNameElement","regularExpression","match","upperCaseFirstLetter","charAt","toUpperCase","slice","nameExtractFunction","regex","templateModePatternRegexForPatternAndVariable","propertyPatternToUse","placeholderInDoubleCurlyBracketsRegEx","variablePattern","pattern","escapeCharsForRegEx","characters","nonWordCharactersRegEx","DescribedEntryCreator","DescribedEntry","entry","indices","indicesOf","templateResolver","numberArray","_isMatchingIndex","pointDelimited","_description","_identifier","propertyNameWithArrayIndices","groupId","groupDestinationId","deduplicationId","describedEntry","describedEntries","arrayBracketsRegEx","indicesOfWithRegex","regexWithOneNumberGroup","parseInt","Transform","descriptions","config","debugMode","removeDuplicationAboveRecursionDepth","enableDebugMode","setMaxRecursionDepth","setRemoveDuplicationAboveRecursionDepth","processJson","processJsonUsingDescriptions","jsonData","processedData","fillInArrayValues","console","log","describedData","descriptionIndex","dataWithDescription","extractEntriesByDescription","deduplicateFlattenedData","groupFlattenedData","applyGroupDestinationPattern","propertiesAsArray","toDescribedFields","mergeFlattenedData","entries","entriesToMerge","idOfElementFunction","entriesToMergeById","asIdBasedObject","merged","id","idIndexedObject","flattenedData","groupById","groupIdOfElementFunction","groupNameOfElementFunction","groupedResult","filtered","filter","groupedObject","keysToDelete","key","destinationKey","newGroup","keyToDelete","trailingArrayIndexRegEx","lastArrayProperty","lastArrayPropertyValue","propertyNameWithoutTrailingArrayIndex","groupedData","describedEntity","toDescribedField","recursionDepth","field","fieldGroups","forEachGroupEntry","groupEntry","rootEntry","onFoundEntry","groupIndex","entryIndex","Restructor","restructor","OVERLAY_ID","OldModule","bundle","Module","moduleName","call","hot","hotData","_acceptCallbacks","_disposeCallbacks","accept","fn","dispose","checkedAssets","assetsToAccept","parent","isParcelRequire","WebSocket","hostname","location","protocol","ws","onmessage","event","JSON","parse","handled","assets","forEach","asset","isNew","didAccept","hmrAcceptCheck","global","parcelRequire","every","generated","js","clear","hmrApply","v","hmrAcceptRun","reload","close","onclose","removeErrorOverlay","error","message","stack","overlay","createErrorOverlay","document","body","appendChild","getElementById","remove","createElement","stackTrace","innerText","innerHTML","getParents","modules","parents","k","d","dep","concat","Function","deps","cached","cache","some","cb"],"mappings":"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","file":"datarestructor.js","sourceRoot":"../src/js","sourcesContent":["\"use strict\";\n/**\n * @fileOverview Modded (compatibility, recursion depth) version of: https://stackoverflow.com/questions/19098797/fastest-way-to-flatten-un-flatten-nested-json-objectss\n * @version ${project.version}\n * @see {@link https://stackoverflow.com/questions/19098797/fastest-way-to-flatten-un-flatten-nested-json-objectss|stackoverflow flatten nested json objects}\n */\nvar module = module || {}; // Fallback for vanilla js without modules\n\n/**\n * internal_object_tools. Not meant to be used outside this repository.\n * @default {}\n */\nvar internal_object_tools = module.exports={}; // Export module for npm...\n\n/**\n * @typedef {Object} NameValuePair\n * @property {string} name - point separated names of the flattened main and sub properties, e.g. \"responses[2].hits.hits[4]._source.name\".\n * @property {string} value - value of the property\n */\n\n/**\n * @param {object} data hierarchical object that may consist fo fields, subfields and arrays.\n * @param {number} maxRecursionDepth\n * @returns {NameValuePair[]} array of property name and value pairs\n */\ninternal_object_tools.flattenToArray = function (data, maxRecursionDepth) {\n  var result = [];\n  if (typeof maxRecursionDepth !== \"number\" || maxRecursionDepth < 1) {\n    maxRecursionDepth = 20;\n  }\n  function recurse(cur, prop, depth) {\n    if (depth > maxRecursionDepth || typeof cur === \"function\") {\n      return;\n    }\n    if (Object(cur) !== cur) {\n      result.push({ name: prop, value: cur });\n    } else if (Array.isArray(cur)) {\n      var i;\n      var l = cur.length;\n      for (i = 0; i < l; i += 1) {\n        recurse(cur[i], prop + \"[\" + i + \"]\", depth + 1);\n      }\n      if (l === 0) {\n        result[prop] = [];\n        result.push({ name: prop, value: \"\" });\n      }\n    } else {\n      var isEmpty = true;\n      var p;\n      for (p in cur) {\n        isEmpty = false;\n        recurse(cur[p], prop ? prop + \".\" + p : p, depth + 1);\n      }\n      if (isEmpty && prop) {\n        result.push({ name: prop, value: \"\" });\n      }\n    }\n  }\n  recurse(data, \"\", 0);\n  return result;\n};\n","/**\n * @file Provides a simple template resolver, that replaces variables in double curly brackets with the values of a given object.\n * @version {@link https://github.com/JohT/data-restructor-js/releases/latest latest version}\n * @author JohT\n * @version ${project.version}\n */\n\"use strict\";\nvar module = templateResolverInternalCreateIfNotExists(module); // Fallback for vanilla js without modules\n\nfunction templateResolverInternalCreateIfNotExists(objectToCheck) {\n  return objectToCheck || {};\n}\n\n/**\n * Provides a simple template resolver, that replaces variables in double curly brackets with the values of a given object.\n * @module template_resolver\n */\nvar template_resolver = (module.exports = {}); // Export module for npm...\ntemplate_resolver.internalCreateIfNotExists = templateResolverInternalCreateIfNotExists;\n\nvar internal_object_tools = internal_object_tools || require(\"../../lib/js/flattenToArray\"); // supports vanilla js & npm\n\ntemplate_resolver.Resolver = (function () {\n  var removeArrayBracketsRegEx = new RegExp(\"\\\\[\\\\d+\\\\]\", \"gi\");\n\n  /**\n   * Resolver. Is used inside this repository. It could also be used outside.\n   * @param {*} sourceDataObject The properties of this object will be used to replace the placeholders in the template.\n   * @constructs Resolver\n   * @alias module:template_resolver.Resolver\n   */\n  function Resolver(sourceDataObject) {\n    /**\n     * The properties of this source data object will be used to replace the placeholders in the template.\n     */\n    this.sourceDataObject = sourceDataObject;\n    /**\n     * Resolves the given template.\n     *\n     * The template may contain variables in double curly brackets.\n     * Supported variables are all properties of this object, e.g. \"{{fieldName}}\", \"{{displayName}}\", \"{{value}}\".\n     * Since this object may also contains (described) groups of sub objects, they can also be used, e.g. \"{{summaries[0].value}}\"\n     * Parts of the index can be inserted by using e.g. \"{{index[1]}}\".\n     *\n     * @param {string} template\n     * @returns {string} resolved template\n     */\n    this.resolveTemplate = function (template) {\n      return this.replaceResolvableFields(template, addFieldsPerGroup(this.resolvableFieldsOfAll(this.sourceDataObject)));\n    };\n    /**\n     * Returns a map like object, that contains all resolvable fields and their values as properties.\n     * This function takes a variable count of input parameters,\n     * each containing an object that contains resolvable fields to extract from.\n     *\n     * The recursion depth is limited to 3, so that an object,\n     * that contains an object can contain another object (but not further).\n     *\n     * Properties beginning with an underscore in their name will be filtered out, since they are considered as internal fields.\n     *\n     * @param {...object} varArgs variable count of parameters. Each parameter contains an object that fields should be resolvable for variables.\n     * @returns {object} object with resolvable field names and their values.\n     * @public\n     */\n    this.resolvableFieldsOfAll = function () {\n      var map = {};\n      var ignoreInternalFields = function (propertyName) {\n        return propertyName.indexOf(\"_\") !== 0 && propertyName.indexOf(\"._\") < 0;\n      };\n      var index;\n      for (index = 0; index < arguments.length; index += 1) {\n        addToFilteredMapObject(internal_object_tools.flattenToArray(arguments[index], 3), map, ignoreInternalFields);\n      }\n      return map;\n    };\n    /**\n     * Replaces all variables in double curly brackets, e.g. {{property}},\n     * with the value of that property from the resolvableProperties.\n     *\n     * Supported property types: string, number, boolean\n     * @param {string} stringContainingVariables\n     * @param {object[]} resolvableFields (name=value)\n     */\n    this.replaceResolvableFields = function (stringContainingVariables, resolvableFields) {\n      var replaced = stringContainingVariables;\n      var propertyNames = Object.keys(resolvableFields);\n      var propertyIndex = 0;\n      var propertyName = \"\";\n      var propertyValue = \"\";\n      for (propertyIndex = 0; propertyIndex < propertyNames.length; propertyIndex += 1) {\n        propertyName = propertyNames[propertyIndex];\n        propertyValue = resolvableFields[propertyName];\n        replaced = replaced.replace(\"{{\" + propertyName + \"}}\", propertyValue);\n      }\n      return replaced;\n    };\n  }\n\n  /**\n   * Adds the value of the \"fieldName\" property (including its group prefix) and its associated \"value\" property content.\n   * For example: detail[2].fieldName=\"name\", detail[2].value=\"Smith\" lead to the additional property detail.name=\"Smith\".\n   * @param {object} object with resolvable field names and their values.\n   * @returns {object} object with resolvable field names and their values.\n   * @protected\n   * @memberof module:template_resolver.Resolver\n   */\n  function addFieldsPerGroup(map) {\n    var propertyNames = Object.keys(map);\n    var i, fullPropertyName, propertyInfo, propertyValue;\n    for (i = 0; i < propertyNames.length; i += 1) {\n      fullPropertyName = propertyNames[i];\n      propertyValue = map[fullPropertyName];\n      propertyInfo = getPropertyNameInfos(fullPropertyName);\n      // Supports fields that are defined by a property named \"fieldName\" (containing the name)\n      // and a property named \"value\" inside the same sub object (containing its value).\n      // Ignore custom fields that are named \"fieldName\"(propertyValue), since this would lead to an unpredictable behavior.\n      // TODO could make \"fieldName\" and \"value\" configurable\n      if (propertyInfo.name === \"fieldName\" && propertyValue !== \"fieldName\") {\n        map[propertyInfo.groupWithoutArrayIndices + propertyValue] = map[propertyInfo.group + \"value\"];\n      }\n    }\n    return map;\n  }\n\n  /**\n   * Infos about the full property name including the name of the group (followed by the separator) and the name of the property itself.\n   * @param {String} fullPropertyName\n   * @returns {Object} Contains \"group\" (empty or group name including trailing separator \".\"), \"groupWithoutArrayIndices\" and \"name\" (property name).\n   * @protected\n   * @memberof module:template_resolver.Resolver\n   */\n  function getPropertyNameInfos(fullPropertyName) {\n    var positionOfRightMostSeparator = fullPropertyName.lastIndexOf(\".\");\n    var propertyName = fullPropertyName;\n    if (positionOfRightMostSeparator > 0) {\n      propertyName = fullPropertyName.substr(positionOfRightMostSeparator + 1);\n    }\n    var propertyGroup = \"\";\n    if (positionOfRightMostSeparator > 0) {\n      propertyGroup = fullPropertyName.substr(0, positionOfRightMostSeparator + 1); //includes the trailing \".\".\n    }\n    var propertyGroupWithoutArrayIndices = propertyGroup.replace(removeArrayBracketsRegEx, \"\");\n    return { group: propertyGroup, groupWithoutArrayIndices: propertyGroupWithoutArrayIndices, name: propertyName };\n  }\n\n  /**\n   * Collects all flattened name-value-pairs into one object using the property names as keys and their values as values (map-like).\n   * Example: `{name: \"accountNumber\", value: \"12345\"}` becomes `mapObject[\"accountNumber\"]=\"12345\"`.\n   *\n   * @param {NameValuePair[]} elements flattened array of name-value-pairs\n   * @param {object} mapObject container to collect the results. Needs to be created before e.g. using `{}`.\n   * @param {function} filterMatchesFunction takes the property name as string argument and returns true (include) or false (exclude).\n   * @protected\n   * @memberof module:template_resolver.Resolver\n   */\n  function addToFilteredMapObject(elements, mapObject, filterMatchesFunction) {\n    var index, element;\n    for (index = 0; index < elements.length; index += 1) {\n      element = elements[index];\n      if (typeof filterMatchesFunction === \"function\" && filterMatchesFunction(element.name)) {\n        mapObject[element.name] = element.value;\n      }\n    }\n    return mapObject;\n  }\n\n  return Resolver;\n}());\n","/**\n * @file Describes a data field of the restructured data.\n * @version {@link https://github.com/JohT/data-restructor-js/releases/latest latest version}\n * @author JohT\n * @version ${project.version}\n */\n\"use strict\";\nvar module = describedFieldInternalCreateIfNotExists(module); // Fallback for vanilla js without modules\n\nfunction describedFieldInternalCreateIfNotExists(objectToCheck) {\n  return objectToCheck || {};\n}\n\n/**\n * Describes a data field of the restructured data.\n * @module described_field\n */\nvar described_field = (module.exports = {}); // Export module for npm...\ndescribed_field.internalCreateIfNotExists = describedFieldInternalCreateIfNotExists;\n\n/**\n * Describes a field of the restructured data.\n * Dynamically added properties represent custom named groups containing DescribedDataField-Arrays.\n *\n * @typedef {Object} module:described_field.DescribedDataField\n * @property {string} [category=\"\"] - name of the category. Could contain a short domain name like \"product\" or \"vendor\".\n * @property {string} [type=\"\"] - type of the data element. Examples: \"summary\" for e.g. a list overview. \"detail\" e.g. when a summary is selected. \"filter\" e.g. for field/value pair results that can be selected as data filters.\n * @property {string} [abbreviation=\"\"] - one optional character, a symbol character or a short abbreviation of the category\n * @property {string} [image=\"\"] - one optional path to an image resource\n * @property {string} index - array of numbers containing the splitted index. Example: \"responses[2].hits.hits[4]._source.name\" will have an index of [2,4]\n * @property {string[]} groupNames - array of names of all dynamically added properties representing groups\n * @property {string} displayName - display name of the field\n * @property {string} fieldName - field name\n * @property {{*}} value - content of the field\n * @property {module:described_field.DescribedDataField[]} [couldBeAnyCustomGroupName] any number of groups attached to the field each containing multiple fields\n */\n\ndescribed_field.DescribedDataFieldBuilder = (function () {\n  /**\n   * Builds a {@link module:described_field.DescribedDataField}.\n   * DescribedDataField is the main element of the restructured data and therefore considered \"public\".\n   * @constructs DescribedDataFieldBuilder\n   * @alias module:described_field.DescribedDataFieldBuilder\n   */\n  function DescribedDataFieldBuilder() {\n    /**\n     * @type {module:described_field.DescribedDataField}\n     */\n    this.describedField = {\n      category: \"\",\n      type: \"\",\n      abbreviation: \"\",\n      image: \"\",\n      index: [],\n      groupNames: [],\n      displayName: \"\",\n      fieldName: \"\",\n      value: \"\"\n    };\n    /**\n     * Takes over all values of the template {@link module:described_field.DescribedDataField}.\n     * @function\n     * @param {module:described_field.DescribedDataField} template\n     * @returns {DescribedDataFieldBuilder}\n     * @example fromDescribedDataField(sourceField)\n     */\n    this.fromDescribedDataField = function (template) {\n      this.category(template.category);\n      this.type(template.type);\n      this.abbreviation(template.abbreviation);\n      this.image(template.image);\n      this.index(template.index);\n      this.groupNames(template.groupNames);\n      this.displayName(template.displayName);\n      this.fieldName(template.fieldName);\n      this.value(template.value);\n      return this;\n    };\n    /**\n     * Sets the category.\n     *\n     * Contains a short domain nam, for example:\n     * - \"product\" for products\n     * - \"vendor\" for vendors\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example category(\"Product\")\n     */\n    this.category = function (value) {\n      this.describedField.category = withDefaultString(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the type.\n     *\n     * Contains the type of the entry, for example:\n     * - \"summary\" for e.g. a list overview.\n     * - \"detail\" e.g. when a summary is selected.\n     * - \"filter\" e.g. for field/value pair results that can be selected as search parameters.\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example type(\"summary\")\n     */\n    this.type = function (value) {\n      this.describedField.type = withDefaultString(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the optional abbreviation.\n     *\n     * Contains a symbol character or a very short abbreviation of the category.\n     * - \"P\" for products\n     * - \"V\" for vendors\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example abbreviation(\"P\")\n     */\n    this.abbreviation = function (value) {\n      this.describedField.abbreviation = withDefaultString(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the optional path to an image resource.\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example image(\"img/product.png\")\n     */\n    this.image = function (value) {\n      this.describedField.image = withDefaultString(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the index as an array of numbers containing the splitted array indexes of the source field.\n     * Example: \"responses[2].hits.hits[4]._source.name\" will have an index of [2,4].\n     *\n     * @function\n     * @param {number[]} [value=[]]\n     * @returns {DescribedDataFieldBuilder}\n     * @example index([2,4])\n     */\n    this.index = function (value) {\n      this.describedField.index = withDefaultArray(value, []);\n      return this;\n    };\n    /**\n     * Sets the group names as an array of strings containing the names of the dynamically added properties,\n     * that contain an array of {@link module:described_field.DescribedDataField}-Objects.\n     *\n     * @function\n     * @param {string[]} [value=[]]\n     * @returns {DescribedDataFieldBuilder}\n     * @example groupNames([\"summaries\",\"details\",\"options\"])\n     */\n    this.groupNames = function (value) {\n      this.describedField.groupNames = withDefaultArray(value, []);\n      return this;\n    };\n    /**\n     * Sets the display name.\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example displayName(\"Color\")\n     */\n    this.displayName = function (value) {\n      this.describedField.displayName = withDefaultString(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the (technical) field name.\n     *\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {DescribedDataFieldBuilder}\n     * @example fieldName(\"color\")\n     */\n    this.fieldName = function (value) {\n      this.describedField.fieldName = withDefaultString(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the value/content of the field.\n     *\n     * @function\n     * @param {*} value\n     * @returns {DescribedDataFieldBuilder}\n     * @example value(\"darkblue\")\n     */\n    this.value = function (value) {\n      this.describedField.value = value;\n      return this;\n    };\n\n    /**\n     * Finalizes the settings and builds the {@link module:described_field.DescribedDataField}.\n     * @function\n     * @returns {module:described_field.DescribedDataField}\n     */\n    this.build = function () {\n      return this.describedField;\n    };\n  }\n\n  function isSpecifiedString(value) {\n    return typeof value === \"string\" && value !== null && value !== \"\";\n  }\n\n  function withDefaultString(value, defaultValue) {\n    return isSpecifiedString(value) ? value : defaultValue;\n  }\n\n  function withDefaultArray(value, defaultValue) {\n    return value === undefined || value === null ? defaultValue : value;\n  }\n\n  return DescribedDataFieldBuilder;\n}());\n\n/**\n * Creates a new described data field with all properties of the original one except for dynamically added groups.\n * @param {module:described_field.DescribedDataField} describedDataField\n * @returns {module:described_field.DescribedDataField}\n * @memberof module:described_field\n */\ndescribed_field.copyWithoutGroups = function (describedDataField) {\n  return new described_field.DescribedDataFieldBuilder().fromDescribedDataField(describedDataField).groupNames([]).build();\n};\n\ndescribed_field.DescribedDataFieldGroup = (function () {\n  /**\n   * Adds groups to {@link module:described_field.DescribedDataField}s. These groups are dynamically added properties\n   * that contain an array of sub fields of the same type {@link module:described_field.DescribedDataField}s.\n   *\n   * @param {module:described_field.DescribedDataField} dataField\n   * @constructs DescribedDataFieldGroup\n   * @alias module:described_field.DescribedDataFieldGroup\n   * @example new described_field.DescribedDataFieldGroup(field).addGroupEntry(\"details\", detailField);\n   */\n  function DescribedDataFieldGroup(dataField) {\n    this.dataField = dataField;\n\n    /**\n     * Adds an entry to the given group. If the group does not exist, it will be created.\n     * @function\n     * @param {String} groupName name of the group to which the entry will be added\n     * @param {module:described_field.DescribedDataField} describedField sub field that is added to the group\n     * @returns {DescribedDataFieldGroup}\n     */\n    this.addGroupEntry = function (groupName, describedField) {\n      this.addGroupEntries(groupName, [describedField]);\n      return this;\n    };\n\n    /**\n     * Adds entries to the given group. If the group does not exist, it will be created.\n     * @function\n     * @param {String} groupName name of the group to which the entries will be added\n     * @param {module:described_field.DescribedDataField[]} describedFields sub fields that are added to the group\n     * @returns {DescribedDataFieldGroup}\n     */\n    this.addGroupEntries = function (groupName, describedFields) {\n      if (!groupName || groupName.length === 0) {\n        return this;\n      }\n      if (!describedFields || describedFields.length === 0) {\n        return this;\n      }\n      if (this.dataField[groupName] === undefined) {\n        this.dataField.groupNames.push(groupName);\n        this.dataField[groupName] = [];\n      }\n      var index;\n      var describedField;\n      for (index = 0; index < describedFields.length; index += 1) {\n        describedField = describedFields[index];\n        this.dataField[groupName].push(describedField);\n      }\n      return this;\n    };\n  }\n\n  return DescribedDataFieldGroup;\n}());\n","/**\n * @file datarestructor transforms parsed JSON objects into a uniform data structure\n * @version {@link https://github.com/JohT/data-restructor-js/releases/latest latest version}\n * @author JohT\n */\n\n \"use strict\";\nvar module = datarestructorInternalCreateIfNotExists(module); // Fallback for vanilla js without modules\n\nfunction datarestructorInternalCreateIfNotExists(objectToCheck) {\n  return objectToCheck || {};\n}\n\n/**\n * datarestructor namespace and module declaration.\n * It contains all functions to convert an object (e.g. parsed JSON) into uniform enumerated list of described field entries.\n * \n * <b>Transformation steps:</b>\n * - JSON\n * - flatten\n * - mark and identify\n * - add array fields\n * - deduplicate \n * - group\n * - flatten again\n * @module datarestructor\n */\nvar datarestructor = module.exports={}; // Export module for npm...\ndatarestructor.internalCreateIfNotExists = datarestructorInternalCreateIfNotExists;\n\nvar internal_object_tools = internal_object_tools || require(\"../../lib/js/flattenToArray\"); // supports vanilla js & npm\nvar template_resolver = template_resolver || require(\"../../src/js/templateResolver\"); // supports vanilla js & npm\nvar described_field = described_field || require(\"../../src/js/describedfield\"); // supports vanilla js & npm\n\n/**\n * Takes the full qualified original property name and extracts a simple name out of it.\n * \n * @callback module:datarestructor.propertyNameFunction\n * @param {string} propertyName full qualified, point separated property name \n * @return {String} extracted, simple name\n */\n\n/**\n * Describes a selected part of the incoming data structure and defines, \n * how the data should be transformed.\n * \n * @typedef {Object} module:datarestructor.PropertyStructureDescription\n * @property {string} type - \"\"(default). Some examples: \"summary\" for e.g. a list overview. \"detail\" e.g. when a summary is selected. \"filter\" e.g. for field/value pair results that can be selected as search parameters.\n * @property {string} category - name of the category. Default = \"\". Could contain a short domain name like \"product\" or \"vendor\".\n * @property {string} [abbreviation=\"\"] - one optional character, a symbol character or a short abbreviation of the category\n * @property {string} [image=\"\"] - one optional path to an image resource\n * @property {boolean} propertyPatternTemplateMode - \"false\"(default): property name needs to be equal to the pattern. \"true\" allows variables like \"{{fieldName}}\" inside the pattern.\n * @property {string} propertyPattern - property name pattern (without array indices) to match\n * @property {string} indexStartsWith - \"\"(default) matches all ids. String that needs to match the beginning of the id. E.g. \"1.\" will match id=\"1.3.4\" but not \"0.1.2\".\n * @property {module:datarestructor.propertyNameFunction} getDisplayNameForPropertyName - display name for the property. \"\"(default) last property name element with upper case first letter.\n * @property {module:datarestructor.propertyNameFunction} getFieldNameForPropertyName - field name for the property. \"\" (default) last property name element.\n * @property {string} groupName - name of the property, that contains grouped entries. Default=\"group\".\n * @property {string} groupPattern - Pattern that describes how to group entries. \"groupName\" defines the name of this group. A pattern may contain variables in double curly brackets {{variable}}.\n * @property {string} groupDestinationPattern - Pattern that describes where the group should be moved to. Default=\"\"=Group will not be moved. A pattern may contain variables in double curly brackets {{variable}}.\n * @property {string} groupDestinationName - (default=groupName) Name of the group when it had been moved to the destination.\n * @property {string} deduplicationPattern - Pattern to use to remove duplicate entries. A pattern may contain variables in double curly brackets {{variable}}.\n */\n\ndatarestructor.PropertyStructureDescriptionBuilder = (function () {\n  \"use strict\";\n\n  /**\n   * Builder for a {@link PropertyStructureDescription}.\n   * @constructs PropertyStructureDescriptionBuilder\n   * @alias module:datarestructor.PropertyStructureDescriptionBuilder\n   */\n  function PropertyStructureDescription() {\n    /**\n     * @type {module:datarestructor.PropertyStructureDescription}\n     */\n    this.description = {\n      type: \"\",\n      category: \"\",\n      abbreviation: \"\",\n      image: \"\",\n      propertyPatternTemplateMode: false,\n      propertyPattern: \"\",\n      indexStartsWith: \"\",\n      groupName: \"group\",\n      groupPattern: \"\",\n      groupDestinationPattern: \"\",\n      groupDestinationName: null,\n      deduplicationPattern: \"\",\n      getDisplayNameForPropertyName: null,\n      getFieldNameForPropertyName: null,\n      matchesPropertyName: null\n    };\n    /**\n     * Sets the type.\n     * \n     * Contains the type of the entry, for example: \n     * - \"summary\" for e.g. a list overview. \n     * - \"detail\" e.g. when a summary is selected. \n     * - \"filter\" e.g. for field/value pair results that can be selected as search parameters.\n     * \n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {module:datarestructor.PropertyStructureDescription}\n     * @example type(\"summary\")\n     */\n    this.type = function (value) {\n      this.description.type = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the category.\n     * \n     * Contains a short domain nam, for example: \n     * - \"product\" for products\n     * - \"vendor\" for vendors\n     * \n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {module:datarestructor.PropertyStructureDescription}\n     * @example category(\"Product\")\n     */\n    this.category = function (value) {\n      this.description.category = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the optional abbreviation.\n     * \n     * Contains a symbol character or a very short abbreviation of the category.\n     * - \"P\" for products\n     * - \"V\" for vendors\n     * \n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {module:datarestructor.PropertyStructureDescription}\n     * @example abbreviation(\"P\")\n     */\n    this.abbreviation = function (value) {\n      this.description.abbreviation = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the optional path to an image resource.\n     * \n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {module:datarestructor.PropertyStructureDescription}\n     * @example image(\"img/product.png\")\n     */\n    this.image = function (value) {\n      this.description.image = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Sets \"equal mode\" for the property pattern.\n     * \n     * \"propertyPattern\" need to match exactly if this mode is activated.\n     *  It clears propertyPatternTemplateMode which means \"equal\" mode.\n     * @function\n     * @returns {module:datarestructor.PropertyStructureDescription}\n     */\n    this.propertyPatternEqualMode = function () {\n      this.description.propertyPatternTemplateMode = false;\n      return this;\n    };\n    /**\n     * Sets \"template mode\" for the property pattern.\n     * \n     * \"propertyPattern\" can contain variables like {{fieldName}} and\n     * doesn't need to match the property name exactly. If the \"propertyPattern\"\n     * is shorter than the property name, it also matches when the property name\n     * starts with the \"propertyPattern\".\n     * \n     * @function\n     * @returns {module:datarestructor.PropertyStructureDescription}\n     */\n    this.propertyPatternTemplateMode = function () {\n      this.description.propertyPatternTemplateMode = true;\n      return this;\n    };\n    /**\n     * Sets the property name pattern. \n     * \n     * Contains single property names with sub types separated by \".\" without array indices.\n     * May contain variables in double curly brackets.\n     * \n     * Example: \n     * - responses.hits.hits._source.{{fieldName}}\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {module:datarestructor.PropertyStructureDescription}\n     * @example propertyPattern(\"responses.hits.hits._source.{{fieldName}}\")\n     */\n    this.propertyPattern = function (value) {\n      this.description.propertyPattern = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the optional beginning of the id that needs to match.\n     * Matches all indices if set to \"\" (or not called).\n     * \n     * For example:\n     * - \"1.\" will match id=\"1.3.4\" but not \"0.1.2\".\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {module:datarestructor.PropertyStructureDescription}\n     * @example indexStartsWith(\"1.\")\n     */\n    this.indexStartsWith = function (value) {\n      this.description.indexStartsWith = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Overrides the display name of the property.\n     * \n     * If it is not set or set to \"\" then it will be derived from the\n     * last part of original property name starting with an upper case character.\n     *  \n     * For example:\n     * - \"Product\"\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {module:datarestructor.PropertyStructureDescription}\n     * @example displayPropertyName(\"Product\")\n     */\n    this.displayPropertyName = function (value) {\n      this.description.getDisplayNameForPropertyName = createNameExtractFunction(value, this.description);\n      if (isSpecifiedString(value)) {\n        return this;\n      }\n      this.description.getDisplayNameForPropertyName = removeArrayValuePropertyPostfixFunction(\n        this.description.getDisplayNameForPropertyName\n      );\n      this.description.getDisplayNameForPropertyName = upperCaseFirstLetterForFunction(\n        this.description.getDisplayNameForPropertyName\n      );\n      return this;\n    };\n    /**\n     * Overrides the (technical) field name of the property.\n     * \n     * If it is not set or set to \"\" then it will be derived from the\n     * last part of original property name.\n     *  \n     * For example:\n     * - \"product\"\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {module:datarestructor.PropertyStructureDescription}\n     * @example fieldName(\"product\")\n     */\n    this.fieldName = function (value) {\n      this.description.getFieldNameForPropertyName = createNameExtractFunction(value, this.description);\n      return this;\n    };\n    /**\n     * Sets the name of the property, that contains grouped entries. \n     * \n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {module:datarestructor.PropertyStructureDescription}\n     * @example groupName(\"details\")\n     */\n    this.groupName = function (value) {\n      this.description.groupName = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the pattern that describes how to group entries. \n     * \n     * \"groupName\" defines the name of this group.\n     * A pattern may contain variables in double curly brackets {{variable}}.\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {module:datarestructor.PropertyStructureDescription}\n     * @example groupPattern(\"{{type}}-{{category}}\")\n     */\n    this.groupPattern = function (value) {\n      this.description.groupPattern = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the pattern that describes where the group should be moved to. \n     * \n     * Default=\"\"=Group will not be moved.\n     * A pattern may contain variables in double curly brackets {{variable}}.\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {module:datarestructor.PropertyStructureDescription}\n     * @example groupDestinationPattern(\"main-{{category}}\")\n     */\n    this.groupDestinationPattern = function (value) {\n      this.description.groupDestinationPattern = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the name of the group when it had been moved to the destination.\n     * \n     * The default value is the groupName, which will be used when the value is not valid (null or empty)\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {module:datarestructor.PropertyStructureDescription}\n     * @example groupDestinationPattern(\"options\")\n     */\n    this.groupDestinationName = function (value) {\n      this.description.groupDestinationName = withDefault(value, this.description.groupName);\n      return this;\n    };\n    /**\n     * Sets the pattern to be used to remove duplicate entries. \n     * \n     * A pattern may contain variables in double curly brackets {{variable}}.\n     * A pattern may contain variables in double curly brackets {{variable}}.\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {module:datarestructor.PropertyStructureDescription}\n     * @example deduplicationPattern(\"{{category}}--{{type}}--{{index[0]}}--{{index[1]}}--{{fieldName}}\")\n     */\n    this.deduplicationPattern = function (value) {\n      this.description.deduplicationPattern = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Finalizes the settings and builds the  PropertyStructureDescription.\n     * @function\n     * @returns {module:datarestructor.PropertyStructureDescription}\n     */\n    this.build = function () {\n      this.description.matchesPropertyName = createFunctionMatchesPropertyName(this.description);\n      if (this.description.getDisplayNameForPropertyName == null) {\n        this.displayPropertyName(\"\");\n      }\n      if (this.description.getFieldNameForPropertyName == null) {\n        this.fieldName(\"\");\n      }\n      if (this.description.groupDestinationName == null) {\n        this.groupDestinationName(\"\");\n      }\n      return this.description;\n    };\n  }\n\n  function createNameExtractFunction(value, description) {\n    if (isSpecifiedString(value)) {\n      return function () {\n        return value;\n      };\n    }\n    if (description.propertyPatternTemplateMode) {\n      var patternToMatch = description.propertyPattern; // closure (closed over) parameter\n      return extractNameUsingTemplatePattern(patternToMatch);\n    }\n    return extractNameUsingRightMostPropertyNameElement();\n  }\n\n  function createFunctionMatchesPropertyName(description) {\n    var propertyPatternToMatch = description.propertyPattern; // closure (closed over) parameter\n    if (!isSpecifiedString(propertyPatternToMatch)) {\n      return function () {\n        return false; // Without a propertyPattern, no property will match (deactivated mark/identify).\n      };\n    }\n    if (description.propertyPatternTemplateMode) {\n      return function (propertyNameWithoutArrayIndices) {\n        return templateModePatternRegexForPattern(propertyPatternToMatch).exec(propertyNameWithoutArrayIndices) != null;\n      };\n    }\n    return function (propertyNameWithoutArrayIndices) {\n      return propertyNameWithoutArrayIndices === propertyPatternToMatch;\n    };\n  }\n\n  function rightMostPropertyNameElement(propertyName) {\n    var regularExpression = new RegExp(\"(\\\\w+)$\", \"gi\");\n    var match = propertyName.match(regularExpression);\n    if (match != null) {\n      return match[0];\n    }\n    return propertyName;\n  }\n\n  function upperCaseFirstLetter(value) {\n    if (value.length > 1) {\n      return value.charAt(0).toUpperCase() + value.slice(1);\n    }\n    return value;\n  }\n\n  function upperCaseFirstLetterForFunction(nameExtractFunction) {\n    return function (propertyName) {\n      return upperCaseFirstLetter(nameExtractFunction(propertyName));\n    };\n  }\n\n  function removeArrayValuePropertyPostfixFunction(nameExtractFunction) {\n    return function (propertyName) {\n      var name = nameExtractFunction(propertyName);\n      name = name != null ? name : \"\";\n      return name.replace(\"_comma_separated_values\", \"\");\n    };\n  }\n\n  function extractNameUsingTemplatePattern(propertyPattern) {\n    return function (propertyName) {\n      var regex = templateModePatternRegexForPatternAndVariable(propertyPattern, \"{{fieldName}}\");\n      var match = regex.exec(propertyName);\n      if (match && match[1] != \"\") {\n        return match[1];\n      }\n      return rightMostPropertyNameElement(propertyName);\n    };\n  }\n\n  function extractNameUsingRightMostPropertyNameElement() {\n    return function (propertyName) {\n      return rightMostPropertyNameElement(propertyName);\n    };\n  }\n\n  function templateModePatternRegexForPattern(propertyPatternToUse) {\n    var placeholderInDoubleCurlyBracketsRegEx = new RegExp(\"\\\\\\\\\\\\{\\\\\\\\\\\\{[-\\\\w]+\\\\\\\\\\\\}\\\\\\\\\\\\}\", \"gi\");\n    return templateModePatternRegexForPatternAndVariable(propertyPatternToUse, placeholderInDoubleCurlyBracketsRegEx);\n  }\n\n  function templateModePatternRegexForPatternAndVariable(propertyPatternToUse, variablePattern) {\n    var pattern = escapeCharsForRegEx(propertyPatternToUse);\n    if (typeof variablePattern === \"string\") {\n      variablePattern = escapeCharsForRegEx(variablePattern);\n    }\n    pattern = pattern.replace(variablePattern, \"([-\\\\w]+)\");\n    pattern = \"^\" + pattern;\n    return new RegExp(pattern, \"i\");\n  }\n\n  function escapeCharsForRegEx(characters) {\n    var nonWordCharactersRegEx = new RegExp(\"([^-\\\\w])\", \"gi\");\n    return characters.replace(nonWordCharactersRegEx, \"\\\\$1\");\n  }\n\n  function withDefault(value, defaultValue) {\n    return isSpecifiedString(value) ? value : defaultValue;\n  }\n\n  function isSpecifiedString(value) {\n    return typeof value === \"string\" && value != null && value != \"\";\n  }\n\n  return PropertyStructureDescription;\n})();\n\n/**\n * Adds a group item/entry to the {@link module:datarestructor.DescribedEntry}.\n * \n * @callback module:datarestructor.addGroupEntryFunction\n * @param {String} groupName name of the group that should be added\n * @param {module:datarestructor.DescribedEntry} describedEntry entry that should be added to the group\n */\n\n/**\n * Adds some group items/entries to the {@link module:datarestructor.DescribedEntry}.\n * \n * @callback module:datarestructor.addGroupEntriesFunction\n * @param {String} groupName name of the group that should be added\n * @param {module:datarestructor.DescribedEntry[]} describedEntry entries that should be added to the group\n */\n\n/**\n * @typedef {Object} module:datarestructor.DescribedEntry\n * @property {string} category - category of the result from the PropertyStructureDescription using a short name or e.g. a symbol character\n * @property {string} type - type of the result from PropertyStructureDescription\n * @property {string} [abbreviation=\"\"] - one optional character, a symbol character or a short abbreviation of the category\n * @property {string} [image=\"\"] - one optional path to an image resource\n * @property {string} index - array of numbers containing the split index. Example: \"responses[2].hits.hits[4]._source.name\" leads to an array with the two elements: [2,4]\n * @property {string} displayName - display name extracted from the point separated hierarchical property name, e.g. \"Name\"\n * @property {string} fieldName - field name extracted from the point separated hierarchical property name, e.g. \"name\"\n * @property {string} value - content of the field\n * @property {string[]} groupNames - array of names of all dynamically added properties representing groups\n * @property {module:datarestructor.addGroupEntryFunction} addGroupEntry - function, that adds an entry to the given group. If the group does not exist, it will be created.\n * @property {module:datarestructor.addGroupEntriesFunction} addGroupEntries - function, that adds entries to the given group. If the group does not exist, it will be created.\n * @property {boolean} _isMatchingIndex - true, when _identifier.index matches the described \"indexStartsWith\"\n * @property {Object} _identifier - internal structure for identifier. Avoid using it outside since it may change.\n * @property {string} _identifier.index - array indices in hierarchical order separated by points, e.g. \"0.0\"\n * @property {string} _identifier.value - the (single) value of the \"flattened\" property, e.g. \"Smith\"\n * @property {string} _identifier.propertyNameWithArrayIndices - the \"original\" flattened property name in hierarchical order separated by points, e.g. \"responses[0].hits.hits[0]._source.name\"\n * @property {string} _identifier.propertyNameWithoutArrayIndices - same as propertyNamesWithArrayIndices but without array indices, e.g. \"responses.hits.hits._source.name\"\n * @property {string} _identifier.groupId - Contains the resolved groupPattern from the PropertyStructureDescription. Entries with the same id will be grouped into the \"groupName\" of the PropertyStructureDescription.\n * @property {string} _identifier.groupDestinationId - Contains the resolved groupDestinationPattern from the PropertyStructureDescription. Entries with this id will be moved to the given destination group.\n * @property {string} _identifier.deduplicationId - Contains the resolved deduplicationPattern from the PropertyStructureDescription. Entries with the same id will be considered to be a duplicate and hence removed.\n * @property {Object} _description - PropertyStructureDescription for internal use. Avoid using it outside since it may change.\n */\n\n/**\n * Returns a field value of the given {@link module:datarestructor.DescribedEntry}.\n * \n * @callback module:datarestructor.stringFieldOfDescribedEntryFunction\n * @param {module:datarestructor.DescribedEntry} entry described entry that contains the field that should be returned\n * @returns {String} field value \n */\n\ndatarestructor.DescribedEntryCreator = (function () {\n  \"use strict\";\n\n  var removeArrayBracketsRegEx = new RegExp(\"\\\\[\\\\d+\\\\]\", \"gi\");\n\n  /**\n   * Creates a {@link module:datarestructor.DescribedEntry}.\n   * @constructs DescribedEntryCreator\n   * @alias module:datarestructor.DescribedEntryCreator\n   */\n  function DescribedEntry(entry, description) {\n    var indices = indicesOf(entry.name);\n    var propertyNameWithoutArrayIndices = entry.name.replace(removeArrayBracketsRegEx, \"\");\n    var templateResolver = new template_resolver.Resolver(this);\n    this.category = description.category;\n    this.type = description.type;\n    this.abbreviation = description.abbreviation;\n    this.image = description.image;\n    /**\n     * Array of numbers containing the split index.\n     * Example: \"responses[2].hits.hits[4]._source.name\" leads to an array with two elements: [2,4]\n     * This is the public version of the internal variable _identifier.index, which contains in contrast all index elements in one point separated string (e.g. \"2.4\").\n     * @type {number[]}\n     */\n    this.index = indices.numberArray;\n    this.displayName = description.getDisplayNameForPropertyName(propertyNameWithoutArrayIndices);\n    this.fieldName = description.getFieldNameForPropertyName(propertyNameWithoutArrayIndices);\n    this.value = entry.value;\n    this.groupNames = [];\n    this._isMatchingIndex = indices.pointDelimited.indexOf(description.indexStartsWith) == 0;\n    this._description = description;\n\n    this._identifier = {\n      index: indices.pointDelimited,\n      propertyNameWithArrayIndices: entry.name,\n      propertyNameWithoutArrayIndices: propertyNameWithoutArrayIndices,\n      groupId: \"\",\n      groupDestinationId: \"\",\n      deduplicationId: \"\"\n    };\n    this._identifier.groupId = templateResolver.replaceResolvableFields(\n      description.groupPattern,\n      templateResolver.resolvableFieldsOfAll(this, this._description, this._identifier)\n    );\n    this._identifier.groupDestinationId = templateResolver.replaceResolvableFields(\n      description.groupDestinationPattern,\n      templateResolver.resolvableFieldsOfAll(this, this._description, this._identifier)\n    );\n    this._identifier.deduplicationId = templateResolver.replaceResolvableFields(\n      description.deduplicationPattern,\n      templateResolver.resolvableFieldsOfAll(this, this._description, this._identifier)\n    );\n\n    /**\n     * Adds an entry to the given group. If the group does not exist, it will be created.\n     * @param {String} groupName name of the group that should be added\n     * @param {module:datarestructor.DescribedEntry} describedEntry entry that should be added to the group\n     */\n    this.addGroupEntry = function(groupName, describedEntry) {\n      this.addGroupEntries(groupName, [describedEntry]);\n    };\n\n    /**\n     * Adds entries to the given group. If the group does not exist, it will be created.\n     * @param {String} groupName\n     * @param {module:datarestructor.DescribedEntry[]} describedEntries\n     */\n    this.addGroupEntries = function(groupName, describedEntries) {\n      if (!this[groupName]) {\n        this.groupNames.push(groupName);\n        this[groupName] = [];\n      }\n      var index;\n      var describedEntry;\n      for (index = 0; index < describedEntries.length; index += 1) {\n        describedEntry = describedEntries[index];\n        this[groupName].push(describedEntry);\n      }\n    };\n  }\n  /**\n   * @typedef {Object} module:datarestructor.ExtractedIndices\n   * @property {string} pointDelimited - bracket indices separated by points\n   * @property {number[]} numberArray as array of numbers\n   */\n\n  /**\n   * Returns \"1.12.123\" and [1,12,123] for \"results[1].hits.hits[12].aggregates[123]\".\n   *\n   * @param {String} fullPropertyName\n   * @return {module:datarestructor.ExtractedIndices} extracted indices in different representations\n   * @protected\n   * @memberof module:datarestructor.DescribedEntryCreator\n   */\n  function indicesOf(fullPropertyName) {\n    var arrayBracketsRegEx = new RegExp(\"\\\\[(\\\\d+)\\\\]\", \"gi\");\n    return indicesOfWithRegex(fullPropertyName, arrayBracketsRegEx);\n  }\n\n  /**\n   * Returns \"1.12.123\" and [1,12,123] for \"results[1].hits.hits[12].aggregates[123]\".\n   *\n   * @param {string} fullPropertyName\n   * @param {RegExp} regexWithOneNumberGroup\n   * @return {module:datarestructor.ExtractedIndices} extracted indices in different representations\n   * @protected\n   * @memberof module:datarestructor.DescribedEntryCreator\n   */\n  function indicesOfWithRegex(fullPropertyName, regexWithOneNumberGroup) {\n    var pointDelimited = \"\";\n    var numberArray = [];\n    var match;\n    do {\n      match = regexWithOneNumberGroup.exec(fullPropertyName);\n      if (match) {\n        if (pointDelimited.length > 0) {\n          pointDelimited += \".\";\n        }\n        pointDelimited += match[1];\n        numberArray.push(parseInt(match[1]));\n      }\n    } while (match);\n    return { pointDelimited: pointDelimited, numberArray: numberArray };\n  }\n\n  return DescribedEntry;\n})();\n\n  /**\n   * @typedef {Object} module:datarestructor.TransformConfig\n   * @property {boolean} debugMode enables/disables detailed logging\n   * @property {number} [maxRecursionDepth=8] Maximum recursion depth\n   * @property {number} [removeDuplicationAboveRecursionDepth=1]  Duplications will be removed above the given recursion depth value and remain unchanged below it.\n   */\n\n\ndatarestructor.Transform = (function () {\n  \"use strict\";\n\n  /**\n   * Main class for the data transformation.\n   * @param {module:datarestructor.PropertyStructureDescription[]} descriptions\n   * @constructs Transform\n   * @alias module:datarestructor.Transform\n   */\n  function Transform(descriptions) {\n    /**\n     * Descriptions of the input data that define the behaviour of the transformation.\n     * @type {module:datarestructor.DescribedEntry[]}\n     */\n    this.descriptions = descriptions;\n    /**\n     * Configuration for the transformation.\n     * @protected\n     * @type {module:datarestructor.TransformConfig}\n     */\n    this.config = {\n      /**\n       * Debug mode switch, that enables/disables detailed logging.\n       * @protected\n       * @type {boolean}\n       */\n      debugMode: false,\n      /**\n       * Maximum recursion depth. Defaults to 8.\n       * @protected\n       * @type {number}\n       */\n      maxRecursionDepth: 8,\n      /**\n       * Duplications will be removed above the given recursion depth and remain below it.\n       * Defaults to 1.\n       *\n       * Since fields can contain groups of fields that can contain groups of fields..., cyclic\n       * data structures are possible by nature and will lead to duplications. Some of them\n       * might be intended e.g. to take one (sub-)field with all (duplicated) groups.\n       * To restrict duplications and improve performance it is beneficial to define a\n       * recursion depth, above which further duplication won't be used and should be removed/avoided.\n       *\n       * @protected\n       * @type {number}\n       */\n      removeDuplicationAboveRecursionDepth: 1\n    };\n    /**\n     * Enables debug mode. Logs additional information.\n     * @returns {module:datarestructor.Transform}\n     */\n    this.enableDebugMode = function () {\n      this.config.debugMode = true;\n      return this;\n    };\n\n    /**\n     * Sets the maximum recursion depth. Defaults to 8 if not set.\n     * @param {number} value non negative number.\n     * @returns {module:datarestructor.Transform}\n     */\n    this.setMaxRecursionDepth = function (value) {\n      if (typeof value !== \"number\" || value < 0) {\n        throw \"Invalid max recursion depth value: \" + value;\n      }\n      this.config.maxRecursionDepth = value;\n      return this;\n    };\n    /**\n     * Sets the recursion depth above which duplication will be removed. Duplications below it remain unchanged.\n     * Defaults to 1.\n     *\n     * Since fields can contain groups of fields that can contain groups of fields..., cyclic\n     * data structures are possible by nature and will lead to duplications. Some of them\n     * might be intended e.g. to take one (sub-)field with all (duplicated) groups.\n     * To restrict duplications and improve performance it is beneficial to define a\n     * recursion depth, above which further duplication won't be used and should be removed/avoided.\n     *\n     * @param {number} value non negative number.\n     * @returns {module:datarestructor.Transform}\n     */\n    this.setRemoveDuplicationAboveRecursionDepth = function (value) {\n      if (typeof value !== \"number\" || value < 0) {\n        throw \"Invalid remove duplications above recursion depth value: \" + value;\n      }\n      this.config.removeDuplicationAboveRecursionDepth = value;\n      return this;\n    };\n    /**\n     * \"Assembly line\", that takes the (pared JSON) data and processes it using all given descriptions in their given order.\n     * @param {object} data - parsed JSON data or any other data object\n     * @returns {module:datarestructor.DescribedEntry[]}\n     * @example\n     * var allDescriptions = [];\n     * allDescriptions.push(summariesDescription());\n     * allDescriptions.push(detailsDescription());\n     * var result = new datarestructor.Transform(allDescriptions).processJson(jsonData);\n     */\n    this.processJson = function (data) {\n      return processJsonUsingDescriptions(data, this.descriptions, this.config);\n    };\n  }\n\n  /**\n   * \"Assembly line\", that takes the jsonData and processes it using all given descriptions in their given order.\n   * @param {object} jsonData parsed JSON data or any other data object\n   * @param {module:datarestructor.PropertyStructureDescription[]} descriptions - already grouped entries\n   * @param {module:datarestructor.TransformConfig} config configuration for the data transformation\n   * @returns {module:datarestructor.DescribedEntry[]}\n   * @protected\n   * @memberof module:datarestructor.Transform\n   */\n  function processJsonUsingDescriptions(jsonData, descriptions, config) {\n    // \"Flatten\" the hierarchical input json to an array of property names (point separated \"folders\") and values.\n    var processedData = internal_object_tools.flattenToArray(jsonData);\n    // Fill in properties ending with the name \"_comma_separated_values\" for array values to make it easier to display them.\n    processedData = fillInArrayValues(processedData);\n\n    if (config.debugMode) {\n      console.log(\"flattened data with array values:\");\n      console.log(processedData);\n    }\n\n    // Mark, identify and harmonize the flattened data by applying one description after another in their given order.\n    var describedData = [];\n    var descriptionIndex, description, dataWithDescription;\n    for (descriptionIndex = 0; descriptionIndex < descriptions.length; descriptionIndex += 1) {\n      description = descriptions[descriptionIndex];\n      // Filter all entries that match the current description and enrich them with it\n      dataWithDescription = extractEntriesByDescription(processedData, description);\n      // Remove duplicate entries where a deduplicationPattern is described\n      describedData = deduplicateFlattenedData(describedData, dataWithDescription);\n    }\n    processedData = describedData;\n\n    if (config.debugMode) {\n      console.log(\"describedData data:\");\n      console.log(processedData);\n    }\n\n    // Group entries where a groupPattern is described\n    processedData = groupFlattenedData(processedData);\n\n    if (config.debugMode) {\n      console.log(\"grouped describedData data:\");\n      console.log(processedData);\n    }\n\n    // Move group entries where a groupDestinationPattern is described\n    processedData = applyGroupDestinationPattern(processedData);\n\n    if (config.debugMode) {\n      console.log(\"moved grouped describedData data:\");\n      console.log(processedData);\n    }\n\n    // Turns the grouped object back into an array of DescribedEntry-Objects\n    processedData = propertiesAsArray(processedData);\n\n    // Converts the internal described entries  into described fields\n    processedData = toDescribedFields(processedData, config);\n\n    if (config.debugMode) {\n      console.log(\"transformed result:\");\n      console.log(processedData);\n    }\n\n    return processedData;\n  }\n\n  /**\n   * Takes two arrays of objects, e.g. [{id: B, value: 2},{id: C, value: 3}]\n   * and [{id: A, value: 1},{id: B, value: 4}] and merges them into one:\n   * [{id: C, value: 3},{id: A, value: 1},{id: B, value: 4}]\n   *\n   * Entries with the same id (\"duplicates\") will be overwritten.\n   * Only the last element with the same id remains. The order is\n   * determined by the order of the array elements, whereas the first\n   * array comes before the second one. This means, that entries with the\n   * same id in the second array overwrite entries in the first array,\n   * and entries that occur later in the array overwrite earlier ones,\n   * if they have the same id.\n   *\n   * The id is extracted from every element using the given function.\n   *\n   * @param {module:datarestructor.DescribedEntry[]} entries\n   * @param {module:datarestructor.DescribedEntry[]} entriesToMerge\n   * @param {module:datarestructor.stringFieldOfDescribedEntryFunction} idOfElementFunction returns the id of an DescribedEntry\n   * @protected\n   * @memberof module:datarestructor.Transform\n   */\n  function mergeFlattenedData(entries, entriesToMerge, idOfElementFunction) {\n    var entriesToMergeById = asIdBasedObject(entriesToMerge, idOfElementFunction);\n    var merged = [];\n    var index, entry, id;\n    for (index = 0; index < entries.length; index += 1) {\n      entry = entries[index];\n      id = idOfElementFunction(entry);\n      if (id == null || id === \"\" || entriesToMergeById[id] == null) {\n        merged.push(entry);\n      }\n    }\n    for (index = 0; index < entriesToMerge.length; index += 1) {\n      entry = entriesToMerge[index];\n      merged.push(entry);\n    }\n    return merged;\n  }\n\n  /**\n   * Takes two arrays of objects, e.g. [{id: B, value: 2},{id: C, value: 3}]\n   * and [{id: A, value: 1},{id: B, value: 4}] and merges them into one:\n   * [{id: C, value: 3},{id: A, value: 1},{id: B, value: 4}]\n   *\n   * Entries with the same id (\"duplicates\") will be overwritten.\n   * Only the last element with the same id remains. The order is\n   * determined by the order of the array elements, whereas the first\n   * array comes before the second one. This means, that entries with the\n   * same id in the second array overwrite entries in the first array,\n   * and entries occurring later in the array overwrite earlier ones,\n   * if they have the same id.\n   *\n   * \"entriesToMerge\" will be returned directly, if \"entries\" is null or empty.\n   *\n   * The id is extracted from every element using their deduplication pattern (if available).\n   *\n   * @param {module:datarestructor.DescribedEntry[]} entries\n   * @param {module:datarestructor.DescribedEntry[]} entriesToMerge\n   * @param {module:datarestructor.stringFieldOfDescribedEntryFunction} idOfElementFunction returns the id of an DescribedEntry\n   * @see mergeFlattenedData\n   * @protected\n   * @memberof module:datarestructor.Transform\n   */\n  function deduplicateFlattenedData(entries, entriesToMerge) {\n    if (entries == null || entries.length == 0) {\n      return entriesToMerge;\n    }\n    var idOfElementFunction = function (entry) {\n      return entry._identifier.deduplicationId;\n    };\n    return mergeFlattenedData(entries, entriesToMerge, idOfElementFunction);\n  }\n\n  /**\n   * Converts the given elements to an object, that provides these\n   * entries by their id. For example, [{id: A, value: 1}] becomes\n   * result['A'] = 1.\n   * @param {module:datarestructor.DescribedEntry[]} elements of DescribedEntry elements\n   * @param {module:datarestructor.stringFieldOfDescribedEntryFunction} idOfElementFunction returns the id of an DescribedEntry\n   * @return {module:datarestructor.DescribedEntry[] entries indexed by id\n   * @protected\n   * @memberof module:datarestructor.Transform\n   */\n  function asIdBasedObject(elements, idOfElementFunction) {\n    var idIndexedObject = new Object();\n    for (var index = 0; index < elements.length; index++) {\n      var element = elements[index];\n      idIndexedObject[idOfElementFunction(element)] = element;\n    }\n    return idIndexedObject;\n  }\n\n  /**\n   * Converts the given elements into an object, that provides these\n   * entries by their id (determined by the entry's groupPattern).\n   * For example, [{id: A, value: 1}] becomes result['A'] = 1.\n   *\n   * Furthermore, this function creates a group property (determined by the entry's groupName)\n   * and collects all related elements (specified by their group pattern) in it.\n   *\n   * @param {module:datarestructor.DescribedEntry[]} elements of DescribedEntry elements\n   * @return {module:datarestructor.DescribedEntry[] entries indexed by id\n   * @protected\n   * @memberof module:datarestructor.Transform\n   */\n  function groupFlattenedData(flattenedData) {\n    return groupById(\n      flattenedData,\n      function (entry) {\n        return entry._identifier.groupId;\n      },\n      function (entry) {\n        return entry._description.groupName;\n      }\n    );\n  }\n\n  /**\n   * Converts the given elements into an object, that provides these\n   * entries by their id. For example, [{id: A, value: 1}] becomes\n   * result['A'] = 1. Furthermore, this function creates a group property (with the name )\n   * and collects all related elements (specified by their group pattern) in it.\n   *\n   * @param {module:datarestructor.DescribedEntry[]} elements of DescribedEntry elements\n   * @param {module:datarestructor.stringFieldOfDescribedEntryFunction} groupNameOfElementFunction function, that returns the name of the group property that will be created inside the \"main\" element.\n   * @param {module:datarestructor.stringFieldOfDescribedEntryFunction} groupIdOfElementFunction returns the group id of an DescribedEntry\n   * @return {module:datarestructor.DescribedEntry[] entries indexed by id\n   * @protected\n   * @memberof module:datarestructor.Transform\n   */\n  function groupById(elements, groupIdOfElementFunction, groupNameOfElementFunction) {\n    var groupedResult = new Object();\n    for (var index = 0; index < elements.length; index++) {\n      var element = elements[index];\n      var groupId = groupIdOfElementFunction(element);\n      if (groupId === \"\") {\n        continue;\n      }\n      var groupName = groupNameOfElementFunction(element);\n      if (groupName == null || groupName === \"\") {\n        continue;\n      }\n      if (!groupedResult[groupId]) {\n        groupedResult[groupId] = element;\n      }\n      groupedResult[groupId].addGroupEntry(groupName, element);\n    }\n    return groupedResult;\n  }\n\n  /**\n   * Extracts entries out of \"flattened\" JSON data and provides an array of objects.\n   * @param {Object[]} flattenedData - flattened json from search query result\n   * @param {string} flattenedData[].name - name of the property in hierarchical order separated by points\n   * @param {string} flattenedData[].value - value of the property as string\n   * @param {module:datarestructor.PropertyStructureDescription} - description of structure of the entries that should be extracted\n   * @return {module:datarestructor.DescribedEntry[]}\n   * @protected\n   * @memberof module:datarestructor.Transform\n   */\n  function extractEntriesByDescription(flattenedData, description) {\n    var removeArrayBracketsRegEx = new RegExp(\"\\\\[\\\\d+\\\\]\", \"gi\");\n    var filtered = [];\n\n    flattenedData.filter(function (entry) {\n      var propertyNameWithoutArrayIndices = entry.name.replace(removeArrayBracketsRegEx, \"\");\n      if (description.matchesPropertyName(propertyNameWithoutArrayIndices)) {\n        var describedEntry = new datarestructor.DescribedEntryCreator(entry, description);\n        if (describedEntry._isMatchingIndex) {\n          filtered.push(describedEntry);\n        }\n      }\n    });\n    return filtered;\n  }\n\n  /**\n   * Takes already grouped {@link module:datarestructor.DescribedEntry} objects and\n   * uses their \"_identifier.groupDestinationId\" (if exists)\n   * to move groups to the given destination.\n   *\n   * This is useful, if separately described groups like \"summary\" and \"detail\" should be put together,\n   * so that every summery contains a group with the regarding details.\n   *\n   * @param {module:datarestructor.DescribedEntry[]} groupedObject - already grouped entries\n   * @return {module:datarestructor.DescribedEntry[]}\n   * @protected\n   * @memberof module:datarestructor.Transform\n   */\n  function applyGroupDestinationPattern(groupedObject) {\n    var keys = Object.keys(groupedObject);\n    var keysToDelete = [];\n    for (var index = 0; index < keys.length; index++) {\n      var key = keys[index];\n      var entry = groupedObject[key];\n      if (entry._description.groupDestinationPattern != \"\") {\n        var destinationKey = entry._identifier.groupDestinationId;\n        if (groupedObject[destinationKey] != null) {\n          var newGroup = entry[entry._description.groupName];\n          groupedObject[destinationKey].addGroupEntries(entry._description.groupDestinationName, newGroup);\n          keysToDelete.push(key);\n        }\n      }\n    }\n    // delete all moved entries that had been collected by their key\n    for (index = 0; index < keysToDelete.length; index += 1) {\n      var keyToDelete = keysToDelete[index];\n      delete groupedObject[keyToDelete];\n    }\n    return groupedObject;\n  }\n\n  /**\n   * Fills in extra \"_comma_separated_values\" properties into the flattened data\n   * for properties that end with an array. E.g. response.hits.hits.tags[0]=\"active\" and response.hits.hits.tags[0]=\"ready\"\n   * will lead to the extra element \"response.hits.hits.tags_comma_separated_values=\"active, ready\".\n   *\n   * @return flattened data with filled in \"_comma_separated_values\" properties\n   * @protected\n   * @memberof module:datarestructor.Transform\n   */\n  function fillInArrayValues(flattenedData) {\n    var trailingArrayIndexRegEx = new RegExp(\"\\\\[\\\\d+\\\\]$\", \"gi\");\n    var result = [];\n    var lastArrayProperty = \"\";\n    var lastArrayPropertyValue = \"\";\n\n    flattenedData.filter(function (entry) {\n      if (!entry.name.match(trailingArrayIndexRegEx)) {\n        if (lastArrayProperty !== \"\") {\n          result.push({ name: lastArrayProperty + \"_comma_separated_values\", value: lastArrayPropertyValue });\n          lastArrayProperty = \"\";\n        }\n        result.push(entry);\n        return;\n      }\n      var propertyNameWithoutTrailingArrayIndex = entry.name.replace(trailingArrayIndexRegEx, \"\");\n      if (lastArrayProperty === propertyNameWithoutTrailingArrayIndex) {\n        lastArrayPropertyValue += \", \" + entry.value;\n      } else {\n        if (lastArrayProperty !== \"\") {\n          result.push({ name: lastArrayProperty + \"_comma_separated_values\", value: lastArrayPropertyValue });\n          lastArrayProperty = \"\";\n        }\n        lastArrayProperty = propertyNameWithoutTrailingArrayIndex;\n        lastArrayPropertyValue = entry.value;\n      }\n      result.push(entry);\n    });\n    return result;\n  }\n\n  function propertiesAsArray(groupedData) {\n    var result = [];\n    var propertyNames = Object.keys(groupedData);\n    for (var propertyIndex = 0; propertyIndex < propertyNames.length; propertyIndex++) {\n      var propertyName = propertyNames[propertyIndex];\n      var propertyValue = groupedData[propertyName];\n      result.push(propertyValue);\n    }\n    return result;\n  }\n\n  /**\n   * Converts described entries (internal data structure) to described fields (external data structure).\n   * Since the structure of a described field is hierarchical, every field needs to be converted\n   * in a recursive manner. The maximum recursion depth is taken as the second parameter.\n   * @param {module:datarestructor.DescribedEntry[]} describedEntries\n   * @param {module:datarestructor.TransformConfig} config configuration for the data transformation\n   * @returns {module:described_field.DescribedDataField[]}\n   * @protected\n   * @memberof module:datarestructor.Transform\n   */\n  function toDescribedFields(describedEntries, config) {\n    var result = [];\n    var index;\n    var describedEntity;\n    for (index = 0; index < describedEntries.length; index += 1) {\n      describedEntity = describedEntries[index];\n      result.push(toDescribedField(describedEntity, 0, config));\n    }\n    return result;\n  }\n\n  /**\n   * Converts a internal described entry to a newly created public described field.\n   * Since the structure of a described field is hierarchical, this function is called recursively.\n   * Because the internal described entries may very likely contain cyclic references, the depth of recursion\n   * needs to be limited. Therefore, the current recursion depth is taken as second parameter\n   * and the maximum recursion depth is taken as third parameter.\n   * @param {module:datarestructor.DescribedEntry} entry the internal entry that will be converted\n   * @param {number} recursionDepth current hierarchy recursion depth\n   * @param {module:datarestructor.TransformConfig} config configuration for the data transformation\n   * @returns {module:described_field.DescribedDataField}\n   * @protected\n   * @memberof module:datarestructor.Transform\n   */\n  function toDescribedField(entry, recursionDepth, config) {\n    var field = new described_field.DescribedDataFieldBuilder()\n      .category(entry.category)\n      .type(entry.type)\n      .abbreviation(entry.abbreviation)\n      .image(entry.image)\n      .index(entry.index)\n      .displayName(entry.displayName)\n      .fieldName(entry.fieldName)\n      .value(entry.value)\n      .build();\n    if (recursionDepth > config.maxRecursionDepth) {\n      return field;\n    }\n    var fieldGroups = new described_field.DescribedDataFieldGroup(field);\n    forEachGroupEntry(entry, function (groupName, groupEntry) {\n      if (groupEntry != entry || recursionDepth <= config.removeDuplicationAboveRecursionDepth) {\n        fieldGroups.addGroupEntry(groupName, toDescribedField(groupEntry, recursionDepth + 1, config));\n      } else {\n        if (config.debugMode) {\n          console.log(\n            \"Removed duplicate field \" +\n              groupEntry.fieldName +\n              \" with value \" +\n              groupEntry.value +\n              \" of group \" +\n              groupName +\n              \" at recursion depth \" +\n              recursionDepth\n          );\n        }\n      }\n    });\n    return field;\n  }\n\n  /**\n   * Takes the full qualified original property name and extracts a simple name out of it.\n   *\n   * @callback module:datarestructor.onEntryFoundFunction\n   * @param {string} groupName name of the group where the entry had been found.\n   * @param {module:datarestructor.DescribedEntry} foundEntry the found entry itself.\n   */\n\n  /**\n   * Traverses through all groups and their entries and calls the given function on every found entry\n   * with the group name and the entry itself as parameters.\n   * @param {module:datarestructor.DescribedEntry} rootEntry\n   * @param {module:datarestructor.onEntryFoundFunction} onFoundEntry\n   * @protected\n   * @memberof module:datarestructor.Transform\n   */\n  function forEachGroupEntry(rootEntry, onFoundEntry) {\n    var groupIndex, entryIndex;\n    var groupName, entry;\n    for (groupIndex = 0; groupIndex < rootEntry.groupNames.length; groupIndex += 1) {\n      groupName = rootEntry.groupNames[groupIndex];\n      for (entryIndex = 0; entryIndex < rootEntry[groupName].length; entryIndex += 1) {\n        entry = rootEntry[groupName][entryIndex];\n        onFoundEntry(groupName, entry);\n      }\n    }\n  }\n\n  return Transform;\n})();\n\n/**\n * Main fassade for the data restructor as static function(s).\n * \n * @example \n * var allDescriptions = [];\n * allDescriptions.push(summariesDescription());\n * allDescriptions.push(detailsDescription());\n * var result = datarestructor.Restructor.processJsonUsingDescriptions(jsonData, allDescriptions);\n * @namespace module:datarestructor.Restructor\n */\ndatarestructor.Restructor = {};\n/**\n * Static fassade function for the \"Assembly line\", that takes the jsonData and processes it using all given descriptions in their given order.\n * @param {object} jsonData - parsed JSON data or any other data object\n * @param {module:datarestructor.PropertyStructureDescription[]} descriptions - already grouped entries\n * @param {boolean} debugMode - false=default=off, true=write additional logs for detailed debugging\n * @returns {module:datarestructor.DescribedEntry[]}\n * @memberof module:datarestructor.Restructor\n * @deprecated since v3.1.0, please use \"new datarestructor.Transform(descriptions).processJson(jsonData)\".\n */\ndatarestructor.Restructor.processJsonUsingDescriptions = function(jsonData, descriptions, debugMode) {\n  var restructor = new datarestructor.Transform(descriptions);\n  if (debugMode) {\n    restructor.enableDebugMode();\n  }\n  return restructor.processJson(jsonData);\n};","var OVERLAY_ID = '__parcel__error__overlay__';\n\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n\n  module.bundle.hotData = null;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets, assetsToAccept;\n\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = process.env.HMR_HOSTNAME || location.hostname;\n  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + ':' + process.env.HMR_PORT + '/');\n  ws.onmessage = function(event) {\n    checkedAssets = {};\n    assetsToAccept = [];\n\n    var data = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      var handled = false;\n      data.assets.forEach(function(asset) {\n        if (!asset.isNew) {\n          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);\n          if (didAccept) {\n            handled = true;\n          }\n        }\n      });\n\n      // Enable HMR for CSS by default.\n      handled = handled || data.assets.every(function(asset) {\n        return asset.type === 'css' && asset.generated.js;\n      });\n\n      if (handled) {\n        console.clear();\n\n        data.assets.forEach(function (asset) {\n          hmrApply(global.parcelRequire, asset);\n        });\n\n        assetsToAccept.forEach(function (v) {\n          hmrAcceptRun(v[0], v[1]);\n        });\n      } else if (location.reload) { // `location` global exists in a web worker context but lacks `.reload()` function.\n        location.reload();\n      }\n    }\n\n    if (data.type === 'reload') {\n      ws.close();\n      ws.onclose = function () {\n        location.reload();\n      }\n    }\n\n    if (data.type === 'error-resolved') {\n      console.log('[parcel] ✨ Error resolved');\n\n      removeErrorOverlay();\n    }\n\n    if (data.type === 'error') {\n      console.error('[parcel] 🚨  ' + data.error.message + '\\n' + data.error.stack);\n\n      removeErrorOverlay();\n\n      var overlay = createErrorOverlay(data);\n      document.body.appendChild(overlay);\n    }\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n  }\n}\n\nfunction createErrorOverlay(data) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n\n  // html encode message and stack trace\n  var message = document.createElement('div');\n  var stackTrace = document.createElement('pre');\n  message.innerText = data.error.message;\n  stackTrace.innerText = data.error.stack;\n\n  overlay.innerHTML = (\n    '<div style=\"background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;\">' +\n      '<span style=\"background: red; padding: 2px 4px; border-radius: 2px;\">ERROR</span>' +\n      '<span style=\"top: 2px; margin-left: 5px; position: relative;\">🚨</span>' +\n      '<div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">' + message.innerHTML + '</div>' +\n      '<pre>' + stackTrace.innerHTML + '</pre>' +\n    '</div>'\n  );\n\n  return overlay;\n\n}\n\nfunction getParents(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || (Array.isArray(dep) && dep[dep.length - 1] === id)) {\n        parents.push(k);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction hmrApply(bundle, asset) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (modules[asset.id] || !bundle.parent) {\n    var fn = new Function('require', 'module', 'exports', asset.generated.js);\n    asset.isNew = !modules[asset.id];\n    modules[asset.id] = [fn, asset.deps];\n  } else if (bundle.parent) {\n    hmrApply(bundle.parent, asset);\n  }\n}\n\nfunction hmrAcceptCheck(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (!modules[id] && bundle.parent) {\n    return hmrAcceptCheck(bundle.parent, id);\n  }\n\n  if (checkedAssets[id]) {\n    return;\n  }\n  checkedAssets[id] = true;\n\n  var cached = bundle.cache[id];\n\n  assetsToAccept.push([bundle, id]);\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n\n  return getParents(global.parcelRequire, id).some(function (id) {\n    return hmrAcceptCheck(global.parcelRequire, id)\n  });\n}\n\nfunction hmrAcceptRun(bundle, id) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n  if (cached) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n\n  cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      cb();\n    });\n    return true;\n  }\n}\n"]}