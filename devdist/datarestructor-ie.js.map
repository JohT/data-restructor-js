{"version":3,"sources":["../../lib/js/polyfills/isArrayPolyfill.js","../../lib/js/polyfills/arrayFilterPolyfill.js","../../lib/js/polyfills/indexOfPolyfill.js","../../lib/js/polyfills/objectKeysPolyfill.js","../../lib/js/flattenToArray.js","templateResolver.js","datarestructor.js","datarestructor-ie.js","../../node_modules/parcel-bundler/src/builtins/hmr-runtime.js"],"names":["Array","isArray","arg","Object","prototype","toString","call","filter","func","thisArg","TypeError","len","length","res","t","c","i","kValue","undefined","indexOf","max","min","member","fromIndex","that","Len","Math","keys","o","k","p","hasOwnProperty","push","module","internal_object_tools","exports","flattenToArray","data","maxRecursionDepth","result","recurse","cur","prop","depth","name","value","l","isEmpty","template_resolver","require","Resolver","removeArrayBracketsRegEx","RegExp","sourceDataObject","resolveTemplate","template","replaceResolvableFields","addFieldsPerGroup","resolvableFieldsOfAll","map","ignoreInternalFields","propertyName","index","arguments","addToFilteredMapObject","stringContainingVariables","resolvableFields","replaced","propertyNames","propertyIndex","propertyValue","replace","fullPropertyName","propertyInfo","getPropertyNameInfos","groupWithoutArrayIndices","group","positionOfRightMostSeparator","lastIndexOf","substr","propertyGroup","propertyGroupWithoutArrayIndices","elements","mapObject","filterMatchesFunction","element","datarestructor","PropertyStructureDescriptionBuilder","PropertyStructureDescription","description","type","category","abbreviation","image","propertyPatternTemplateMode","propertyPattern","indexStartsWith","groupName","groupPattern","groupDestinationPattern","groupDestinationName","deduplicationPattern","getDisplayNameForPropertyName","getFieldNameForPropertyName","matchesPropertyName","withDefault","propertyPatternEqualMode","displayPropertyName","createNameExtractFunction","isSpecifiedString","removeArrayValuePropertyPostfixFunction","upperCaseFirstLetterForFunction","fieldName","build","createFunctionMatchesPropertyName","patternToMatch","extractNameUsingTemplatePattern","extractNameUsingRightMostPropertyNameElement","propertyPatternToMatch","propertyNameWithoutArrayIndices","templateModePatternRegexForPattern","exec","rightMostPropertyNameElement","regularExpression","match","upperCaseFirstLetter","charAt","toUpperCase","slice","nameExtractFunction","regex","templateModePatternRegexForPatternAndVariable","propertyPatternToUse","placeholderInDoubleCurlyBracketsRegEx","variablePattern","pattern","escapeCharsForRegEx","characters","nonWordCharactersRegEx","defaultValue","DescribedEntryCreator","DescribedEntry","entry","indices","indicesOf","templateResolver","numberArray","displayName","_isMatchingIndex","pointDelimited","_description","_identifier","propertyNameWithArrayIndices","groupId","groupDestinationId","deduplicationId","publicFieldsJson","space","propertyNamesWithoutObjectsAndFunctions","prettyPrintJsonSpace","JSON","stringify","replacerRetainsOnlyDefinedPublicFields","getGroupEntries","addGroupEntry","describedEntry","arrayBracketsRegEx","indicesOfWithRegex","regexWithOneNumberGroup","parseInt","obj","key","onlyDefinedPublicFields","clonedEntry","clonedArray","Transform","descriptions","debugMode","enableDebugMode","processJson","processJsonUsingDescriptions","jsonData","processedData","fillInArrayValues","console","log","describedData","descriptionIndex","dataWithDescription","extractEntriesByDescription","deduplicateFlattenedData","groupFlattenedData","applyGroupDestinationPattern","propertiesAsArray","mergeFlattenedData","entries","entriesToMerge","idOfElementFunction","entriesToMergeById","asIdBasedObject","merged","id","idIndexedObject","flattenedData","groupById","groupIdOfElementFunction","groupNameOfElementFunction","groupedResult","filtered","groupedObject","keysToDelete","destinationKey","newGroup","existingGroup","updatedGroup","concat","keyToDelete","trailingArrayIndexRegEx","lastArrayProperty","lastArrayPropertyValue","propertyNameWithoutTrailingArrayIndex","groupedData","Restructor","restructor","OVERLAY_ID","OldModule","bundle","Module","moduleName","hot","hotData","_acceptCallbacks","_disposeCallbacks","accept","fn","dispose","checkedAssets","assetsToAccept","parent","isParcelRequire","WebSocket","hostname","location","protocol","ws","onmessage","event","parse","handled","assets","forEach","asset","isNew","didAccept","hmrAcceptCheck","global","parcelRequire","every","generated","js","clear","hmrApply","v","hmrAcceptRun","reload","close","onclose","removeErrorOverlay","error","message","stack","overlay","createErrorOverlay","document","body","appendChild","getElementById","remove","createElement","stackTrace","innerText","innerHTML","getParents","modules","parents","d","dep","Function","deps","cached","cache","some","cb"],"mappings":"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","file":"datarestructor-ie.js","sourceRoot":"../src/js","sourcesContent":["// https://gist.github.com/brianonn/4ef965a06b9e950d80e4e8b8e4c527f9\n// https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray\nif (!Array.isArray) {\n    Array.isArray = function(arg) {\n      return Object.prototype.toString.call(arg) === '[object Array]';\n    };\n}","// From https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter#Polyfill\nif (!Array.prototype.filter){\n    Array.prototype.filter = function(func, thisArg) {\n      'use strict';\n      if ( ! ((typeof func === 'Function' || typeof func === 'function') && this) )\n          throw new TypeError();\n     \n      var len = this.length >>> 0,\n          res = new Array(len), // preallocate array\n          t = this, c = 0, i = -1;\n  \n      var kValue;\n      if (thisArg === undefined){\n        while (++i !== len){\n          // checks to see if the key was set\n          if (i in this){\n            kValue = t[i]; // in case t is changed in callback\n            if (func(t[i], i, t)){\n              res[c++] = kValue;\n            }\n          }\n        }\n      }\n      else{\n        while (++i !== len){\n          // checks to see if the key was set\n          if (i in this){\n            kValue = t[i];\n            if (func.call(thisArg, t[i], i, t)){\n              res[c++] = kValue;\n            }\n          }\n        }\n      }\n     \n      res.length = c; // shrink down array to proper size\n      return res;\n    };\n  }","//https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf#Polyfill\nif (!Array.prototype.indexOf)  Array.prototype.indexOf = (function(Object, max, min){\n    \"use strict\";\n    return function indexOf(member, fromIndex) {\n      if(this===null||this===undefined)throw TypeError(\"Array.prototype.indexOf called on null or undefined\");\n      \n      var that = Object(this), Len = that.length >>> 0, i = min(fromIndex | 0, Len);\n      if (i < 0) i = max(0, Len+i); else if (i >= Len) return -1;\n      \n      if(member===void 0){ for(; i !== Len; ++i) if(that[i]===void 0 && i in that) return i; // undefined\n      }else if(member !== member){   for(; i !== Len; ++i) if(that[i] !== that[i]) return i; // NaN\n      }else                           for(; i !== Len; ++i) if(that[i] === member) return i; // all else\n  \n      return -1; // if the value was not found, then return -1\n    };\n  })(Object, Math.max, Math.min);","//http://tokenposts.blogspot.com/2012/04/javascript-objectkeys-browser.html\nif (!Object.keys) Object.keys = function(o) {\n    if (o !== Object(o))\n      throw new TypeError('Object.keys called on a non-object');\n    var k=[],p;\n    for (p in o) if (Object.prototype.hasOwnProperty.call(o,p)) k.push(p);\n    return k;\n  }","\"use strict\";\n/**\n * @fileOverview Modded (compatibility, recursion depth) version of: https://stackoverflow.com/questions/19098797/fastest-way-to-flatten-un-flatten-nested-json-objectss\n * @version ${project.version}\n * @see {@link https://stackoverflow.com/questions/19098797/fastest-way-to-flatten-un-flatten-nested-json-objectss|stackoverflow flatten nested json objects}\n */\nvar module = module || {}; // Fallback for vanilla js without modules\n\n/**\n * internal_object_tools. Not meant to be used outside this repository.\n * @default {}\n */\nvar internal_object_tools = module.exports={}; // Export module for npm...\n\n/**\n * @typedef {Object} NameValuePair\n * @property {string} name - point separated names of the flattened main and sub properties, e.g. \"responses[2].hits.hits[4]._source.name\".\n * @property {string} value - value of the property\n */\n\n/**\n * @param {object} data hierarchical object that may consist fo fields, subfields and arrays.\n * @param {number} maxRecursionDepth\n * @returns {NameValuePair[]} array of property name and value pairs\n */\ninternal_object_tools.flattenToArray = function (data, maxRecursionDepth) {\n  var result = [];\n  if (typeof maxRecursionDepth !== \"number\" || maxRecursionDepth < 1) {\n    maxRecursionDepth = 20;\n  }\n  function recurse(cur, prop, depth) {\n    if (depth > maxRecursionDepth || typeof cur === \"function\") {\n      return;\n    }\n    if (Object(cur) !== cur) {\n      result.push({ name: prop, value: cur });\n    } else if (Array.isArray(cur)) {\n      var i;\n      var l = cur.length;\n      for (i = 0; i < l; i += 1) {\n        recurse(cur[i], prop + \"[\" + i + \"]\", depth + 1);\n      }\n      if (l === 0) {\n        result[prop] = [];\n        result.push({ name: prop, value: \"\" });\n      }\n    } else {\n      var isEmpty = true;\n      var p;\n      for (p in cur) {\n        isEmpty = false;\n        recurse(cur[p], prop ? prop + \".\" + p : p, depth + 1);\n      }\n      if (isEmpty && prop) {\n        result.push({ name: prop, value: \"\" });\n      }\n    }\n  }\n  recurse(data, \"\", 0);\n  return result;\n};\n","/**\n * @file Provides a simple template resolver, that replaces variables in double curly brackets with the values of a given object.\n * @version {@link https://github.com/JohT/data-restructor-js/releases/latest latest version}\n * @author JohT\n * @version ${project.version}\n */\n\"use strict\";\nvar module = module || {}; // Fallback for vanilla js without modules\n\n/**\n * Provides a simple template resolver, that replaces variables in double curly brackets with the values of a given object.\n * @module template_resolver\n */\nvar template_resolver = (module.exports = {}); // Export module for npm...\n\nvar internal_object_tools = internal_object_tools || require(\"../../lib/js/flattenToArray\"); // supports vanilla js & npm\n\n/**\n * Resolver. Is used inside this repository. It could also be used outside.\n */\ntemplate_resolver.Resolver = (function () {\n  var removeArrayBracketsRegEx = new RegExp(\"\\\\[\\\\d+\\\\]\", \"gi\");\n\n  /**\n   * Constructor function and container for everything, that needs to exist per instance.\n   * @constructs Resolver\n   */\n  function Resolver(sourceDataObject) {\n    this.sourceDataObject = sourceDataObject;\n    /**\n     * Resolves the given template.\n     *\n     * The template may contain variables in double curly brackets.\n     * Supported variables are all properties of this object, e.g. \"{{fieldName}}\", \"{{displayName}}\", \"{{value}}\".\n     * Since this object may also contains (described) groups of sub objects, they can also be used, e.g. \"{{summaries[0].value}}\"\n     * Parts of the index can be inserted by using e.g. \"{{index[1]}}\".\n     *\n     * @param {string} template\n     * @returns {string} resolved template\n     */\n    this.resolveTemplate = function (template) {\n      return this.replaceResolvableFields(template, addFieldsPerGroup(this.resolvableFieldsOfAll(this.sourceDataObject)));\n    };\n    /**\n     * Returns a map like object, that contains all resolvable fields and their values as properties.\n     * This function takes a variable count of input parameters,\n     * each containing an object that contains resolvable fields to extract from.\n     *\n     * The recursion depth is limited to 3, so that an object,\n     * that contains an object can contain another object (but not further).\n     *\n     * Properties beginning with an underscore in their name will be filtered out, since they are considered as internal fields.\n     *\n     * @param {...object} varArgs variable count of parameters. Each parameter contains an object that fields should be resolvable for variables.\n     * @returns {object} object with resolvable field names and their values.\n     */\n    this.resolvableFieldsOfAll = function () {\n      var map = {};\n      var ignoreInternalFields = function (propertyName) {\n        return propertyName.indexOf(\"_\") !== 0 && propertyName.indexOf(\"._\") < 0;\n      };\n      var index;\n      for (index = 0; index < arguments.length; index += 1) {\n        addToFilteredMapObject(internal_object_tools.flattenToArray(arguments[index], 3), map, ignoreInternalFields);\n      }\n      return map;\n    };\n    /**\n     * Replaces all variables in double curly brackets, e.g. {{property}},\n     * with the value of that property from the resolvableProperties.\n     *\n     * Supported property types: string, number, boolean\n     * @param {string} stringContainingVariables\n     * @param {object[]} resolvableFields (name=value)\n     */\n    this.replaceResolvableFields = function (stringContainingVariables, resolvableFields) {\n      var replaced = stringContainingVariables;\n      var propertyNames = Object.keys(resolvableFields);\n      var propertyIndex = 0;\n      var propertyName = \"\";\n      var propertyValue = \"\";\n      for (propertyIndex = 0; propertyIndex < propertyNames.length; propertyIndex += 1) {\n        propertyName = propertyNames[propertyIndex];\n        propertyValue = resolvableFields[propertyName];\n        replaced = replaced.replace(\"{{\" + propertyName + \"}}\", propertyValue);\n      }\n      return replaced;\n    };\n  }\n\n  /**\n   * Adds the value of the \"fieldName\" property (including its group prefix) and its associated \"value\" property content.\n   * For example: detail[2].fieldName=\"name\", detail[2].value=\"Smith\" lead to the additional property detail.name=\"Smith\".\n   * @param {object} object with resolvable field names and their values.\n   * @returns {object} object with resolvable field names and their values.\n   */\n  function addFieldsPerGroup(map) {\n    var propertyNames = Object.keys(map);\n    var i, fullPropertyName, propertyInfo, propertyValue;\n    for (i = 0; i < propertyNames.length; i += 1) {\n      fullPropertyName = propertyNames[i];\n      propertyValue = map[fullPropertyName];\n      propertyInfo = getPropertyNameInfos(fullPropertyName);\n      // Supports fields that are defined by a property named \"fieldName\" (containing the name)\n      // and a property named \"value\" inside the same sub object (containing its value).\n      // Ignore custom fields that are named \"fieldName\"(propertyValue), since this would lead to an unpredictable behavior.\n      // TODO could make \"fieldName\" and \"value\" configurable\n      if (propertyInfo.name === \"fieldName\" && propertyValue !== \"fieldName\") {\n        map[propertyInfo.groupWithoutArrayIndices + propertyValue] = map[propertyInfo.group + \"value\"];\n      }\n    }\n    return map;\n  }\n\n  /**\n   * Infos about the full property name including the name of the group (followed by the separator) and the name of the property itself.\n   * @param {String} fullPropertyName\n   * @returns {Object} Contains \"group\" (empty or group name including trailing separator \".\"), \"groupWithoutArrayIndices\" and \"name\" (property name).\n   */\n  function getPropertyNameInfos(fullPropertyName) {\n    var positionOfRightMostSeparator = fullPropertyName.lastIndexOf(\".\");\n    var propertyName = fullPropertyName;\n    if (positionOfRightMostSeparator > 0) {\n      propertyName = fullPropertyName.substr(positionOfRightMostSeparator + 1);\n    }\n    var propertyGroup = \"\";\n    if (positionOfRightMostSeparator > 0) {\n      propertyGroup = fullPropertyName.substr(0, positionOfRightMostSeparator + 1); //includes the trailing \".\".\n    }\n    var propertyGroupWithoutArrayIndices = propertyGroup.replace(removeArrayBracketsRegEx, \"\");\n    return { group: propertyGroup, groupWithoutArrayIndices: propertyGroupWithoutArrayIndices, name: propertyName };\n  }\n\n  /**\n   * Collects all flattened name-value-pairs into one object using the property names as keys and their values as values (map-like).\n   * Example: `{name: \"accountNumber\", value: \"12345\"}` becomes `mapObject[\"accountNumber\"]=\"12345\"`.\n   *\n   * @param {NameValuePair[]} elements flattened array of name-value-pairs\n   * @param {object} mapObject container to collect the results. Needs to be created before e.g. using `{}`.\n   * @param {function} filterMatchesFunction takes the property name as string argument and returns true (include) or false (exclude).\n   */\n  function addToFilteredMapObject(elements, mapObject, filterMatchesFunction) {\n    var index, element;\n    for (index = 0; index < elements.length; index += 1) {\n      element = elements[index];\n      if (typeof filterMatchesFunction === \"function\" && filterMatchesFunction(element.name)) {\n        mapObject[element.name] = element.value;\n      }\n    }\n    return mapObject;\n  }\n\n  /**\n   * Public interface\n   * @scope template_resolver.Resolver\n   */\n  return Resolver;\n})();\n","/**\n * @file datarestructor transforms parsed JSON objects into a uniform data structure\n * @version {@link https://github.com/JohT/data-restructor-js/releases/latest latest version}\n * @author JohT\n */\n\n \"use strict\";\nvar module = module || {}; // Fallback for vanilla js without modules\n\n/**\n * datarestructor namespace and module declaration.\n * It contains all functions to convert an object (e.g. parsed JSON) into uniform enumerated list of described field entries.\n * \n * <b>Transformation steps:</b>\n * - JSON\n * - flatten\n * - mark and identify\n * - add array fields\n * - deduplicate \n * - group\n * - flatten again\n * @module datarestructor\n */\nvar datarestructor = module.exports={}; // Export module for npm...\n\nvar internal_object_tools = internal_object_tools || require(\"../../lib/js/flattenToArray\"); // supports vanilla js & npm\nvar template_resolver = template_resolver || require(\"../../src/js/templateResolver\"); // supports vanilla js & npm\n\n/**\n * Takes the full qualified original property name and extracts a simple name out of it.\n * \n * @global\n * @callback propertyNameFunction\n * @param {string} propertyName full qualified, point separated property name \n * @return {String} extracted, simple name\n */\n\n/**\n * Describes a selected part of the incoming data structure and defines, \n * how the data should be transformed.\n * \n * @global\n * @typedef {Object} PropertyStructureDescription\n * @property {string} type - \"\"(default). Some examples: \"summary\" for e.g. a list overview. \"detail\" e.g. when a summary is selected. \"filter\" e.g. for field/value pair results that can be selected as search parameters.\n * @property {string} category - name of the category. Default = \"\". Could contain a short domain name like \"product\" or \"vendor\".\n * @property {string} [abbreviation=\"\"] - one optional character, a symbol character or a short abbreviation of the category\n * @property {string} [image=\"\"] - one optional path to an image resource\n * @property {boolean} propertyPatternTemplateMode - \"false\"(default): property name needs to be equal to the pattern. \"true\" allows variables like \"{{fieldName}}\" inside the pattern.\n * @property {string} propertyPattern - property name pattern (without array indices) to match\n * @property {string} indexStartsWith - \"\"(default) matches all ids. String that needs to match the beginning of the id. E.g. \"1.\" will match id=\"1.3.4\" but not \"0.1.2\".\n * @property {propertyNameFunction} getDisplayNameForPropertyName - display name for the property. \"\"(default) last property name element with upper case first letter.\n * @property {propertyNameFunction} getFieldNameForPropertyName - field name for the property. \"\" (default) last property name element.\n * @property {string} groupName - name of the property, that contains grouped entries. Default=\"group\".\n * @property {string} groupPattern - Pattern that describes how to group entries. \"groupName\" defines the name of this group. A pattern may contain variables in double curly brackets {{variable}}.\n * @property {string} groupDestinationPattern - Pattern that describes where the group should be moved to. Default=\"\"=Group will not be moved. A pattern may contain variables in double curly brackets {{variable}}.\n * @property {string} groupDestinationName - (default=groupName) Name of the group when it had been moved to the destination.\n * @property {string} deduplicationPattern - Pattern to use to remove duplicate entries. A pattern may contain variables in double curly brackets {{variable}}.\n */\n\n/**\n * Builder for a {@link PropertyStructureDescription}.\n */\ndatarestructor.PropertyStructureDescriptionBuilder = (function () {\n  \"use strict\";\n\n  /**\n   * Constructor function and container for everything, that needs to exist per instance.\n   * @constructs PropertyStructureDescriptionBuilder\n   */\n  function PropertyStructureDescription() {\n    /**\n     * @type {PropertyStructureDescription}\n     */\n    this.description = {\n      type: \"\",\n      category: \"\",\n      abbreviation: \"\",\n      image: \"\",\n      propertyPatternTemplateMode: false,\n      propertyPattern: \"\",\n      indexStartsWith: \"\",\n      groupName: \"group\",\n      groupPattern: \"\",\n      groupDestinationPattern: \"\",\n      groupDestinationName: null,\n      deduplicationPattern: \"\",\n      getDisplayNameForPropertyName: null,\n      getFieldNameForPropertyName: null,\n      matchesPropertyName: null\n    };\n    /**\n     * Sets the type.\n     * \n     * Contains the type of the entry, for example: \n     * - \"summary\" for e.g. a list overview. \n     * - \"detail\" e.g. when a summary is selected. \n     * - \"filter\" e.g. for field/value pair results that can be selected as search parameters.\n     * \n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {PropertyStructureDescriptionBuilder}\n     * @example type(\"summary\")\n     */\n    this.type = function (value) {\n      this.description.type = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the category.\n     * \n     * Contains a short domain nam, for example: \n     * - \"product\" for products\n     * - \"vendor\" for vendors\n     * \n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {PropertyStructureDescriptionBuilder}\n     * @example category(\"Product\")\n     */\n    this.category = function (value) {\n      this.description.category = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the optional abbreviation.\n     * \n     * Contains a symbol character or a very short abbreviation of the category.\n     * - \"P\" for products\n     * - \"V\" for vendors\n     * \n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {PropertyStructureDescriptionBuilder}\n     * @example abbreviation(\"P\")\n     */\n    this.abbreviation = function (value) {\n      this.description.abbreviation = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the optional path to an image resource.\n     * \n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {PropertyStructureDescriptionBuilder}\n     * @example image(\"img/product.png\")\n     */\n    this.image = function (value) {\n      this.description.image = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Sets \"equal mode\" for the property pattern.\n     * \n     * \"propertyPattern\" need to match exactly if this mode is activated.\n     *  It clears propertyPatternTemplateMode which means \"equal\" mode.\n     * @function\n     * @returns {PropertyStructureDescriptionBuilder}\n     */\n    this.propertyPatternEqualMode = function () {\n      this.description.propertyPatternTemplateMode = false;\n      return this;\n    };\n    /**\n     * Sets \"template mode\" for the property pattern.\n     * \n     * \"propertyPattern\" can contain variables like {{fieldName}} and\n     * doesn't need to match the property name exactly. If the \"propertyPattern\"\n     * is shorter than the property name, it also matches when the property name\n     * starts with the \"propertyPattern\".\n     * \n     * @function\n     * @returns {PropertyStructureDescriptionBuilder}\n     */\n    this.propertyPatternTemplateMode = function () {\n      this.description.propertyPatternTemplateMode = true;\n      return this;\n    };\n    /**\n     * Sets the property name pattern. \n     * \n     * Contains single property names with sub types separated by \".\" without array indices.\n     * May contain variables in double curly brackets.\n     * \n     * Example: \n     * - responses.hits.hits._source.{{fieldName}}\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {PropertyStructureDescriptionBuilder}\n     * @example propertyPattern(\"responses.hits.hits._source.{{fieldName}}\")\n     */\n    this.propertyPattern = function (value) {\n      this.description.propertyPattern = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the optional beginning of the id that needs to match.\n     * Matches all indices if set to \"\" (or not called).\n     * \n     * For example:\n     * - \"1.\" will match id=\"1.3.4\" but not \"0.1.2\".\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {PropertyStructureDescriptionBuilder}\n     * @example indexStartsWith(\"1.\")\n     */\n    this.indexStartsWith = function (value) {\n      this.description.indexStartsWith = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Overrides the display name of the property.\n     * \n     * If it is not set or set to \"\" then it will be derived from the\n     * last part of original property name starting with an upper case character.\n     *  \n     * For example:\n     * - \"Product\"\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {PropertyStructureDescriptionBuilder}\n     * @example displayPropertyName(\"Product\")\n     */\n    this.displayPropertyName = function (value) {\n      this.description.getDisplayNameForPropertyName = createNameExtractFunction(value, this.description);\n      if (isSpecifiedString(value)) {\n        return this;\n      }\n      this.description.getDisplayNameForPropertyName = removeArrayValuePropertyPostfixFunction(\n        this.description.getDisplayNameForPropertyName\n      );\n      this.description.getDisplayNameForPropertyName = upperCaseFirstLetterForFunction(\n        this.description.getDisplayNameForPropertyName\n      );\n      return this;\n    };\n    /**\n     * Overrides the (technical) field name of the property.\n     * \n     * If it is not set or set to \"\" then it will be derived from the\n     * last part of original property name.\n     *  \n     * For example:\n     * - \"product\"\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {PropertyStructureDescriptionBuilder}\n     * @example fieldName(\"product\")\n     */\n    this.fieldName = function (value) {\n      this.description.getFieldNameForPropertyName = createNameExtractFunction(value, this.description);\n      return this;\n    };\n    /**\n     * Sets the name of the property, that contains grouped entries. \n     * \n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {PropertyStructureDescriptionBuilder}\n     * @example groupName(\"details\")\n     */\n    this.groupName = function (value) {\n      this.description.groupName = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the pattern that describes how to group entries. \n     * \n     * \"groupName\" defines the name of this group.\n     * A pattern may contain variables in double curly brackets {{variable}}.\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {PropertyStructureDescriptionBuilder}\n     * @example groupPattern(\"{{type}}-{{category}}\")\n     */\n    this.groupPattern = function (value) {\n      this.description.groupPattern = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the pattern that describes where the group should be moved to. \n     * \n     * Default=\"\"=Group will not be moved.\n     * A pattern may contain variables in double curly brackets {{variable}}.\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {PropertyStructureDescriptionBuilder}\n     * @example groupDestinationPattern(\"main-{{category}}\")\n     */\n    this.groupDestinationPattern = function (value) {\n      this.description.groupDestinationPattern = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Sets the name of the group when it had been moved to the destination.\n     * \n     * The default value is the groupName, which will be used when the value is not valid (null or empty)\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {PropertyStructureDescriptionBuilder}\n     * @example groupDestinationPattern(\"options\")\n     */\n    this.groupDestinationName = function (value) {\n      this.description.groupDestinationName = withDefault(value, this.description.groupName);\n      return this;\n    };\n    /**\n     * Sets the pattern to be used to remove duplicate entries. \n     * \n     * A pattern may contain variables in double curly brackets {{variable}}.\n     * A pattern may contain variables in double curly brackets {{variable}}.\n     * @function\n     * @param {String} [value=\"\"]\n     * @returns {PropertyStructureDescriptionBuilder}\n     * @example deduplicationPattern(\"{{category}}--{{type}}--{{index[0]}}--{{index[1]}}--{{fieldName}}\")\n     */\n    this.deduplicationPattern = function (value) {\n      this.description.deduplicationPattern = withDefault(value, \"\");\n      return this;\n    };\n    /**\n     * Finalizes the settings and builds the  PropertyStructureDescription.\n     * @function\n     * @returns {PropertyStructureDescription}\n     */\n    this.build = function () {\n      this.description.matchesPropertyName = createFunctionMatchesPropertyName(this.description);\n      if (this.description.getDisplayNameForPropertyName == null) {\n        this.displayPropertyName(\"\");\n      }\n      if (this.description.getFieldNameForPropertyName == null) {\n        this.fieldName(\"\");\n      }\n      if (this.description.groupDestinationName == null) {\n        this.groupDestinationName(\"\");\n      }\n      return this.description;\n    };\n  }\n\n  function createNameExtractFunction(value, description) {\n    if (isSpecifiedString(value)) {\n      return function () {\n        return value;\n      };\n    }\n    if (description.propertyPatternTemplateMode) {\n      var patternToMatch = description.propertyPattern; // closure (closed over) parameter\n      return extractNameUsingTemplatePattern(patternToMatch);\n    }\n    return extractNameUsingRightMostPropertyNameElement();\n  }\n\n  function createFunctionMatchesPropertyName(description) {\n    var propertyPatternToMatch = description.propertyPattern; // closure (closed over) parameter\n    if (!isSpecifiedString(propertyPatternToMatch)) {\n      return function () {\n        return false; // Without a propertyPattern, no property will match (deactivated mark/identify).\n      };\n    }\n    if (description.propertyPatternTemplateMode) {\n      return function (propertyNameWithoutArrayIndices) {\n        return templateModePatternRegexForPattern(propertyPatternToMatch).exec(propertyNameWithoutArrayIndices) != null;\n      };\n    }\n    return function (propertyNameWithoutArrayIndices) {\n      return propertyNameWithoutArrayIndices === propertyPatternToMatch;\n    };\n  }\n\n  function rightMostPropertyNameElement(propertyName) {\n    var regularExpression = new RegExp(\"(\\\\w+)$\", \"gi\");\n    var match = propertyName.match(regularExpression);\n    if (match != null) {\n      return match[0];\n    }\n    return propertyName;\n  }\n\n  function upperCaseFirstLetter(value) {\n    if (value.length > 1) {\n      return value.charAt(0).toUpperCase() + value.slice(1);\n    }\n    return value;\n  }\n\n  function upperCaseFirstLetterForFunction(nameExtractFunction) {\n    return function (propertyName) {\n      return upperCaseFirstLetter(nameExtractFunction(propertyName));\n    };\n  }\n\n  function removeArrayValuePropertyPostfixFunction(nameExtractFunction) {\n    return function (propertyName) {\n      var name = nameExtractFunction(propertyName);\n      name = name != null ? name : \"\";\n      return name.replace(\"_comma_separated_values\", \"\");\n    };\n  }\n\n  function extractNameUsingTemplatePattern(propertyPattern) {\n    return function (propertyName) {\n      var regex = templateModePatternRegexForPatternAndVariable(propertyPattern, \"{{fieldName}}\");\n      var match = regex.exec(propertyName);\n      if (match && match[1] != \"\") {\n        return match[1];\n      }\n      return rightMostPropertyNameElement(propertyName);\n    };\n  }\n\n  function extractNameUsingRightMostPropertyNameElement() {\n    return function (propertyName) {\n      return rightMostPropertyNameElement(propertyName);\n    };\n  }\n\n  function templateModePatternRegexForPattern(propertyPatternToUse) {\n    var placeholderInDoubleCurlyBracketsRegEx = new RegExp(\"\\\\\\\\\\\\{\\\\\\\\\\\\{[-\\\\w]+\\\\\\\\\\\\}\\\\\\\\\\\\}\", \"gi\");\n    return templateModePatternRegexForPatternAndVariable(propertyPatternToUse, placeholderInDoubleCurlyBracketsRegEx);\n  }\n\n  function templateModePatternRegexForPatternAndVariable(propertyPatternToUse, variablePattern) {\n    var pattern = escapeCharsForRegEx(propertyPatternToUse);\n    if (typeof variablePattern === \"string\") {\n      variablePattern = escapeCharsForRegEx(variablePattern);\n    }\n    pattern = pattern.replace(variablePattern, \"([-\\\\w]+)\");\n    pattern = \"^\" + pattern;\n    return new RegExp(pattern, \"i\");\n  }\n\n  function escapeCharsForRegEx(characters) {\n    var nonWordCharactersRegEx = new RegExp(\"([^-\\\\w])\", \"gi\");\n    return characters.replace(nonWordCharactersRegEx, \"\\\\$1\");\n  }\n\n  function withDefault(value, defaultValue) {\n    return isSpecifiedString(value) ? value : defaultValue;\n  }\n\n  function isSpecifiedString(value) {\n    return typeof value === \"string\" && value != null && value != \"\";\n  }\n\n  return PropertyStructureDescription;\n})();\n\n/**\n * @global\n * @typedef {Object} DescribedEntry\n * @property {string} category - category of the result from the PropertyStructureDescription using a short name or e.g. a symbol character\n * @property {string} type - type of the result from PropertyStructureDescription\n * @property {string} [abbreviation=\"\"] - one optional character, a symbol character or a short abbreviation of the category\n * @property {string} [image=\"\"] - one optional path to an image resource\n * @property {string} index - array of numbers containing the split index. Example: \"responses[2].hits.hits[4]._source.name\" leads to an array with the two elements: [2,4]\n * @property {string} displayName - display name extracted from the point separated hierarchical property name, e.g. \"Name\"\n * @property {string} fieldName - field name extracted from the point separated hierarchical property name, e.g. \"name\"\n * @property {string} value - content of the field\n * @property {string} resolveTemplate - function, that replaces propertyNames in double curly brackets with the values in this object.\n * @property {string} publicFieldsJson - function, that converts the public fields including grouped sub structures to JSON.\n * @property {boolean} _isMatchingIndex - true, when _identifier.index matches the described \"indexStartsWith\"\n * @property {Object} _identifier - internal structure for identifier. Avoid using it outside since it may change.\n * @property {string} _identifier.index - array indices in hierarchical order separated by points, e.g. \"0.0\"\n * @property {string} _identifier.value - the (single) value of the \"flattened\" property, e.g. \"Smith\"\n * @property {string} _identifier.propertyNameWithArrayIndices - the \"original\" flattened property name in hierarchical order separated by points, e.g. \"responses[0].hits.hits[0]._source.name\"\n * @property {string} _identifier.propertyNameWithoutArrayIndices - same as propertyNamesWithArrayIndices but without array indices, e.g. \"responses.hits.hits._source.name\"\n * @property {string} _identifier.groupId - Contains the resolved groupPattern from the PropertyStructureDescription. Entries with the same id will be grouped into the \"groupName\" of the PropertyStructureDescription.\n * @property {string} _identifier.groupDestinationId - Contains the resolved groupDestinationPattern from the PropertyStructureDescription. Entries with this id will be moved to the given destination group.\n * @property {string} _identifier.deduplicationId - Contains the resolved deduplicationPattern from the PropertyStructureDescription. Entries with the same id will be considered to be a duplicate and hence removed.\n * @property {Object} _description - PropertyStructureDescription for internal use. Avoid using it outside since it may change.\n */\n\n// @ property {DescribedEntry[]} getGroupEntries -  function, that returns the entries of the given group or an empty array, it the group doesn't exist. \n// @ property {String} addGroupEntry - function, that adds an entry to the given group. If the group does not exist, it will be created.\n\n/**\n * Returns a field value of the given {@link DescribedEntry}.\n * \n * @global\n * @callback stringFieldOfDescribedEntryFunction\n * @param {DescribedEntry} entry described entry that contains the field that should be returned\n * @returns {String} field value \n */\n\n/**\n * Creates a {@link DescribedEntry}.\n */\ndatarestructor.DescribedEntryCreator = (function () {\n  \"use strict\";\n\n  var removeArrayBracketsRegEx = new RegExp(\"\\\\[\\\\d+\\\\]\", \"gi\");\n\n  /**\n   * Constructor function and container for everything, that needs to exist per instance.\n   * @constructs DescribedEntry\n   * @type {DescribedEntry}\n   */\n  function DescribedEntry(entry, description) {\n    var indices = indicesOf(entry.name);\n    var propertyNameWithoutArrayIndices = entry.name.replace(removeArrayBracketsRegEx, \"\");\n    var templateResolver = new template_resolver.Resolver(this);\n\n    this.category = description.category;\n    this.type = description.type;\n    this.abbreviation = description.abbreviation;\n    this.image = description.image;\n    /**\n     * Array of numbers containing the split index. \n     * Example: \"responses[2].hits.hits[4]._source.name\" leads to an array with two elements: [2,4]\n     * This is the public version of the internal variable _identifier.index, which contains in contrast all index elements in one point separated string (e.g. \"2.4\").\n     * @type {number[]}\n     */\n    this.index = indices.numberArray;\n    this.displayName = description.getDisplayNameForPropertyName(propertyNameWithoutArrayIndices);\n    this.fieldName = description.getFieldNameForPropertyName(propertyNameWithoutArrayIndices);\n    this.value = entry.value;\n    this._isMatchingIndex = indices.pointDelimited.indexOf(description.indexStartsWith) == 0;\n    this._description = description;\n\n    this._identifier = {\n      index: indices.pointDelimited,\n      propertyNameWithArrayIndices: entry.name,\n      propertyNameWithoutArrayIndices: propertyNameWithoutArrayIndices,\n      groupId: \"\",\n      groupDestinationId: \"\",\n      deduplicationId: \"\"\n    };\n    this._identifier.groupId = templateResolver.replaceResolvableFields(\n      description.groupPattern,\n      templateResolver.resolvableFieldsOfAll(this, this._description, this._identifier)\n    );\n    this._identifier.groupDestinationId = templateResolver.replaceResolvableFields(\n      description.groupDestinationPattern,\n      templateResolver.resolvableFieldsOfAll(this, this._description, this._identifier)\n    );\n    this._identifier.deduplicationId = templateResolver.replaceResolvableFields(\n      description.deduplicationPattern,\n      templateResolver.resolvableFieldsOfAll(this, this._description, this._identifier)\n    );\n    /**\n     * Resolves the given template.\n     * \n     * The template may contain variables in double curly brackets.\n     * Supported variables are all properties of this object, e.g. \"{{fieldName}}\", \"{{displayName}}\", \"{{value}}\".\n     * Since this object may also contains (described) groups of sub objects, they can also be used, e.g. \"{{summaries[0].value}}\" \n     * Parts of the index can be inserted by using e.g. \"{{index[1]}}\".\n     * \n     * @param {string} template\n     * @returns {string} resolved template\n     */\n    this.resolveTemplate = function (template) {\n      return new template_resolver.Resolver(this).resolveTemplate(template);\n    };\n\n    /**\n     * Returns JSON containing all the public fields\n     * @param space — Adds indentation, white space, and line break characters to the return-value JSON text to make it easier to read.\n     */\n    this.publicFieldsJson = function (space) {\n      var propertyNames = propertyNamesWithoutObjectsAndFunctions(this);\n      var prettyPrintJsonSpace = typeof space === \"number\" ? space : 0;\n      return JSON.stringify(this, replacerRetainsOnlyDefinedPublicFields(propertyNames), prettyPrintJsonSpace);\n    };\n\n    /**\n     * Returns the entries of the given group or an empty array, it the group doesn't exist. \n     * @param {String} groupName \n     * @returns {DescribedEntry[]} entries of the group\n     */\n    this.getGroupEntries = function (groupName) {\n      return this[groupName]? this[groupName] : [];\n    };\n\n    /**\n     * Adds an entry to the given group. If the group does not exist, it will be created.\n     * @param {String} groupName \n     * @param {DescribedEntry} describedEntry \n     */\n    this.addGroupEntry = function(groupName, describedEntry) {\n      if (!this[groupName]) {\n        this[groupName] = [];\n      }\n      this[groupName].push(describedEntry);\n    }\n  }\n\n  /**\n   * @typedef {Object} ExtractedIndices\n   * @property {string} pointDelimited - bracket indices separated by points\n   * @property {number[]} numberArray as array of numbers\n   */\n\n  /**\n   * Returns \"1.12.123\" and [1,12,123] for \"results[1].hits.hits[12].aggregates[123]\".\n   *\n   * @param {String} fullPropertyName\n   * @return {ExtractedIndices} extracted indices in different representations\n   */\n  function indicesOf(fullPropertyName) {\n    var arrayBracketsRegEx = new RegExp(\"\\\\[(\\\\d+)\\\\]\", \"gi\");\n    return indicesOfWithRegex(fullPropertyName, arrayBracketsRegEx);\n  }\n\n  /**\n   * Returns \"1.12.123\" and [1,12,123] for \"results[1].hits.hits[12].aggregates[123]\".\n   *\n   * @param {string} fullPropertyName\n   * @param {RegExp} regexWithOneNumberGroup\n   * @return {ExtractedIndices} extracted indices in different representations\n   */\n  function indicesOfWithRegex(fullPropertyName, regexWithOneNumberGroup) {\n    var pointDelimited = \"\";\n    var numberArray = [];\n    var match;\n    do {\n      match = regexWithOneNumberGroup.exec(fullPropertyName);\n      if (match) {\n        if (pointDelimited.length > 0) {\n          pointDelimited += \".\";\n        }\n        pointDelimited += match[1];\n        numberArray.push(parseInt(match[1]));\n      }\n    } while (match);\n    return { pointDelimited: pointDelimited, numberArray: numberArray };\n  }\n\n  /**\n   * Returns an array of property names of the given object without properties of type \"object\".\n   */\n  function propertyNamesWithoutObjectsAndFunctions(obj) {\n    var result = [];\n    var propertyIndex;\n    var propertyName;\n    var propertyNames = Object.keys(obj);\n    for (propertyIndex = 0; propertyIndex < propertyNames.length; propertyIndex += 1) {\n      propertyName = propertyNames[propertyIndex];\n      if (typeof obj[propertyName] !== \"object\" && typeof obj[propertyName] !== \"function\") {\n        result.push(propertyName);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Returns a function, that takes two arguments and is therefore applicable to be used as \"replacer\" parameter for JSON.stringify.\n   * It only retains the given property names and removes everything else except for embedded \"sub\" objects\n   * with the same structure (and only one recursive level). These sub objects will be cloned to get rid of the circular\n   * structure that would lead to the error message \"TypeError: Converting circular structure to JSON\".\n   * Internal properties containing objects but beginning with an underscore in their name will also be removed.\n   *\n   * @param key name of the property to be converted to JSON or empty for the whole object.\n   * @param value value of the property to be converted to JSON.\n   * @returns function that is applicable to be used as \"replacer\" parameter for JSON.stringify.\n   */\n  function replacerRetainsOnlyDefinedPublicFields(propertyNames) {\n    return function (key, value) {\n      return onlyDefinedPublicFields(key, value, propertyNames);\n    };\n  }\n  /**\n   * This function takes two arguments and is therefore applicable to be used as \"replacer\" parameter for JSON.stringify.\n   * It removes internal properties beginning with an underscore in their name\n   * and creates new objects for grouped structures (only one recursion level) to get rid of the circular structure\n   * that would lead to the error message \"TypeError: Converting circular structure to JSON\".\n   *\n   * @param {string} key name of the property to be converted to JSON or empty for the whole object.\n   * @param {string} value value of the property to be converted to JSON.\n   * @param {string[]} propertyNames array of strings containing only the public fields that will be converted to JSON.\n   */\n  function onlyDefinedPublicFields(key, value, propertyNames) {\n    if (typeof value !== \"object\" && propertyNames.indexOf(key) < 0 && key != \"\") {\n      return undefined; // Remove all properties that are not contained in the given list.\n    }\n    if ((typeof key === \"string\") && (key.indexOf(\"_\") == 0)) {\n      return undefined; //Remove all properties with a name beginning with an underscore (internal fields).\n    }\n    if (Array.isArray(value)) {\n      var index, propertyIndex;\n      var entry, clonedEntry;\n      var clonedArray = [];\n      for (index = 0; index < value.length; index += 1) {\n        entry = value[index];\n        clonedEntry = {};\n        for (propertyIndex = 0; propertyIndex < propertyNames.length; propertyIndex += 1) {\n          clonedEntry[propertyNames[propertyIndex]] = entry[propertyNames[propertyIndex]];\n        }\n        clonedArray.push(clonedEntry);\n      }\n      return clonedArray;\n    }\n    return value;\n  }\n\n  return DescribedEntry;\n})();\n\n/**\n * Main class for the data transformation.\n */\ndatarestructor.Transform = (function () {\n  \"use strict\";\n\n  /**\n   * Constructor function and container for anything, that needs to exist per instance.\n   * @param {PropertyStructureDescription[]} descriptions\n   * @constructs Transform\n   */\n  function Transform(descriptions) {\n    /**\n     * Descriptions of the input data that define the behaviour of the transformation.\n     * @type {DescribedEntry[]}\n     */\n    this.descriptions = descriptions;\n    /**\n     * DebugMode enables detailed logging for troubleshooting.\n     * @type {boolean}\n     */\n    this.debugMode = false;\n    /**\n     * Enables debug mode. Logs additional informations.\n     * @returns Transform\n     */\n    this.enableDebugMode = function () {\n      this.debugMode = true;\n      return this;\n    };\n    /**\n     * \"Assembly line\", that takes the (pared JSON) data and processes it using all given descriptions in their given order.\n     * @param {object} data - parsed JSON data or any other data object\n     * @returns {DescribedEntry[]}\n     * @example \n     * var allDescriptions = [];\n     * allDescriptions.push(summariesDescription());\n     * allDescriptions.push(detailsDescription());\n     * var result = new datarestructor.Transform(allDescriptions).processJson(jsonData);\n     */\n    this.processJson = function (data) {\n      return processJsonUsingDescriptions(data, this.descriptions, this.debugMode);\n    };\n  }\n\n  /**\n   * \"Assembly line\", that takes the jsonData and processes it using all given descriptions in their given order.\n   * @param {object} jsonData - parsed JSON data or any other data object\n   * @param {PropertyStructureDescription[]} descriptions - already grouped entries\n   * @param {boolean} debugMode - false=default=off, true=write additional logs for detailed debugging\n   * @returns {DescribedEntry[]}\n   */\n  function processJsonUsingDescriptions(jsonData, descriptions, debugMode) {\n    // \"Flatten\" the hierarchical input json to an array of property names (point separated \"folders\") and values.\n    var processedData = internal_object_tools.flattenToArray(jsonData);\n    // Fill in properties ending with the name \"_comma_separated_values\" for array values to make it easier to display them.\n    processedData = fillInArrayValues(processedData);\n\n    if ((typeof debugMode === \"boolean\") && debugMode) {\n      console.log(\"flattened data with array values:\");\n      console.log(processedData);\n    }\n\n    // Mark, identify and harmonize the flattened data by applying one description after another in their given order.\n    var describedData = [];\n    var descriptionIndex, description, dataWithDescription;\n    for (descriptionIndex = 0; descriptionIndex < descriptions.length; descriptionIndex+=1) {\n      description = descriptions[descriptionIndex];\n      // Filter all entries that match the current description and enrich them with it\n      dataWithDescription = extractEntriesByDescription(processedData, description);\n      // Remove duplicate entries where a deduplicationPattern is described\n      describedData = deduplicateFlattenedData(describedData, dataWithDescription);\n    }\n    processedData = describedData;\n\n    // Group entries where a groupPattern is described\n    processedData = groupFlattenedData(processedData);\n\n    // Move group entries where a groupDestinationPattern is described\n    processedData = applyGroupDestinationPattern(processedData);\n\n    // Turns the grouped object back into an array of DescribedEntry-Objects\n    return propertiesAsArray(processedData);\n  }\n\n  /**\n   * Takes two arrays of objects, e.g. [{id: B, value: 2},{id: C, value: 3}]\n   * and [{id: A, value: 1},{id: B, value: 4}] and merges them into one:\n   * [{id: C, value: 3},{id: A, value: 1},{id: B, value: 4}]\n   *\n   * Entries with the same id (\"duplicates\") will be overwritten.\n   * Only the last element with the same id remains. The order is\n   * determined by the order of the array elements, whereas the first\n   * array comes before the second one. This means, that entries with the\n   * same id in the second array overwrite entries in the first array,\n   * and entries that occur later in the array overwrite earlier ones,\n   * if they have the same id.\n   *\n   * The id is extracted from every element using the given function.\n   *\n   * @param {DescribedEntry[]} entries\n   * @param {DescribedEntry[]} entriesToMerge\n   * @param {stringFieldOfDescribedEntryFunction} idOfElementFunction returns the id of an DescribedEntry\n   */\n  function mergeFlattenedData(entries, entriesToMerge, idOfElementFunction) {\n    var entriesToMergeById = asIdBasedObject(entriesToMerge, idOfElementFunction);\n    var merged = [];\n    var index, entry, id;\n    for (index = 0; index < entries.length; index+=1) {\n      entry = entries[index];\n      id = idOfElementFunction(entry);\n      if (id == null || id === \"\" || entriesToMergeById[id] == null) {\n        merged.push(entry);\n      }\n    }\n    for (index = 0; index < entriesToMerge.length; index+=1) {\n      entry = entriesToMerge[index];\n      merged.push(entry);\n    }\n    return merged;\n  }\n\n  /**\n   * Takes two arrays of objects, e.g. [{id: B, value: 2},{id: C, value: 3}]\n   * and [{id: A, value: 1},{id: B, value: 4}] and merges them into one:\n   * [{id: C, value: 3},{id: A, value: 1},{id: B, value: 4}]\n   *\n   * Entries with the same id (\"duplicates\") will be overwritten.\n   * Only the last element with the same id remains. The order is\n   * determined by the order of the array elements, whereas the first\n   * array comes before the second one. This means, that entries with the\n   * same id in the second array overwrite entries in the first array,\n   * and entries occurring later in the array overwrite earlier ones,\n   * if they have the same id.\n   *\n   * \"entriesToMerge\" will be returned directly, if \"entries\" is null or empty.\n   *\n   * The id is extracted from every element using their deduplication pattern (if available).\n   *\n   * @param {DescribedEntry[]} entries\n   * @param {DescribedEntry[]} entriesToMerge\n   * @param {stringFieldOfDescribedEntryFunction} idOfElementFunction returns the id of an DescribedEntry\n   * @see mergeFlattenedData\n   */\n  function deduplicateFlattenedData(entries, entriesToMerge) {\n    if (entries == null || entries.length == 0) {\n      return entriesToMerge;\n    }\n    var idOfElementFunction = function (entry) {\n      return entry._identifier.deduplicationId;\n    };\n    return mergeFlattenedData(entries, entriesToMerge, idOfElementFunction);\n  }\n\n  /**\n   * Converts the given elements to an object, that provides these\n   * entries by their id. For example, [{id: A, value: 1}] becomes\n   * result['A'] = 1.\n   * @param {DescribedEntry[]} elements of DescribedEntry elements\n   * @param {stringFieldOfDescribedEntryFunction} idOfElementFunction returns the id of an DescribedEntry\n   * @return {DescribedEntry[] entries indexed by id\n   */\n  function asIdBasedObject(elements, idOfElementFunction) {\n    var idIndexedObject = new Object();\n    for (var index = 0; index < elements.length; index++) {\n      var element = elements[index];\n      idIndexedObject[idOfElementFunction(element)] = element;\n    }\n    return idIndexedObject;\n  }\n\n  /**\n   * Converts the given elements into an object, that provides these\n   * entries by their id (determined by the entry's groupPattern).\n   * For example, [{id: A, value: 1}] becomes result['A'] = 1.\n   *\n   * Furthermore, this function creates a group property (determined by the entry's groupName)\n   * and collects all related elements (specified by their group pattern) in it.\n   *\n   * @param {DescribedEntry[]} elements of DescribedEntry elements\n   * @return {DescribedEntry[] entries indexed by id\n   */\n  function groupFlattenedData(flattenedData) {\n    return groupById(\n      flattenedData,\n      function (entry) {\n        return entry._identifier.groupId;\n      },\n      function (entry) {\n        return entry._description.groupName;\n      }\n    );\n  }\n\n  /**\n   * Converts the given elements into an object, that provides these\n   * entries by their id. For example, [{id: A, value: 1}] becomes\n   * result['A'] = 1. Furthermore, this function creates a group property (with the name )\n   * and collects all related elements (specified by their group pattern) in it.\n   *\n   * @param {DescribedEntry[]} elements of DescribedEntry elements\n   * @param {stringFieldOfDescribedEntryFunction} groupNameOfElementFunction function, that returns the name of the group property that will be created inside the \"main\" element.\n   * @param {stringFieldOfDescribedEntryFunction} groupIdOfElementFunction returns the group id of an DescribedEntry\n   * @return {DescribedEntry[] entries indexed by id\n   */\n  function groupById(elements, groupIdOfElementFunction, groupNameOfElementFunction) {\n    var groupedResult = new Object();\n    for (var index = 0; index < elements.length; index++) {\n      var element = elements[index];\n      var groupId = groupIdOfElementFunction(element);\n      if (groupId === \"\") {\n        continue;\n      }\n      var groupName = groupNameOfElementFunction(element);\n      if (groupName == null || groupName === \"\") {\n        continue;\n      }\n      if (!groupedResult[groupId]) {\n        groupedResult[groupId] = element; \n      }\n      groupedResult[groupId].addGroupEntry(groupName, element);\n    }\n    return groupedResult;\n  }\n\n  /**\n   * Extracts entries out of \"flattened\" JSON data and provides an array of objects.\n   * @param {Object[]} flattenedData - flattened json from search query result\n   * @param {string} flattenedData[].name - name of the property in hierarchical order separated by points\n   * @param {string} flattenedData[].value - value of the property as string\n   * @param {PropertyStructureDescription} - description of structure of the entries that should be extracted\n   * @return {DescribedEntry[]}\n   */\n  function extractEntriesByDescription(flattenedData, description) {\n    var removeArrayBracketsRegEx = new RegExp(\"\\\\[\\\\d+\\\\]\", \"gi\");\n    var filtered = [];\n\n    flattenedData.filter(function (entry) {\n      var propertyNameWithoutArrayIndices = entry.name.replace(removeArrayBracketsRegEx, \"\");\n      if (description.matchesPropertyName(propertyNameWithoutArrayIndices)) {\n        var describedEntry = new datarestructor.DescribedEntryCreator(entry, description);\n        if (describedEntry._isMatchingIndex) {\n          filtered.push(describedEntry);\n        }\n      }\n    });\n    return filtered;\n  }\n\n  /**\n   * Takes already grouped {@link DescribedEntry} objects and\n   * uses their \"_identifier.groupDestinationId\" (if exists)\n   * to move groups to the given destination.\n   *\n   * This is useful, if separately described groups like \"summary\" and \"detail\" should be put together,\n   * so that every summery contains a group with the regarding details.\n   *\n   * @param {DescribedEntry[]} groupedObject - already grouped entries\n   * @return {DescribedEntry[]}\n   */\n  function applyGroupDestinationPattern(groupedObject) {\n    var keys = Object.keys(groupedObject);\n    var keysToDelete = [];\n    for (var index = 0; index < keys.length; index++) {\n      var key = keys[index];\n      var entry = groupedObject[key];\n      if (entry._description.groupDestinationPattern != \"\") {\n        var destinationKey = entry._identifier.groupDestinationId;\n        if (groupedObject[destinationKey] != null) {\n          var newGroup = entry[entry._description.groupName];\n          var existingGroup = groupedObject[destinationKey][entry._description.groupDestinationName]; //join if exists\n          var updatedGroup = existingGroup != null ? existingGroup.concat(newGroup) : newGroup;\n          groupedObject[destinationKey][entry._description.groupDestinationName] = updatedGroup;\n          keysToDelete.push(key);\n        }\n      }\n    }\n    // delete all moved entries that had been collected by their key\n    for (index = 0; index < keysToDelete.length; index+=1) {\n      var keyToDelete = keysToDelete[index];\n      delete groupedObject[keyToDelete];\n    }\n    return groupedObject;\n  }\n\n  /**\n   * Fills in extra \"_comma_separated_values\" properties into the flattened data\n   * for properties that end with an array. E.g. response.hits.hits.tags[0]=\"active\" and response.hits.hits.tags[0]=\"ready\"\n   * will lead to the extra element \"response.hits.hits.tags_comma_separated_values=\"active, ready\".\n   *\n   * @return flattened data with filled in \"_comma_separated_values\" properties\n   */\n  function fillInArrayValues(flattenedData) {\n    var trailingArrayIndexRegEx = new RegExp(\"\\\\[\\\\d+\\\\]$\", \"gi\");\n    var result = [];\n    var lastArrayProperty = \"\";\n    var lastArrayPropertyValue = \"\";\n\n    flattenedData.filter(function (entry) {\n      if (!entry.name.match(trailingArrayIndexRegEx)) {\n        if (lastArrayProperty !== \"\") {\n          result.push({ name: lastArrayProperty + \"_comma_separated_values\", value: lastArrayPropertyValue });\n          lastArrayProperty = \"\";\n        }\n        result.push(entry);\n        return;\n      }\n      var propertyNameWithoutTrailingArrayIndex = entry.name.replace(trailingArrayIndexRegEx, \"\");\n      if (lastArrayProperty === propertyNameWithoutTrailingArrayIndex) {\n        lastArrayPropertyValue += \", \" + entry.value;\n      } else {\n        if (lastArrayProperty !== \"\") {\n          result.push({ name: lastArrayProperty + \"_comma_separated_values\", value: lastArrayPropertyValue });\n          lastArrayProperty = \"\";\n        }\n        lastArrayProperty = propertyNameWithoutTrailingArrayIndex;\n        lastArrayPropertyValue = entry.value;\n      }\n      result.push(entry);\n    });\n    return result;\n  }\n\n  function propertiesAsArray(groupedData) {\n    var result = [];\n    var propertyNames = Object.keys(groupedData);\n    for (var propertyIndex = 0; propertyIndex < propertyNames.length; propertyIndex++) {\n      var propertyName = propertyNames[propertyIndex];\n      var propertyValue = groupedData[propertyName];\n      result.push(propertyValue);\n    }\n    return result;\n  }\n\n  return Transform;\n})();\n\n/**\n * Main fassade for the data restructor as static function(s).\n * \n * @example \n * var allDescriptions = [];\n * allDescriptions.push(summariesDescription());\n * allDescriptions.push(detailsDescription());\n * var result = datarestructor.Restructor.processJsonUsingDescriptions(jsonData, allDescriptions);\n * @namespace\n */\ndatarestructor.Restructor = {};\n/**\n * Static fassade function for the \"Assembly line\", that takes the jsonData and processes it using all given descriptions in their given order.\n * @param {object} jsonData - parsed JSON data or any other data object\n * @param {PropertyStructureDescription[]} descriptions - already grouped entries\n * @param {boolean} debugMode - false=default=off, true=write additional logs for detailed debugging\n * @returns {DescribedEntry[]}\n */\ndatarestructor.Restructor.processJsonUsingDescriptions = function(jsonData, descriptions, debugMode) {\n  var restructor = new datarestructor.Transform(descriptions);\n  if (debugMode) {\n    restructor.enableDebugMode();\n  }\n  return restructor.processJson(jsonData);\n};","\"use strict\";\nrequire(\"../../lib/js/polyfills/isArrayPolyfill.js\");\nrequire(\"../../lib/js/polyfills/arrayFilterPolyfill.js\");\nrequire(\"../../lib/js/polyfills/indexOfPolyfill.js\");\nrequire(\"../../lib/js/polyfills/objectKeysPolyfill.js\");\nvar datarestructor = require(\"../../src/js/datarestructor.js\");\nmodule.exports= {datarestructor};\n","var OVERLAY_ID = '__parcel__error__overlay__';\n\nvar OldModule = module.bundle.Module;\n\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData,\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n\n  module.bundle.hotData = null;\n}\n\nmodule.bundle.Module = Module;\nvar checkedAssets, assetsToAccept;\n\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = process.env.HMR_HOSTNAME || location.hostname;\n  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';\n  var ws = new WebSocket(protocol + '://' + hostname + ':' + process.env.HMR_PORT + '/');\n  ws.onmessage = function(event) {\n    checkedAssets = {};\n    assetsToAccept = [];\n\n    var data = JSON.parse(event.data);\n\n    if (data.type === 'update') {\n      var handled = false;\n      data.assets.forEach(function(asset) {\n        if (!asset.isNew) {\n          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);\n          if (didAccept) {\n            handled = true;\n          }\n        }\n      });\n\n      // Enable HMR for CSS by default.\n      handled = handled || data.assets.every(function(asset) {\n        return asset.type === 'css' && asset.generated.js;\n      });\n\n      if (handled) {\n        console.clear();\n\n        data.assets.forEach(function (asset) {\n          hmrApply(global.parcelRequire, asset);\n        });\n\n        assetsToAccept.forEach(function (v) {\n          hmrAcceptRun(v[0], v[1]);\n        });\n      } else if (location.reload) { // `location` global exists in a web worker context but lacks `.reload()` function.\n        location.reload();\n      }\n    }\n\n    if (data.type === 'reload') {\n      ws.close();\n      ws.onclose = function () {\n        location.reload();\n      }\n    }\n\n    if (data.type === 'error-resolved') {\n      console.log('[parcel] ✨ Error resolved');\n\n      removeErrorOverlay();\n    }\n\n    if (data.type === 'error') {\n      console.error('[parcel] 🚨  ' + data.error.message + '\\n' + data.error.stack);\n\n      removeErrorOverlay();\n\n      var overlay = createErrorOverlay(data);\n      document.body.appendChild(overlay);\n    }\n  };\n}\n\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n  }\n}\n\nfunction createErrorOverlay(data) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n\n  // html encode message and stack trace\n  var message = document.createElement('div');\n  var stackTrace = document.createElement('pre');\n  message.innerText = data.error.message;\n  stackTrace.innerText = data.error.stack;\n\n  overlay.innerHTML = (\n    '<div style=\"background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;\">' +\n      '<span style=\"background: red; padding: 2px 4px; border-radius: 2px;\">ERROR</span>' +\n      '<span style=\"top: 2px; margin-left: 5px; position: relative;\">🚨</span>' +\n      '<div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">' + message.innerHTML + '</div>' +\n      '<pre>' + stackTrace.innerHTML + '</pre>' +\n    '</div>'\n  );\n\n  return overlay;\n\n}\n\nfunction getParents(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n\n  var parents = [];\n  var k, d, dep;\n\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || (Array.isArray(dep) && dep[dep.length - 1] === id)) {\n        parents.push(k);\n      }\n    }\n  }\n\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n\n  return parents;\n}\n\nfunction hmrApply(bundle, asset) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (modules[asset.id] || !bundle.parent) {\n    var fn = new Function('require', 'module', 'exports', asset.generated.js);\n    asset.isNew = !modules[asset.id];\n    modules[asset.id] = [fn, asset.deps];\n  } else if (bundle.parent) {\n    hmrApply(bundle.parent, asset);\n  }\n}\n\nfunction hmrAcceptCheck(bundle, id) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n\n  if (!modules[id] && bundle.parent) {\n    return hmrAcceptCheck(bundle.parent, id);\n  }\n\n  if (checkedAssets[id]) {\n    return;\n  }\n  checkedAssets[id] = true;\n\n  var cached = bundle.cache[id];\n\n  assetsToAccept.push([bundle, id]);\n\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    return true;\n  }\n\n  return getParents(global.parcelRequire, id).some(function (id) {\n    return hmrAcceptCheck(global.parcelRequire, id)\n  });\n}\n\nfunction hmrAcceptRun(bundle, id) {\n  var cached = bundle.cache[id];\n  bundle.hotData = {};\n  if (cached) {\n    cached.hot.data = bundle.hotData;\n  }\n\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData);\n    });\n  }\n\n  delete bundle.cache[id];\n  bundle(id);\n\n  cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      cb();\n    });\n    return true;\n  }\n}\n"]}